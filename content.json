{"meta":{"title":"Duan","subtitle":"","description":"","author":"小段","url":"http://duanyushuai.github.io","root":"/"},"pages":[{"title":"书单","date":"2022-06-12T06:25:36.580Z","updated":"2022-06-12T03:50:30.584Z","comments":false,"path":"books/index.html","permalink":"http://duanyushuai.github.io/books/index.html","excerpt":"","text":""},{"title":"关于","date":"2022-06-12T06:28:38.098Z","updated":"2022-06-12T03:50:30.584Z","comments":false,"path":"about/index.html","permalink":"http://duanyushuai.github.io/about/index.html","excerpt":"","text":"个人详细介绍"},{"title":"友情链接","date":"2022-06-12T06:28:38.126Z","updated":"2022-06-12T03:50:30.584Z","comments":true,"path":"links/index.html","permalink":"http://duanyushuai.github.io/links/index.html","excerpt":"","text":""},{"title":"分类","date":"2022-06-13T02:45:28.915Z","updated":"2022-06-13T02:45:28.915Z","comments":false,"path":"categories/index.html","permalink":"http://duanyushuai.github.io/categories/index.html","excerpt":"","text":"title: CompletableFuturelayout: javacomments :false"},{"title":"Repositories","date":"2022-06-12T06:28:38.138Z","updated":"2022-06-12T03:50:30.584Z","comments":false,"path":"repository/index.html","permalink":"http://duanyushuai.github.io/repository/index.html","excerpt":"","text":""},{"title":"标签","date":"2022-06-13T03:01:27.694Z","updated":"2022-06-12T06:24:49.702Z","comments":false,"path":"tags/index.html","permalink":"http://duanyushuai.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"","slug":"Duan","date":"2022-06-12T09:02:04.255Z","updated":"2022-06-13T00:32:33.427Z","comments":true,"path":"2022/06/12/Duan/","link":"","permalink":"http://duanyushuai.github.io/2022/06/12/Duan/","excerpt":"","text":"Duantest","categories":[],"tags":[]},{"title":"Java高并发程序设计第二章","slug":"Java高并发程序设计第二章","date":"2021-06-07T03:00:23.000Z","updated":"2022-06-13T15:00:55.975Z","comments":true,"path":"2021/06/07/Java高并发程序设计第二章/","link":"","permalink":"http://duanyushuai.github.io/2021/06/07/Java%E9%AB%98%E5%B9%B6%E5%8F%91%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AC%AC%E4%BA%8C%E7%AB%A0/","excerpt":"","text":"Java高并发程序设计第二章线程创建4个方法创建线程4个方法 继承Thread类创建线程 1234567public class MyThread extends Thread&#123;//继承Thread类 public void run()&#123; //重写run方法 &#125;&#125;new MyThread().start();//创建并启动线程 实现Runnable接口创建线程 12345678910111213141516public class MyThread2 implements Runnable &#123;//实现Runnable接口 public void run()&#123; //重写run方法 &#125;&#125;public class Main &#123; public static void main(String[] args)&#123; //创建并启动线程 MyThread2 myThread=new MyThread2(); Thread thread=new Thread(myThread); thread().start(); //或者 new Thread(new MyThread2()).start(); &#125;&#125; 使用Callable和Future创建线程 123456789101112131415public static void main(String[] args) &#123; // 先使用Lambda表达式创建Callable&lt;Integer&gt;对象 // 使用FutureTask来包装Callable对象 FutureTask&lt;Integer&gt; task = new FutureTask&lt;&gt;((Callable&lt;Integer&gt;)() -&gt; 5); new Thread(task).start(); try &#123; System.out.println(&quot;子线程的返回值：&quot; + task.get()); &#125; catch (Exception ex) &#123; ex.printStackTrace(); &#125; &#125; 使用线程池例如用Executor框架 线程中断 禁止用stop()来退出线程，不安全。 线程安全退出，与中断有关的三个方法。 123public void Thread.interrupt() // 中断线程public boolean Thread.isInterrupted() // 判断是否被中断public static boolean Thread.interrupted() // 判断是否被中断，并清除当前中断状态 等待wait和通知notify 这两个⽅法并不是在Thread类中 的，⽽是输出Object类。 Object.wait()和Thread.sleep()方法都可以让线程等待若干时 间。除了wait()可以被唤醒外，另外一个主要区别就是wait()方法会 释放目标对象的锁，而Thread.sleep()方法不会释放任何资源。 等待线程结束（join)和谦让(yield)12345678910111213141516public class JoinMain &#123; public volatile static int i=0; public static class AddThread extends Thread&#123; @Override public void run() &#123; for(i=0;i&lt;1111111;i++); &#125; &#125; public static void main(String[] args) throws InterruptedException &#123; AddThread at=new AddThread(); at.start(); at.join(); System.out.println(i); &#125;&#125; join()d的核心代码段 123while (isAlive()) &#123; wait(0);&#125; 可以看到，它让调⽤线程在当前线程对象上进⾏等待。当线程执 ⾏完成后，被等待的线程会在退出前调⽤notifyAll()通知所有的等待线 程继续执⾏。因此，值得注意的⼀点是：不要在应⽤程序中，在 Thread对象实例上使⽤类似wait()或者notify()等⽅法，因为这很有可能 会影响系统API的⼯作，或者被系统API所影响。 守护线程(Daemon)如垃圾回收线程 12345678910111213141516171819202122232425262728package testdemo;import org.slf4j.Logger;import org.slf4j.LoggerFactory;public class DaemonDemo &#123; private static final Logger logger = LoggerFactory.getLogger(DaemonDemo.class); public static class DaemonT extends Thread&#123; @Override public void run()&#123; while (true)&#123; logger.info(&quot;I am alive&quot;); try &#123; sleep(1000); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; &#125; &#125; &#125; public static void main(String[] args) &#123; DaemonT d = new DaemonT(); d.setDaemon(true); d.start(); &#125;&#125; d线程为main线程的守护线程，main一结束，d立即结束。 线程优先级设置1234Thread high=new HightPriority();LowPriority low=new LowPriority();high.setPriority(Thread.MAX_PRIORITY);low.setPriority(Thread.MIN_PRIORITY);","categories":[{"name":"java","slug":"java","permalink":"http://duanyushuai.github.io/categories/java/"}],"tags":[{"name":"java","slug":"java","permalink":"http://duanyushuai.github.io/tags/java/"}]},{"title":"joda-time、日志、代码规范","slug":"joda-time  日志  代码规范","date":"2021-04-07T03:00:23.000Z","updated":"2022-06-13T15:02:06.174Z","comments":true,"path":"2021/04/07/joda-time  日志  代码规范/","link":"","permalink":"http://duanyushuai.github.io/2021/04/07/joda-time%20%20%E6%97%A5%E5%BF%97%20%20%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/","excerpt":"","text":"joda-time 日志 代码规范jode-time1234567891011121314@Test public void dateDemo()&#123; DateTime dt = new DateTime(2015,9,1,12,30,0); Date d = dt.toDate(); //当天起始日期 DateTime today = DateTime.now().withTimeAtStartOfDay(); //三天后的日期 DateTime dateTime = today.plusDays(3).plusMonths(1); //入住时间和离店时间的差值 DateTime checkIn = new DateTime(2015,8,29,0,0,0); DateTime checkOut = new DateTime(2015,9,2,0,0,0); System.out.println(Days.daysBetween(checkIn,checkOut).getDays()); &#125; 日期格式 123456789public class DateTimeExample1 &#123; private static final DateTimeFormatter DATE_TIME_FORMATTER = DateTimeFormat.forPattern(&quot;yyyy-MM-dd HH:mm:ss&quot;); public static void main(String[] args) &#123; System.out.println(DATE_TIME_FORMATTER.print(new DateTime())); System.out.println(DATE_TIME_FORMATTER.parseDateTime(&quot;2000-01-01 12:12:12&quot;).toDate()); &#125;&#125; 日志规范配置 123456789101112131415161718&lt;dependency&gt; &lt;groupId&gt;org.slf4j&lt;/groupId&gt; &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt; &lt;version&gt;1.7.25&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;ch.qos.logback&lt;/groupId&gt; &lt;artifactId&gt;logback-core&lt;/artifactId&gt; &lt;version&gt;1.1.3&lt;/version&gt; &lt;scope&gt;runtime&lt;/scope&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;ch.qos.logback&lt;/groupId&gt; &lt;artifactId&gt;logback-classic&lt;/artifactId&gt; &lt;version&gt;1.1.3&lt;/version&gt; &lt;scope&gt;runtime&lt;/scope&gt;&lt;/dependency&gt; 实例 123456789101112public class LogTest &#123; private static final Logger logger = LoggerFactory.getLogger(LogTest.class); public static void main(String[] args) &#123; logger.trace(&quot;log in trace level,args:&#123;&#125;&quot;,args); logger.debug(&quot;log in trace level,args:&#123;&#125;&quot;,args); logger.info(&quot;log in trace level,args:&#123;&#125;&quot;,args); logger.warn(&quot;log in trace level,args:&#123;&#125;&quot;,args); logger.error(&quot;log in trace level,args:&#123;&#125;&quot;,args); &#125;&#125; 查看日志 登录跳板机 在跳板机登录服务器 进入应用目录，一般为&#x2F;home&#x2F;q&#x2F;www&#x2F;&lt;应用名&gt;&#x2F; 该目录下有logs目录，其中存放了Tomcat日志，catalina.out记录了打印到控制台的日志，一般来说，查看改日志即可。 日志规范 禁止使用System.out.print() 在异常处理中打印关键信息 入参 关键变量值 注意数据保密 与用户相关的信息保密 打码到日志 不能影响正常业务 打印日志不能抛出异常，不能影响正常业务 日志影响性能，高QPS业务，控制日志输出量。 使用占位符代替字符串拼接 123456789public class LogTest &#123; private static final Logger logger = LoggerFactory.getLogger(LogTest.class); public static void main(String[] args) &#123; String s = &quot;111&quot;; logger.info(&quot;log in trace level,args: &#123;&#125;&quot;,args); logger.info(&quot;log in trace level,args: &#123;&#125; , &#123;&#125;&quot;,s,s.length()); &#125;&#125; 代码规范 代码给以后的自己看 强迫症 书《编写可读代码的艺术》 类名：形容词或动词 方法名：动词 注释 使用Javadoc格式编写注释 接口必须有注释，对参数，返回值有说明。例如参数限制，返回值是否为空，接口调用频率。","categories":[{"name":"java","slug":"java","permalink":"http://duanyushuai.github.io/categories/java/"}],"tags":[{"name":"java","slug":"java","permalink":"http://duanyushuai.github.io/tags/java/"}]},{"title":"线程创建4个方法","slug":"线程创建4个方法","date":"2021-04-07T03:00:23.000Z","updated":"2022-06-13T15:00:03.170Z","comments":true,"path":"2021/04/07/线程创建4个方法/","link":"","permalink":"http://duanyushuai.github.io/2021/04/07/%E7%BA%BF%E7%A8%8B%E5%88%9B%E5%BB%BA4%E4%B8%AA%E6%96%B9%E6%B3%95/","excerpt":"","text":"线程创建4个方法创建线程4个方法 继承Thread类创建线程 1234567public class MyThread extends Thread&#123;//继承Thread类 public void run()&#123; //重写run方法 &#125;&#125;new MyThread().start();//创建并启动线程 实现Runnable接口创建线程 12345678910111213141516public class MyThread2 implements Runnable &#123;//实现Runnable接口 public void run()&#123; //重写run方法 &#125;&#125;public class Main &#123; public static void main(String[] args)&#123; //创建并启动线程 MyThread2 myThread=new MyThread2(); Thread thread=new Thread(myThread); thread().start(); //或者 new Thread(new MyThread2()).start(); &#125;&#125; 使用Callable和Future创建线程 123456789101112131415public static void main(String[] args) &#123; // 先使用Lambda表达式创建Callable&lt;Integer&gt;对象 // 使用FutureTask来包装Callable对象 FutureTask&lt;Integer&gt; task = new FutureTask&lt;&gt;((Callable&lt;Integer&gt;)() -&gt; 5); new Thread(task).start(); try &#123; System.out.println(&quot;子线程的返回值：&quot; + task.get()); &#125; catch (Exception ex) &#123; ex.printStackTrace(); &#125; &#125; 使用线程池例如用Executor框架","categories":[{"name":"java","slug":"java","permalink":"http://duanyushuai.github.io/categories/java/"}],"tags":[{"name":"java","slug":"java","permalink":"http://duanyushuai.github.io/tags/java/"}]},{"title":"CompletableFuture","slug":"CompletableFuture","date":"2021-04-05T03:00:23.000Z","updated":"2022-06-13T03:02:59.980Z","comments":true,"path":"2021/04/05/CompletableFuture/","link":"","permalink":"http://duanyushuai.github.io/2021/04/05/CompletableFuture/","excerpt":"","text":"CompletableFuture实例化12345public static &lt;U&gt; CompletableFuture&lt;U&gt; supplyAsync(Supplier&lt;U&gt; supplier);public static &lt;U&gt; CompletableFuture&lt;U&gt; supplyAsync(Supplier&lt;U&gt; supplier, Executor executor);public static CompletableFuture&lt;Void&gt; runAsync(Runnable runnable);public static CompletableFuture&lt;Void&gt; runAsync(Runnable runnable, Executor executor); supply:有返回结果 run：无返回结果 获取结果1234public T get()public T get(long timeout, TimeUnit unit)public T getNow(T valueIfAbsent)public T join() 计算完成后续操作1——complete1234public CompletableFuture&lt;T&gt; whenComplete(BiConsumer&lt;? super T,? super Throwable&gt; action)public CompletableFuture&lt;T&gt; whenCompleteAsync(BiConsumer&lt;? super T,? super Throwable&gt; action)public CompletableFuture&lt;T&gt; whenCompleteAsync(BiConsumer&lt;? super T,? super Throwable&gt; action, Executor executor)public CompletableFuture&lt;T&gt; exceptionally(Function&lt;Throwable,? extends T&gt; fn) 方法1和2的区别在于是否使用异步处理，2和3的区别在于是否使用自定义的线程池，前三个方法都会提供一个返回结果和可抛出异常，我们可以使用lambda表达式的来接收这两个参数，然后自己处理。 方法4，接收一个可抛出的异常，且必须return一个返回值，类型与钻石表达式种的类型一样，详见下文的exceptionally() 例子1234567CompletableFuture&lt;Integer&gt; future = CompletableFuture.supplyAsync(() -&gt; &#123; return 10086; &#125;); future.whenComplete((result, error) -&gt; &#123; System.out.println(&quot;拨打&quot;+result); error.printStackTrace(); &#125;); whenCompleteAsync 与 whenComplete 区别 12345678910111213141516171819202122232425262728293031323334353637383940public static void main(String[] args) throws Exception &#123; CompletableFuture&lt;Integer&gt; f = new CompletableFuture&lt;Integer&gt;(); new Thread(() -&gt; &#123; // 子线程A启动 logger.info(&quot;子线程A启动&quot;); try &#123; logger.info(&quot;子线程A沉睡5s&quot;); Thread.sleep(5000l); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; logger.info(&quot;子线程A令future完成&quot;); f.complete(100); // 当子线程A执行到f.complete的时候，会去看是否有注册好的f的then或者when（非async的），如果有的话，会顺次去执行。 logger.info(&quot;子线程A结束&quot;); &#125;).start();; // 当前线程（主线程）执行到这里的时候，如果子线程还没有执行到f.complete(100)， // 那么当前线程会把whenComplete事件注册起来，并且说好哪个线程执行了f.complete(100)， // 哪个线程就负责执行whenComplete的内容。 // 如果当前线程（主线程）执行到这里的时候，f.complete(100)已经被其他线程执行完毕了。 // 那么只有当前线程自己来执行whenComplete里面的内容了。 f.whenCompleteAsync((i, ex) -&gt; &#123; // 这个场景下，whenComplete的回调的执行线程会是子线程A logger.info(&quot;do something after complete begin&quot;); try &#123; logger.info(&quot;沉睡10s&quot;); Thread.sleep(10000l); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; logger.info(&quot;do something after complete end&quot;); &#125;); logger.info(&quot;main over&quot;); System.in.read();&#125; 计算完成后续操作2——handle123public &lt;U&gt; CompletableFuture&lt;U&gt; handle(BiFunction&lt;? super T,Throwable,? extends U&gt; fn)public &lt;U&gt; CompletableFuture&lt;U&gt; handleAsync(BiFunction&lt;? super T,Throwable,? extends U&gt; fn)public &lt;U&gt; CompletableFuture&lt;U&gt; handleAsync(BiFunction&lt;? super T,Throwable,? extends U&gt; fn, Executor executor) 方法返回类型可以自定义","categories":[{"name":"java","slug":"java","permalink":"http://duanyushuai.github.io/categories/java/"}],"tags":[{"name":"java","slug":"java","permalink":"http://duanyushuai.github.io/tags/java/"},{"name":"CompletableFuture","slug":"CompletableFuture","permalink":"http://duanyushuai.github.io/tags/CompletableFuture/"}]},{"title":"基于胶囊网络的肽段预测","slug":"基于胶囊网络的肽段预测","date":"2020-09-10T02:00:21.000Z","updated":"2022-06-13T15:24:45.573Z","comments":true,"path":"2020/09/10/基于胶囊网络的肽段预测/","link":"","permalink":"http://duanyushuai.github.io/2020/09/10/%E5%9F%BA%E4%BA%8E%E8%83%B6%E5%9B%8A%E7%BD%91%E7%BB%9C%E7%9A%84%E8%82%BD%E6%AE%B5%E9%A2%84%E6%B5%8B/","excerpt":"","text":"Prediction of Peptide Detectability Based on CapsNet and Convolutional Block Attention Modulehttps://www.mdpi.com/1422-0067/22/21/12080","categories":[{"name":"深度学习","slug":"深度学习","permalink":"http://duanyushuai.github.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"算法","slug":"算法","permalink":"http://duanyushuai.github.io/tags/%E7%AE%97%E6%B3%95/"},{"name":"python","slug":"python","permalink":"http://duanyushuai.github.io/tags/python/"},{"name":"深度学习","slug":"深度学习","permalink":"http://duanyushuai.github.io/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"}]}],"categories":[{"name":"java","slug":"java","permalink":"http://duanyushuai.github.io/categories/java/"},{"name":"深度学习","slug":"深度学习","permalink":"http://duanyushuai.github.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"java","slug":"java","permalink":"http://duanyushuai.github.io/tags/java/"},{"name":"CompletableFuture","slug":"CompletableFuture","permalink":"http://duanyushuai.github.io/tags/CompletableFuture/"},{"name":"算法","slug":"算法","permalink":"http://duanyushuai.github.io/tags/%E7%AE%97%E6%B3%95/"},{"name":"python","slug":"python","permalink":"http://duanyushuai.github.io/tags/python/"},{"name":"深度学习","slug":"深度学习","permalink":"http://duanyushuai.github.io/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"}]}