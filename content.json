{"meta":{"title":"Duan","subtitle":"有点小菜","description":"有点小菜","author":"小段","url":"http://duanyushuai.github.io","root":"/"},"pages":[{"title":"关于","date":"2022-06-18T09:22:10.505Z","updated":"2022-06-18T09:22:10.505Z","comments":false,"path":"about/index.html","permalink":"http://duanyushuai.github.io/about/index.html","excerpt":"","text":"个人详细介绍 河北 石家庄 毕业 浙江理工大学 本硕 就职 去哪网"},{"title":"友情链接","date":"2022-06-12T06:28:38.126Z","updated":"2022-06-12T03:50:30.584Z","comments":true,"path":"links/index.html","permalink":"http://duanyushuai.github.io/links/index.html","excerpt":"","text":""},{"title":"分类","date":"2022-06-13T02:45:28.915Z","updated":"2022-06-13T02:45:28.915Z","comments":false,"path":"categories/index.html","permalink":"http://duanyushuai.github.io/categories/index.html","excerpt":"","text":"title: CompletableFuturelayout: javacomments :false"},{"title":"Repositories","date":"2022-06-12T06:28:38.138Z","updated":"2022-06-12T03:50:30.584Z","comments":false,"path":"repository/index.html","permalink":"http://duanyushuai.github.io/repository/index.html","excerpt":"","text":""},{"title":"标签","date":"2022-06-13T03:01:27.694Z","updated":"2022-06-12T06:24:49.702Z","comments":false,"path":"tags/index.html","permalink":"http://duanyushuai.github.io/tags/index.html","excerpt":"","text":""},{"title":"书单","date":"2022-06-12T06:25:36.580Z","updated":"2022-06-12T03:50:30.584Z","comments":false,"path":"books/index.html","permalink":"http://duanyushuai.github.io/books/index.html","excerpt":"","text":""}],"posts":[{"title":"接口幂等性","slug":"接口幂等性","date":"2022-08-10T02:00:00.000Z","updated":"2022-08-11T14:06:32.123Z","comments":true,"path":"2022/08/10/接口幂等性/","link":"","permalink":"http://duanyushuai.github.io/2022/08/10/%E6%8E%A5%E5%8F%A3%E5%B9%82%E7%AD%89%E6%80%A7/","excerpt":"","text":"接口幂等性问题出现 用户多次点击 用户回退在提交 feign触发重试 1.token token 的获取、比较和删除必须是原子性的 使用redis和lua脚本 1if redis.call(&#x27;get&#x27;,KEYS[1]== ARGV[1] then return is.call(&#x27;del&#x27;,KEYS[1])) else return 0 end 2. 各种锁机制1. 数据库悲观锁1select * from xxxx where id=1 for update id一定是主键和唯一索引，不然可能造成锁表 2. 数据库乐观锁首先获取这条数据的版本号version，然后操作的时候带上版本号 1update goods set count = count -1 ,version = version + 1 where id = 2 and version = 1 乐观锁处理读多写少问题 3. 业务分布式锁4. 各种唯一索引数据库的唯一约束插入数据按照唯一索引，比如订单号，相同的订单号就不能重复插入。需要不是自增主键，代码生成全局唯一id。 在分库分表下，根据路由规则，要路由到同一张表，才能是唯一索引有意义。 redis防重我们可以计算上传数据的MD5值，存到redis set，每次处理数据，去和redis进行匹配 防重表把orderNo作为去重表的唯一索引插入mysql，去重表和业务表处在同一数据库，处于同一事务，方便回滚 5.全局请求唯一id调用接口生成唯一id，保存在redis的集合中。 可以使用nginx设置请求的唯一id 1proxy_set_header X-Request-Id $request_id;","categories":[{"name":"java web","slug":"java-web","permalink":"http://duanyushuai.github.io/categories/java-web/"}],"tags":[{"name":"java web","slug":"java-web","permalink":"http://duanyushuai.github.io/tags/java-web/"}]},{"title":"白嫖","slug":"白嫖","date":"2022-07-29T06:11:08.153Z","updated":"2022-08-11T14:06:17.307Z","comments":true,"path":"2022/07/29/白嫖/","link":"","permalink":"http://duanyushuai.github.io/2022/07/29/%E7%99%BD%E5%AB%96/","excerpt":"","text":"工具你有没有想过，在自己常用的网站地址前加几个字符，就可以实现各种各样的效果？ 无需安装任何软件，就能解析视频、下载音乐、复制文库……是的你没看错，只需要简单地添加一个前缀，就能解决。 视频解析 找到你喜欢的电影&#x2F;电视剧，打开它所在当前网页。 不论是爱奇艺，腾讯视频还是其他视频网站，只需要在网站前加上wn.run&#x2F;这串字符。 注意：一定要在http或https前面添加。 然后按下回车，就会跳转至一个名为万能命令的新页面。 在下方【相关视频播放】这一栏里，就是你想观看的视频的解析结果。 任选一个解析网站打开，就可以全屏观看该视频了。 文库下载 对于工作党和学生党来说，最痛苦的事情，莫过于找到了急需的资料，却没有文库VIP了。 在某度文库上，如果没有开通VIP的话，既无法复制文字，也无法下载文档，几乎是寸步难行。 这时候，我们只需要在所需文档地址前加上wn.run&#x2F;前缀。 按下回车，就可以找到文库在线下载的解析结果了。 点击上述结果，即会自动跳转至一个名为网页转换助手的页面。 在这里，你可以选择【转为Word】或【转为PDF】。 然后点击【下载】按钮，就能成功下载该会员文档的源文件了。 音乐下载 如果想要下载网易云音乐、QQ音乐、酷狗音乐上的歌曲，只需在播放地址前加上wn.run&#x2F;。 然后选择其中一个解析源，就能下载歌曲了。 视频下载 当然，这个小技巧不仅能用于下载音乐，同时也可以用来下载各个视频网站上的视频。 以B站为例，在网址前输入wn.run&#x2F;。 然后回车，选择其中一个解析结果，就可以成功下载该视频了。 除了上面介绍的功能，通过wn.run&#x2F;这个命令还能实现许许多多的效果，比如网页翻译、网页截图、网页二维码生成等等。 每个功能都无需下载、即用即走，且没有平台限制，pc、android、ios等都可使用。 另外，在万能命令网站里，还收录了很多高质量的工具，大家感兴趣的话，也可以直接收藏这个地址。 鉴于这个工具比较敏感，如果大家有需要的话，就赶紧试试吧！","categories":[{"name":"工具","slug":"工具","permalink":"http://duanyushuai.github.io/categories/%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"工具","slug":"工具","permalink":"http://duanyushuai.github.io/tags/%E5%B7%A5%E5%85%B7/"}]},{"title":"redis 缓存","slug":"redis 缓存","date":"2022-07-11T13:46:55.260Z","updated":"2022-07-12T13:52:10.751Z","comments":true,"path":"2022/07/11/redis 缓存/","link":"","permalink":"http://duanyushuai.github.io/2022/07/11/redis%20%E7%BC%93%E5%AD%98/","excerpt":"","text":"redis 缓存那些数据适合缓存 即时性和数据一致性要求不高的 读多写少 使用redis 1234&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;&lt;/dependency&gt; 简单的分布式锁 12345678910111213141516171819202122232425262728293031323334353637383940public Map&lt;String, List&lt;Catelog2Vo&gt;&gt; getCatalogJsonFromDbWithRedislock() &#123; // 1 占分布式锁，去redis占坑 String uuid = UUID.randomUUID().toString(); Boolean lock = redisTemplate.opsForValue().setIfAbsent(&quot;lock&quot;, uuid, 300, TimeUnit.SECONDS); if (lock) &#123; System.out.println(&quot;获取分布式锁成功&quot;); // 加锁成功...执行业务 // 2 设置过期时间// redisTemplate.expire(&quot;lock&quot;, 30, TimeUnit.SECONDS); Map&lt;String, List&lt;Catelog2Vo&gt;&gt; dataFromDB; try &#123; dataFromDB = getDataFromDB(); &#125; finally &#123; String script = &quot;if redis.call(&#x27;get&#x27;, KEYS[1]) == ARGV[1] then return redis.call(&#x27;del&#x27;, KEYS[1]) else return 0 end&quot;; // 删除锁 Long lock1 = redisTemplate.execute(new DefaultRedisScript&lt;Long&gt;(script, Long.class), Arrays.asList(&quot;lock&quot;), uuid); &#125;// redisTemplate.delete(&quot;lock&quot;); // 获取值对比 + 对比成功删除 = 原子操作 lua脚本解锁// String lockValue = redisTemplate.opsForValue().get(&quot;lock&quot;);// if (uuid.equals(lockValue)) &#123;// // 删除我自己的锁// redisTemplate.delete(&quot;lock&quot;);// &#125; return dataFromDB; &#125; else &#123; // 加锁失败 // 休眠100ms重试 System.out.println(&quot;获取分布式锁失败...等待重试&quot;); try &#123; Thread.sleep(200); &#125; catch (Exception e) &#123; &#125; return getCatalogJsonFromDbWithRedislock(); // 自旋的方式 &#125; &#125;","categories":[],"tags":[]},{"title":"nginx使用","slug":"nginx使用","date":"2022-07-02T10:30:26.308Z","updated":"2022-07-02T10:34:50.961Z","comments":true,"path":"2022/07/02/nginx使用/","link":"","permalink":"http://duanyushuai.github.io/2022/07/02/nginx%E4%BD%BF%E7%94%A8/","excerpt":"","text":"nginx使用","categories":[],"tags":[]},{"title":"sku和spu数据库设计","slug":"sku和spu数据库设计","date":"2022-06-26T10:50:48.206Z","updated":"2022-07-03T02:56:31.206Z","comments":true,"path":"2022/06/26/sku和spu数据库设计/","link":"","permalink":"http://duanyushuai.github.io/2022/06/26/sku%E5%92%8Cspu%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1/","excerpt":"","text":"sku和spu数据库设计","categories":[],"tags":[]},{"title":"自定义注解","slug":"自定义注解（校验和日志）","date":"2022-06-26T03:34:51.020Z","updated":"2022-07-02T07:51:02.580Z","comments":true,"path":"2022/06/26/自定义注解（校验和日志）/","link":"","permalink":"http://duanyushuai.github.io/2022/06/26/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E8%A7%A3%EF%BC%88%E6%A0%A1%E9%AA%8C%E5%92%8C%E6%97%A5%E5%BF%97%EF%BC%89/","excerpt":"","text":"自定义注解（校验和日志）JSR303 自定义校验创建ListValue校验注解123456789101112131415161718192021222324252627package com.yxj.gulimall.common.valid;import javax.validation.Constraint;import javax.validation.Payload;import java.lang.annotation.*;/** * * 自定义校验注解 */@Documented@Constraint( validatedBy = &#123;ListValueConstraintValidator.class&#125;)@Target(&#123;ElementType.METHOD, ElementType.FIELD, ElementType.ANNOTATION_TYPE, ElementType.CONSTRUCTOR, ElementType.PARAMETER, ElementType.TYPE_USE&#125;)@Retention(RetentionPolicy.RUNTIME)public @interface ListValue &#123; String message() default &quot;&#123;com.chenxin.gulimail.common.valid.ListValue.message&#125;&quot;; Class&lt;?&gt;[] groups() default &#123;&#125;; Class&lt;? extends Payload&gt;[] payload() default &#123;&#125;; int[] vals() default &#123;&#125;;&#125; ListValueConstraintValidator校验器1234567891011121314151617181920212223242526&#123; Set&lt;Integer&gt; set = new HashSet&lt;Integer&gt;(); /** * 初始化 * @param constraintAnnotation */ @Override public void initialize(ListValue constraintAnnotation) &#123; int[] vals = constraintAnnotation.vals(); for (int val : vals) &#123; set.add(val); &#125; &#125; /** * 真正的校验规则 * 判断是否校验成功 * @param integer * @param constraintValidatorContext * @return */ @Override public boolean isValid(Integer integer, ConstraintValidatorContext constraintValidatorContext) &#123; return set.contains(integer); &#125;&#125;","categories":[],"tags":[]},{"title":"redis Guava 缓存","slug":"redis-Guava-缓存","date":"2022-06-26T02:00:00.000Z","updated":"2022-07-24T13:18:01.257Z","comments":true,"path":"2022/06/26/redis-Guava-缓存/","link":"","permalink":"http://duanyushuai.github.io/2022/06/26/redis-Guava-%E7%BC%93%E5%AD%98/","excerpt":"","text":"redis Guava 缓存redis 懒加载数据在新增到 MySQL 不进行缓存，在精确查找进行缓存，做到查询即缓存，不查询不缓存。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677// 伪代码示例 Xx代表你的的业务对象 如User Goods等等public class XxLazyCache &#123; @Autowired private RedisTemplate&lt;String, Xx&gt; redisTemplate; @Autowired private XxService xxService;// 你的业务service /** * 查询 通过查询缓存是否存在驱动缓存加载 建议在前置业务保证id对应数据是绝对存在于数据库中的 */ public Xx getXx(int id) &#123; // 1.查询缓存里面有没有数据 Xx xxCache = getXxFromCache(id); if(xxCache != null) &#123; return xxCache;// 卫语句使代码更有利于阅读 &#125; // 2.查询数据库获取数据 我们假定到业务这一步，传过来的id都在数据库中有对应数据 Xx xx = xxService.getXxById(id); // 3.设置缓存、这一步相当于Redis缓存懒加载，下次再查询此id，则会走缓存 setXxFromCache(xx); return xx; &#125; &#125; /** * 对xx数据进行修改或者删除操作 操作数据库成功后 删除缓存 * 删除请求 - 删除数据库数据 删除缓存 * 修改请求 - 更新数据库数据 删除缓存 下次在查询时候就会从数据库拉取新的数据到缓存中 */ public void deleteXxFromCache(long id) &#123; String key = &quot;Xx:&quot; + xx.getId(); redisTemplate.delete(key); &#125; private void setXxFromCache(Xx xx) &#123; String key = &quot;Xx:&quot; + xx.getId(); redisTemplate.opsForValue().set(key, xx); &#125; private Xx getXxFromCache(int id) &#123; // 通过缓存前缀拼装唯一主键作为缓存Key 如Xxx信息 就是Xxx:id String key = &quot;Xx:&quot; + id; return redisTemplate.opsForValue().get(key); &#125;&#125;// 业务类public class XxServie &#123; @Autowired private XxLazyCache xxLazyCache; // 查询数据库 public Xx getXxById(long id) &#123; // 省略实现 return xx; &#125; public void updateXx(Xx xx) &#123; // 更新MySQL数据 省略 // 删除缓存 xxLazyCache.deleteXxFromCache(xx.getId()); &#125; public void deleteXx(long id) &#123; // 删除MySQL数据 省略 // 删除缓存 xxLazyCache.deleteXxFromCache(xx.getId()); &#125;&#125;// 实体类@Datapublic class Xx &#123; // 业务主键 private Long id; // ...省略&#125;","categories":[{"name":"Guava","slug":"Guava","permalink":"http://duanyushuai.github.io/categories/Guava/"},{"name":"redis","slug":"Guava/redis","permalink":"http://duanyushuai.github.io/categories/Guava/redis/"}],"tags":[{"name":"Guava","slug":"Guava","permalink":"http://duanyushuai.github.io/tags/Guava/"},{"name":"redis","slug":"redis","permalink":"http://duanyushuai.github.io/tags/redis/"}]},{"title":"解决跨域","slug":"解决跨域","date":"2022-06-25T09:57:38.465Z","updated":"2022-08-14T04:28:49.153Z","comments":true,"path":"2022/06/25/解决跨域/","link":"","permalink":"http://duanyushuai.github.io/2022/06/25/%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F/","excerpt":"","text":"解决跨域 使用nginx部署为同一域 请求返回可跨域","categories":[{"name":"java web","slug":"java-web","permalink":"http://duanyushuai.github.io/categories/java-web/"}],"tags":[{"name":"java web","slug":"java-web","permalink":"http://duanyushuai.github.io/tags/java-web/"}]},{"title":"","slug":"Duan","date":"2022-06-12T09:02:04.255Z","updated":"2022-06-13T00:32:33.427Z","comments":true,"path":"2022/06/12/Duan/","link":"","permalink":"http://duanyushuai.github.io/2022/06/12/Duan/","excerpt":"","text":"Duantest","categories":[],"tags":[]},{"title":"api接口优化","slug":"api接口优化","date":"2022-06-07T02:00:00.000Z","updated":"2022-08-14T04:29:34.848Z","comments":true,"path":"2022/06/07/api接口优化/","link":"","permalink":"http://duanyushuai.github.io/2022/06/07/api%E6%8E%A5%E5%8F%A3%E4%BC%98%E5%8C%96/","excerpt":"","text":"api 接口调优慢查询1.深度分页1select name,code from student limit 1000,20 会查出来前1000条数据 1select name,code from student where id &gt; 1000 limit 20 走索引，但需要上次查询出来的最大id 2.未加索引1show create table xxxx (表名) 查看表索引 加索引表可能引起锁表，要在mysql使用低峰期 3.索引失效索引失效的几个原因 索引字段的区分度不大 索引语句在or中 模糊匹配 %xxx 索引发生隐式变换 不满足最左前缀规则 where条件里，索引有计算 4.join 过多or子查询过多一般不建议用子查询，可以把子查询改成join，join的表也不宜过多，具体问题具体分析，看数据量 5.in的元素过多如果一个查询有in ，in条件加了合适的索引，还是慢，就高度怀疑是in的元素过多。可以分组查询，再快可以引用多线程 in元素过多可以在代码层做限制 123if(ids.size() &gt; 200) &#123; throw new Exception(&quot;单次查询数据量太多&quot;)&#125; 6.单纯数据量过大分库分表 业务复杂1.循环调用循环调用同一段代码，每次的循环逻辑一致，前后不关联。比如我们要初始化一个列表。 可采用多线程的方式去获取数据 2. 顺序调用 使用CompletableFuture解决 3. 线程池设置不合理调整线程池参数，查看时候是io任务还是cpu任务，根据业务来拆分线程池。 4. 锁设置并不合理锁类型使用不合理，就是读写锁。锁粒度太大 5.机器问题（fullGC，机器重启，线程打满）造成这个问题的原因非常多，笔者就遇到了定时任务过大引起fullGC，代码存在线程泄露引起RSS内存占用过高进而引起机器重启等待诸多原因。需要结合各种监控和具体场景具体分析，进而进行大事务拆分、重新规划线程池等等工作 6. 万金油解决方式 缓存 简单的map guava等本地缓存工具包 缓存中间件：redis、tair或memcached 回调和反查 ​ 这种方式往往是业务上的解决方式，在订单或者付款系统中应用的比较多。举个例子：当我们付款的时候，需要调用一个专门的付款系统接口，该系统经过一系列验证、存储工作后还要调用银行接口以执行付款。由于付款这个动作要求十分严谨，银行侧接口执行可能比较缓慢，进而拖累整个付款接口性能。 ​ 这个时候我们就可以采用fast success的方式：当必要的校验和存储完成后，立即返回success，同时告诉调用方一个中间态“付款中”。而后调用银行接口，当获得支付结果后再调用上游系统的回调接口返回付款的最终结果“成果”or“失败”。","categories":[{"name":"java web","slug":"java-web","permalink":"http://duanyushuai.github.io/categories/java-web/"}],"tags":[{"name":"java web","slug":"java-web","permalink":"http://duanyushuai.github.io/tags/java-web/"}]},{"title":"docker入门","slug":"docker","date":"2022-03-02T02:00:00.000Z","updated":"2022-06-21T02:24:27.154Z","comments":true,"path":"2022/03/02/docker/","link":"","permalink":"http://duanyushuai.github.io/2022/03/02/docker/","excerpt":"","text":"docker1234567891011121314151617181920212223242526272829301. 卸载系统之前的docker sudo yum remove docker \\ docker-client \\ docker-client-latest \\ docker-common \\ docker-latest \\ docker-latest-logrotate \\ docker-logrotate \\ docker-engine2.$ sudo yum install -y yum-utils \\ device-mapper-persistent-data \\ lvm23. sudo yum-config-manager \\ --add-repo \\ https://download.docker.com/linux/centos/docker-ce.repo 4. 安装DOCKER引擎sudo yum install docker-ce docker-ce-cli containerd.io5. 启动Docker.sudo systemctl start docker6. 设置开机自启sudo systemctl start docker7. 阿里云镜像加速器https://cr.console.aliyun.com/cn-wulanchabu/instances/mirrors docker 使用123456789101112131415161718192021222324252627282930313233343536373839404142434445sudo docker pull mysql:8.0docker images创建目录保存数据sudo docker run --name mysql -v /usr/local/mysql/data:/var/lib/mysql -v /usr/local/mysql:/etc/mysql/conf.d -v /usr/local/mysql/log:/var/log/mysql -e MYSQL_ROOT_PASSWORD=root -p 3306:3306 -d mysql:8.0## -v 目录映射，可以在linux环境中寻找文件，修改容器配置查看运行容器docker ps[root@hecs-328722 mysql]# docker psCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES369ccdfb7630 mysql:8.0 &quot;docker-entrypoint.s…&quot; 6 minutes ago Up 6 minutes 0.0.0.0:3306-&gt;3306/tcp, :::3306-&gt;3306/tcp, 33060/tcp mysql进入容器 内部docker exec -it 容器名称|容器id bin/bashdocker exec -it mysql bin/bash退出容器exit1. 安装redisdocker pull redis:6.0.102. 修改需要自定义的配置(docker-redis默认没有配置文件，自己在宿主机建立后挂载映射)创建并修改/usr/local/redis/redis.confbind 0.0.0.0 开启远程权限appendonly yes 开启aof持久化3.docker run --name redis -v /usr/local/redis/data:/data -v /usr/local/redis/redis.conf:/usr/local/etc/redis/redis.conf -p 6379:6379 -d redis:6.0.10 redis-server /usr/local/etc/redis/redis.conf 解释： -v /usr/local/redis/data:/data # 将数据目录挂在到本地保证数据安全 -v /root/redis/redis.conf:/usr/local/etc/redis/redis.conf # 将配置文件挂在到本地修改方便 4. docker 起客户端 docker exec -it redis redis-cli 5. 重启redis docker restart redis","categories":[{"name":"docker","slug":"docker","permalink":"http://duanyushuai.github.io/categories/docker/"},{"name":"谷粒商城","slug":"docker/谷粒商城","permalink":"http://duanyushuai.github.io/categories/docker/%E8%B0%B7%E7%B2%92%E5%95%86%E5%9F%8E/"}],"tags":[{"name":"docker","slug":"docker","permalink":"http://duanyushuai.github.io/tags/docker/"}]},{"title":"rabbitMQ","slug":"rabbitMQ","date":"2022-02-20T02:00:00.000Z","updated":"2022-08-11T14:11:58.877Z","comments":true,"path":"2022/02/20/rabbitMQ/","link":"","permalink":"http://duanyushuai.github.io/2022/02/20/rabbitMQ/","excerpt":"","text":"rabbitMQ","categories":[{"name":"rabbitMQ","slug":"rabbitMQ","permalink":"http://duanyushuai.github.io/categories/rabbitMQ/"}],"tags":[{"name":"rabbitMQ","slug":"rabbitMQ","permalink":"http://duanyushuai.github.io/tags/rabbitMQ/"}]},{"title":"全局异常","slug":"全局异常","date":"2021-10-11T02:00:00.000Z","updated":"2022-08-14T04:29:18.719Z","comments":true,"path":"2021/10/11/全局异常/","link":"","permalink":"http://duanyushuai.github.io/2021/10/11/%E5%85%A8%E5%B1%80%E5%BC%82%E5%B8%B8/","excerpt":"","text":"全局异常12345678910111213141516171819202122@Slf4j@RestControllerAdvice(basePackages = &quot;com.yxj.gulimall.product.controller&quot;)public class GulimallExceptionControllerAdvice &#123; @ExceptionHandler(value = MethodArgumentNotValidException.class) public R handleValidException(MethodArgumentNotValidException e) &#123; log.error(&quot;数据校验出现问题&#123;&#125;,异常类型: &#123;&#125;&quot;,e.getMessage(),e.getClass()); BindingResult bindingResult = e.getBindingResult(); Map&lt;String, String&gt; errorMap = new HashMap&lt;&gt;(); bindingResult.getFieldErrors().forEach((fieldError -&gt; &#123; errorMap.put(fieldError.getField(),fieldError.getDefaultMessage()); &#125;)); return R.error(BizCodeEnum.VALID_EXCEPTION.getCode(),BizCodeEnum.VALID_EXCEPTION.getMsg()).put(&quot;data&quot;,errorMap); &#125; @ExceptionHandler(value = Throwable.class) public R handleException(Throwable throwable) &#123; log.error(&quot;错误:&quot;, throwable); return R.error(BizCodeEnum.UNKNOWN_EXCEPTION.getCode(),BizCodeEnum.UNKNOWN_EXCEPTION.getMsg()); &#125;&#125;","categories":[],"tags":[]},{"title":"HashMap","slug":"HashMap","date":"2021-07-08T03:00:23.000Z","updated":"2022-06-18T07:38:31.348Z","comments":true,"path":"2021/07/08/HashMap/","link":"","permalink":"http://duanyushuai.github.io/2021/07/08/HashMap/","excerpt":"","text":"HashMapjdk1.7 数组+链表 jdk1.8 数组+ 链表&#x2F;红黑树 DEFAULT_INITIAL_CAPACITY Table数组的初始化长度： 1 &lt;&lt; 4``2^4=16（为什么要是 2的n次方？） MAXIMUM_CAPACITY Table数组的最大长度： 1&lt;&lt;30``2^30=1073741824 DEFAULT_LOAD_FACTOR 负载因子：默认值为0.75。 当元素的总个数&gt;当前数组的长度 * 负载因子。数组会进行扩容，扩容为原来的两倍（todo：为什么是两倍？） TREEIFY_THRESHOLD 链表树化阙值： 默认值为 8 。表示在一个node（Table）节点下的值的个数大于8时候，会将链表转换成为红黑树。 UNTREEIFY_THRESHOLD 红黑树链化阙值： 默认值为 6 。 表示在进行扩容期间，单个Node节点下的红黑树节点的个数小于6时候，会将红黑树转化成为链表。 MIN_TREEIFY_CAPACITY = 64 最小树化阈值，当Table所有元素超过改值，才会进行树化（为了防止前期阶段频繁扩容和树化过程冲突） HashMap是线程不安全的","categories":[{"name":"java","slug":"java","permalink":"http://duanyushuai.github.io/categories/java/"}],"tags":[{"name":"java","slug":"java","permalink":"http://duanyushuai.github.io/tags/java/"},{"name":"HashMap","slug":"HashMap","permalink":"http://duanyushuai.github.io/tags/HashMap/"}]},{"title":"Java高并发程序设计第二章","slug":"Java高并发程序设计第二章","date":"2021-06-07T03:00:23.000Z","updated":"2022-06-13T15:00:55.975Z","comments":true,"path":"2021/06/07/Java高并发程序设计第二章/","link":"","permalink":"http://duanyushuai.github.io/2021/06/07/Java%E9%AB%98%E5%B9%B6%E5%8F%91%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AC%AC%E4%BA%8C%E7%AB%A0/","excerpt":"","text":"Java高并发程序设计第二章线程创建4个方法创建线程4个方法 继承Thread类创建线程 1234567public class MyThread extends Thread&#123;//继承Thread类 public void run()&#123; //重写run方法 &#125;&#125;new MyThread().start();//创建并启动线程 实现Runnable接口创建线程 12345678910111213141516public class MyThread2 implements Runnable &#123;//实现Runnable接口 public void run()&#123; //重写run方法 &#125;&#125;public class Main &#123; public static void main(String[] args)&#123; //创建并启动线程 MyThread2 myThread=new MyThread2(); Thread thread=new Thread(myThread); thread().start(); //或者 new Thread(new MyThread2()).start(); &#125;&#125; 使用Callable和Future创建线程 123456789101112131415public static void main(String[] args) &#123; // 先使用Lambda表达式创建Callable&lt;Integer&gt;对象 // 使用FutureTask来包装Callable对象 FutureTask&lt;Integer&gt; task = new FutureTask&lt;&gt;((Callable&lt;Integer&gt;)() -&gt; 5); new Thread(task).start(); try &#123; System.out.println(&quot;子线程的返回值：&quot; + task.get()); &#125; catch (Exception ex) &#123; ex.printStackTrace(); &#125; &#125; 使用线程池例如用Executor框架 线程中断 禁止用stop()来退出线程，不安全。 线程安全退出，与中断有关的三个方法。 123public void Thread.interrupt() // 中断线程public boolean Thread.isInterrupted() // 判断是否被中断public static boolean Thread.interrupted() // 判断是否被中断，并清除当前中断状态 等待wait和通知notify 这两个⽅法并不是在Thread类中 的，⽽是输出Object类。 Object.wait()和Thread.sleep()方法都可以让线程等待若干时 间。除了wait()可以被唤醒外，另外一个主要区别就是wait()方法会 释放目标对象的锁，而Thread.sleep()方法不会释放任何资源。 等待线程结束（join)和谦让(yield)12345678910111213141516public class JoinMain &#123; public volatile static int i=0; public static class AddThread extends Thread&#123; @Override public void run() &#123; for(i=0;i&lt;1111111;i++); &#125; &#125; public static void main(String[] args) throws InterruptedException &#123; AddThread at=new AddThread(); at.start(); at.join(); System.out.println(i); &#125;&#125; join()d的核心代码段 123while (isAlive()) &#123; wait(0);&#125; 可以看到，它让调⽤线程在当前线程对象上进⾏等待。当线程执 ⾏完成后，被等待的线程会在退出前调⽤notifyAll()通知所有的等待线 程继续执⾏。因此，值得注意的⼀点是：不要在应⽤程序中，在 Thread对象实例上使⽤类似wait()或者notify()等⽅法，因为这很有可能 会影响系统API的⼯作，或者被系统API所影响。 守护线程(Daemon)如垃圾回收线程 12345678910111213141516171819202122232425262728package testdemo;import org.slf4j.Logger;import org.slf4j.LoggerFactory;public class DaemonDemo &#123; private static final Logger logger = LoggerFactory.getLogger(DaemonDemo.class); public static class DaemonT extends Thread&#123; @Override public void run()&#123; while (true)&#123; logger.info(&quot;I am alive&quot;); try &#123; sleep(1000); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; &#125; &#125; &#125; public static void main(String[] args) &#123; DaemonT d = new DaemonT(); d.setDaemon(true); d.start(); &#125;&#125; d线程为main线程的守护线程，main一结束，d立即结束。 线程优先级设置1234Thread high=new HightPriority();LowPriority low=new LowPriority();high.setPriority(Thread.MAX_PRIORITY);low.setPriority(Thread.MIN_PRIORITY);","categories":[{"name":"java","slug":"java","permalink":"http://duanyushuai.github.io/categories/java/"}],"tags":[{"name":"java","slug":"java","permalink":"http://duanyushuai.github.io/tags/java/"}]},{"title":"joda-time、日志、代码规范","slug":"joda-time  日志  代码规范","date":"2021-04-07T03:00:23.000Z","updated":"2022-06-13T15:02:06.174Z","comments":true,"path":"2021/04/07/joda-time  日志  代码规范/","link":"","permalink":"http://duanyushuai.github.io/2021/04/07/joda-time%20%20%E6%97%A5%E5%BF%97%20%20%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/","excerpt":"","text":"joda-time 日志 代码规范jode-time1234567891011121314@Test public void dateDemo()&#123; DateTime dt = new DateTime(2015,9,1,12,30,0); Date d = dt.toDate(); //当天起始日期 DateTime today = DateTime.now().withTimeAtStartOfDay(); //三天后的日期 DateTime dateTime = today.plusDays(3).plusMonths(1); //入住时间和离店时间的差值 DateTime checkIn = new DateTime(2015,8,29,0,0,0); DateTime checkOut = new DateTime(2015,9,2,0,0,0); System.out.println(Days.daysBetween(checkIn,checkOut).getDays()); &#125; 日期格式 123456789public class DateTimeExample1 &#123; private static final DateTimeFormatter DATE_TIME_FORMATTER = DateTimeFormat.forPattern(&quot;yyyy-MM-dd HH:mm:ss&quot;); public static void main(String[] args) &#123; System.out.println(DATE_TIME_FORMATTER.print(new DateTime())); System.out.println(DATE_TIME_FORMATTER.parseDateTime(&quot;2000-01-01 12:12:12&quot;).toDate()); &#125;&#125; 日志规范配置 123456789101112131415161718&lt;dependency&gt; &lt;groupId&gt;org.slf4j&lt;/groupId&gt; &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt; &lt;version&gt;1.7.25&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;ch.qos.logback&lt;/groupId&gt; &lt;artifactId&gt;logback-core&lt;/artifactId&gt; &lt;version&gt;1.1.3&lt;/version&gt; &lt;scope&gt;runtime&lt;/scope&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;ch.qos.logback&lt;/groupId&gt; &lt;artifactId&gt;logback-classic&lt;/artifactId&gt; &lt;version&gt;1.1.3&lt;/version&gt; &lt;scope&gt;runtime&lt;/scope&gt;&lt;/dependency&gt; 实例 123456789101112public class LogTest &#123; private static final Logger logger = LoggerFactory.getLogger(LogTest.class); public static void main(String[] args) &#123; logger.trace(&quot;log in trace level,args:&#123;&#125;&quot;,args); logger.debug(&quot;log in trace level,args:&#123;&#125;&quot;,args); logger.info(&quot;log in trace level,args:&#123;&#125;&quot;,args); logger.warn(&quot;log in trace level,args:&#123;&#125;&quot;,args); logger.error(&quot;log in trace level,args:&#123;&#125;&quot;,args); &#125;&#125; 查看日志 登录跳板机 在跳板机登录服务器 进入应用目录，一般为&#x2F;home&#x2F;q&#x2F;www&#x2F;&lt;应用名&gt;&#x2F; 该目录下有logs目录，其中存放了Tomcat日志，catalina.out记录了打印到控制台的日志，一般来说，查看改日志即可。 日志规范 禁止使用System.out.print() 在异常处理中打印关键信息 入参 关键变量值 注意数据保密 与用户相关的信息保密 打码到日志 不能影响正常业务 打印日志不能抛出异常，不能影响正常业务 日志影响性能，高QPS业务，控制日志输出量。 使用占位符代替字符串拼接 123456789public class LogTest &#123; private static final Logger logger = LoggerFactory.getLogger(LogTest.class); public static void main(String[] args) &#123; String s = &quot;111&quot;; logger.info(&quot;log in trace level,args: &#123;&#125;&quot;,args); logger.info(&quot;log in trace level,args: &#123;&#125; , &#123;&#125;&quot;,s,s.length()); &#125;&#125; 代码规范 代码给以后的自己看 强迫症 书《编写可读代码的艺术》 类名：形容词或动词 方法名：动词 注释 使用Javadoc格式编写注释 接口必须有注释，对参数，返回值有说明。例如参数限制，返回值是否为空，接口调用频率。","categories":[{"name":"java","slug":"java","permalink":"http://duanyushuai.github.io/categories/java/"}],"tags":[{"name":"java","slug":"java","permalink":"http://duanyushuai.github.io/tags/java/"}]},{"title":"线程创建4个方法","slug":"线程创建4个方法","date":"2021-04-07T03:00:23.000Z","updated":"2022-06-13T15:00:03.170Z","comments":true,"path":"2021/04/07/线程创建4个方法/","link":"","permalink":"http://duanyushuai.github.io/2021/04/07/%E7%BA%BF%E7%A8%8B%E5%88%9B%E5%BB%BA4%E4%B8%AA%E6%96%B9%E6%B3%95/","excerpt":"","text":"线程创建4个方法创建线程4个方法 继承Thread类创建线程 1234567public class MyThread extends Thread&#123;//继承Thread类 public void run()&#123; //重写run方法 &#125;&#125;new MyThread().start();//创建并启动线程 实现Runnable接口创建线程 12345678910111213141516public class MyThread2 implements Runnable &#123;//实现Runnable接口 public void run()&#123; //重写run方法 &#125;&#125;public class Main &#123; public static void main(String[] args)&#123; //创建并启动线程 MyThread2 myThread=new MyThread2(); Thread thread=new Thread(myThread); thread().start(); //或者 new Thread(new MyThread2()).start(); &#125;&#125; 使用Callable和Future创建线程 123456789101112131415public static void main(String[] args) &#123; // 先使用Lambda表达式创建Callable&lt;Integer&gt;对象 // 使用FutureTask来包装Callable对象 FutureTask&lt;Integer&gt; task = new FutureTask&lt;&gt;((Callable&lt;Integer&gt;)() -&gt; 5); new Thread(task).start(); try &#123; System.out.println(&quot;子线程的返回值：&quot; + task.get()); &#125; catch (Exception ex) &#123; ex.printStackTrace(); &#125; &#125; 使用线程池例如用Executor框架","categories":[{"name":"java","slug":"java","permalink":"http://duanyushuai.github.io/categories/java/"}],"tags":[{"name":"java","slug":"java","permalink":"http://duanyushuai.github.io/tags/java/"}]},{"title":"CompletableFuture","slug":"CompletableFuture","date":"2021-04-05T03:00:23.000Z","updated":"2022-06-13T03:02:59.980Z","comments":true,"path":"2021/04/05/CompletableFuture/","link":"","permalink":"http://duanyushuai.github.io/2021/04/05/CompletableFuture/","excerpt":"","text":"CompletableFuture实例化12345public static &lt;U&gt; CompletableFuture&lt;U&gt; supplyAsync(Supplier&lt;U&gt; supplier);public static &lt;U&gt; CompletableFuture&lt;U&gt; supplyAsync(Supplier&lt;U&gt; supplier, Executor executor);public static CompletableFuture&lt;Void&gt; runAsync(Runnable runnable);public static CompletableFuture&lt;Void&gt; runAsync(Runnable runnable, Executor executor); supply:有返回结果 run：无返回结果 获取结果1234public T get()public T get(long timeout, TimeUnit unit)public T getNow(T valueIfAbsent)public T join() 计算完成后续操作1——complete1234public CompletableFuture&lt;T&gt; whenComplete(BiConsumer&lt;? super T,? super Throwable&gt; action)public CompletableFuture&lt;T&gt; whenCompleteAsync(BiConsumer&lt;? super T,? super Throwable&gt; action)public CompletableFuture&lt;T&gt; whenCompleteAsync(BiConsumer&lt;? super T,? super Throwable&gt; action, Executor executor)public CompletableFuture&lt;T&gt; exceptionally(Function&lt;Throwable,? extends T&gt; fn) 方法1和2的区别在于是否使用异步处理，2和3的区别在于是否使用自定义的线程池，前三个方法都会提供一个返回结果和可抛出异常，我们可以使用lambda表达式的来接收这两个参数，然后自己处理。 方法4，接收一个可抛出的异常，且必须return一个返回值，类型与钻石表达式种的类型一样，详见下文的exceptionally() 例子1234567CompletableFuture&lt;Integer&gt; future = CompletableFuture.supplyAsync(() -&gt; &#123; return 10086; &#125;); future.whenComplete((result, error) -&gt; &#123; System.out.println(&quot;拨打&quot;+result); error.printStackTrace(); &#125;); whenCompleteAsync 与 whenComplete 区别 12345678910111213141516171819202122232425262728293031323334353637383940public static void main(String[] args) throws Exception &#123; CompletableFuture&lt;Integer&gt; f = new CompletableFuture&lt;Integer&gt;(); new Thread(() -&gt; &#123; // 子线程A启动 logger.info(&quot;子线程A启动&quot;); try &#123; logger.info(&quot;子线程A沉睡5s&quot;); Thread.sleep(5000l); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; logger.info(&quot;子线程A令future完成&quot;); f.complete(100); // 当子线程A执行到f.complete的时候，会去看是否有注册好的f的then或者when（非async的），如果有的话，会顺次去执行。 logger.info(&quot;子线程A结束&quot;); &#125;).start();; // 当前线程（主线程）执行到这里的时候，如果子线程还没有执行到f.complete(100)， // 那么当前线程会把whenComplete事件注册起来，并且说好哪个线程执行了f.complete(100)， // 哪个线程就负责执行whenComplete的内容。 // 如果当前线程（主线程）执行到这里的时候，f.complete(100)已经被其他线程执行完毕了。 // 那么只有当前线程自己来执行whenComplete里面的内容了。 f.whenCompleteAsync((i, ex) -&gt; &#123; // 这个场景下，whenComplete的回调的执行线程会是子线程A logger.info(&quot;do something after complete begin&quot;); try &#123; logger.info(&quot;沉睡10s&quot;); Thread.sleep(10000l); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; logger.info(&quot;do something after complete end&quot;); &#125;); logger.info(&quot;main over&quot;); System.in.read();&#125; 计算完成后续操作2——handle123public &lt;U&gt; CompletableFuture&lt;U&gt; handle(BiFunction&lt;? super T,Throwable,? extends U&gt; fn)public &lt;U&gt; CompletableFuture&lt;U&gt; handleAsync(BiFunction&lt;? super T,Throwable,? extends U&gt; fn)public &lt;U&gt; CompletableFuture&lt;U&gt; handleAsync(BiFunction&lt;? super T,Throwable,? extends U&gt; fn, Executor executor) 方法返回类型可以自定义","categories":[{"name":"java","slug":"java","permalink":"http://duanyushuai.github.io/categories/java/"}],"tags":[{"name":"java","slug":"java","permalink":"http://duanyushuai.github.io/tags/java/"},{"name":"CompletableFuture","slug":"CompletableFuture","permalink":"http://duanyushuai.github.io/tags/CompletableFuture/"}]},{"title":"Jvisualvm","slug":"Jvisualvm","date":"2021-03-10T02:00:00.000Z","updated":"2022-07-24T13:18:06.389Z","comments":true,"path":"2021/03/10/Jvisualvm/","link":"","permalink":"http://duanyushuai.github.io/2021/03/10/Jvisualvm/","excerpt":"","text":"Jvisualvm下载https://visualvm.github.io/download.html 打开扩大字体打开bin 1visualvm.exe --fontsize 20 下载 visual GC 在GC开始的时候，对象只会存在于Eden区和名为“From”的Survivor区，Survivor区“To”是空的。紧接着进行GC，Eden区中所有存活的对象都会被复制到“To”，而在“From”区中，仍存活的对象会根据他们的年龄值来决定去向。年龄达到一定值(年龄阈值，可以通过-XX:MaxTenuringThreshold来设置)的对象会被移动到年老代中，没有达到阈值的对象会被复制到“To”区域。经过这次GC后，Eden区和From区已经被清空。这个时候，“From”和“To”会交换他们的角色，也就是新的“To”就是上次GC前的“From”，新的“From”就是上次GC前的“To”。不管怎样，都会保证名为To的Survivor区域是空的。Minor GC会一直重复这样的过程，直到“To”区被填满，“To”区被填满之后，会将所有对象移动到年老代中。","categories":[{"name":"java","slug":"java","permalink":"http://duanyushuai.github.io/categories/java/"},{"name":"Jvisualvm","slug":"java/Jvisualvm","permalink":"http://duanyushuai.github.io/categories/java/Jvisualvm/"}],"tags":[{"name":"java","slug":"java","permalink":"http://duanyushuai.github.io/tags/java/"}]},{"title":"maven","slug":"maven_20220711_172008","date":"2021-03-09T02:00:00.000Z","updated":"2022-07-24T13:18:04.266Z","comments":true,"path":"2021/03/09/maven_20220711_172008/","link":"","permalink":"http://duanyushuai.github.io/2021/03/09/maven_20220711_172008/","excerpt":"","text":"mavenmaven 私服配置setting配置 项目 pom.xml配置maven私服访问地址因为maven默认会有一个下载地址，我们要重写下载地址，改写成自己的私服地址 如果需要打包到私服，需要配置打包私服相关参数 reository和mirror加载顺序1、在mirrorOf与repositoryId相同的时候优先是使用mirror的地址 2、mirrorOf等于*的时候覆盖所有repository配置 3、存在多个mirror配置的时候mirrorOf等于*放到最后 4、只配置mirrorOf为central的时候可以不用配置repository","categories":[{"name":"maven","slug":"maven","permalink":"http://duanyushuai.github.io/categories/maven/"}],"tags":[{"name":"maven","slug":"maven","permalink":"http://duanyushuai.github.io/tags/maven/"}]},{"title":"mysql中join的使用","slug":"mysql中join的使用","date":"2021-01-03T02:00:00.000Z","updated":"2022-06-26T10:39:21.188Z","comments":true,"path":"2021/01/03/mysql中join的使用/","link":"","permalink":"http://duanyushuai.github.io/2021/01/03/mysql%E4%B8%ADjoin%E7%9A%84%E4%BD%BF%E7%94%A8/","excerpt":"","text":"mysql 中join的使用","categories":[],"tags":[]},{"title":"基于胶囊网络的肽段预测","slug":"基于胶囊网络的肽段预测","date":"2020-09-10T02:00:21.000Z","updated":"2022-06-13T15:28:01.541Z","comments":true,"path":"2020/09/10/基于胶囊网络的肽段预测/","link":"","permalink":"http://duanyushuai.github.io/2020/09/10/%E5%9F%BA%E4%BA%8E%E8%83%B6%E5%9B%8A%E7%BD%91%E7%BB%9C%E7%9A%84%E8%82%BD%E6%AE%B5%E9%A2%84%E6%B5%8B/","excerpt":"","text":"Prediction of Peptide Detectability Based on CapsNet and Convolutional Block Attention Modulehttps://www.mdpi.com/1422-0067/22/21/12080","categories":[{"name":"深度学习","slug":"深度学习","permalink":"http://duanyushuai.github.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"算法","slug":"算法","permalink":"http://duanyushuai.github.io/tags/%E7%AE%97%E6%B3%95/"},{"name":"python","slug":"python","permalink":"http://duanyushuai.github.io/tags/python/"},{"name":"深度学习","slug":"深度学习","permalink":"http://duanyushuai.github.io/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"}]}],"categories":[{"name":"java web","slug":"java-web","permalink":"http://duanyushuai.github.io/categories/java-web/"},{"name":"工具","slug":"工具","permalink":"http://duanyushuai.github.io/categories/%E5%B7%A5%E5%85%B7/"},{"name":"Guava","slug":"Guava","permalink":"http://duanyushuai.github.io/categories/Guava/"},{"name":"redis","slug":"Guava/redis","permalink":"http://duanyushuai.github.io/categories/Guava/redis/"},{"name":"docker","slug":"docker","permalink":"http://duanyushuai.github.io/categories/docker/"},{"name":"谷粒商城","slug":"docker/谷粒商城","permalink":"http://duanyushuai.github.io/categories/docker/%E8%B0%B7%E7%B2%92%E5%95%86%E5%9F%8E/"},{"name":"rabbitMQ","slug":"rabbitMQ","permalink":"http://duanyushuai.github.io/categories/rabbitMQ/"},{"name":"java","slug":"java","permalink":"http://duanyushuai.github.io/categories/java/"},{"name":"Jvisualvm","slug":"java/Jvisualvm","permalink":"http://duanyushuai.github.io/categories/java/Jvisualvm/"},{"name":"maven","slug":"maven","permalink":"http://duanyushuai.github.io/categories/maven/"},{"name":"深度学习","slug":"深度学习","permalink":"http://duanyushuai.github.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"java web","slug":"java-web","permalink":"http://duanyushuai.github.io/tags/java-web/"},{"name":"工具","slug":"工具","permalink":"http://duanyushuai.github.io/tags/%E5%B7%A5%E5%85%B7/"},{"name":"Guava","slug":"Guava","permalink":"http://duanyushuai.github.io/tags/Guava/"},{"name":"redis","slug":"redis","permalink":"http://duanyushuai.github.io/tags/redis/"},{"name":"docker","slug":"docker","permalink":"http://duanyushuai.github.io/tags/docker/"},{"name":"rabbitMQ","slug":"rabbitMQ","permalink":"http://duanyushuai.github.io/tags/rabbitMQ/"},{"name":"java","slug":"java","permalink":"http://duanyushuai.github.io/tags/java/"},{"name":"HashMap","slug":"HashMap","permalink":"http://duanyushuai.github.io/tags/HashMap/"},{"name":"CompletableFuture","slug":"CompletableFuture","permalink":"http://duanyushuai.github.io/tags/CompletableFuture/"},{"name":"maven","slug":"maven","permalink":"http://duanyushuai.github.io/tags/maven/"},{"name":"算法","slug":"算法","permalink":"http://duanyushuai.github.io/tags/%E7%AE%97%E6%B3%95/"},{"name":"python","slug":"python","permalink":"http://duanyushuai.github.io/tags/python/"},{"name":"深度学习","slug":"深度学习","permalink":"http://duanyushuai.github.io/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"}]}