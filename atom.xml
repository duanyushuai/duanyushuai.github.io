<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Duan</title>
  
  <subtitle>有点小菜</subtitle>
  <link href="http://duanyushuai.github.io/atom.xml" rel="self"/>
  
  <link href="http://duanyushuai.github.io/"/>
  <updated>2023-03-30T01:14:58.988Z</updated>
  <id>http://duanyushuai.github.io/</id>
  
  <author>
    <name>小段</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>msyql索引</title>
    <link href="http://duanyushuai.github.io/2023/03/29/mysql%E7%B4%A2%E5%BC%95/"/>
    <id>http://duanyushuai.github.io/2023/03/29/mysql%E7%B4%A2%E5%BC%95/</id>
    <published>2023-03-29T02:00:00.000Z</published>
    <updated>2023-03-30T01:14:58.988Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mysql-索引"><a href="#mysql-索引" class="headerlink" title="mysql 索引"></a>mysql 索引</h1><p>Study from <a href="https://juejin.cn/post/7147609139974242317#heading-13">https://juejin.cn/post/7147609139974242317#heading-13</a></p><h3 id="按功能逻辑层次划分"><a href="#按功能逻辑层次划分" class="headerlink" title="按功能逻辑层次划分"></a>按功能逻辑层次划分</h3><ul><li>普通索引、唯一索引、主键索引、全文索引、空间索引</li></ul><h3 id="索引创建方式"><a href="#索引创建方式" class="headerlink" title="索引创建方式"></a>索引创建方式</h3><h4 id="唯一索引创建"><a href="#唯一索引创建" class="headerlink" title="唯一索引创建"></a>唯一索引创建</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">-- 方式①</span><br><span class="line">CREATE UNIQUE INDEX indexName ON tableName (columnName(length));</span><br><span class="line"></span><br><span class="line">-- 方式②</span><br><span class="line">ALTER TABLE tableName ADD UNIQUE INDEX indexName(columnName);</span><br><span class="line"></span><br><span class="line">-- 方式③</span><br><span class="line">CREATE TABLE tableName(  </span><br><span class="line">  columnName1 INT(8) NOT NULL,   </span><br><span class="line">  columnName2 ....,</span><br><span class="line">  .....,</span><br><span class="line">  UNIQUE INDEX [indexName] (columnName(length))  </span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="主键索引创建"><a href="#主键索引创建" class="headerlink" title="主键索引创建"></a>主键索引创建</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-- 方式①</span><br><span class="line">ALTER TABLE tableName ADD PRIMARY KEY indexName(columnName);</span><br><span class="line"></span><br><span class="line">-- 方式②</span><br><span class="line">CREATE TABLE tableName(  </span><br><span class="line">  columnName1 INT(8) NOT NULL,   </span><br><span class="line">  columnName2 ....,</span><br><span class="line">  .....,</span><br><span class="line">  PRIMARY KEY [indexName] (columnName(length))  </span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="全文索引创建"><a href="#全文索引创建" class="headerlink" title="全文索引创建"></a>全文索引创建</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-- 方式①</span><br><span class="line">ALTER TABLE tableName ADD FULLTEXT INDEX indexName(columnName);</span><br><span class="line"></span><br><span class="line">-- 方式②</span><br><span class="line">CREATE FULLTEXT INDEX indexName ON tableName(columnName);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>不过在创建全文索引时，有三个注意点：</p><ul><li><code>5.6</code>版本的<code>MySQL</code>中，存储引擎必须为<code>MyISAM</code>才能创建。</li><li>创建全文索引的字段，其类型必须要为<code>CHAR、VARCHAR、TEXT</code>等文本类型。</li><li>如果想要创建出的全文索引支持中文，需要在最后指定解析器：<code>with parser ngram</code>。</li></ul><p>此时还依旧是以文章表为例，为文章名称字段创建一个全文索引，命令如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE </span><br><span class="line">    zz_article ADD </span><br><span class="line">FULLTEXT INDEX </span><br><span class="line">    ft_article_name(article_name) </span><br><span class="line">WITH PARSER NGRAM;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">+------------+--------------------------+-------------------+</span><br><span class="line">| article_id | article_name             | special_column    |</span><br><span class="line">+------------+--------------------------+-------------------+</span><br><span class="line">|          1 | MySQL架构篇：.......     | 《全解MySQL》     |</span><br><span class="line">|          2 | MySQL执行篇：.......     | 《全解MySQL》     |</span><br><span class="line">|          3 | MySQL设计篇：.......     | 《全解MySQL》     |</span><br><span class="line">|          4 | MySQL索引篇：.......     | 《全解MySQL》     |</span><br><span class="line">+------------+--------------------------+-------------------+</span><br><span class="line"></span><br><span class="line">SELECT </span><br><span class="line">    COUNT(article_id) AS &#x27;搜索结果数量&#x27; </span><br><span class="line">FROM </span><br><span class="line">    `zz_article` </span><br><span class="line">WHERE </span><br><span class="line">    MATCH(article_name) AGAINST(&#x27;MySQL&#x27;);</span><br><span class="line"></span><br><span class="line">-- 运行结果如下：</span><br><span class="line">+--------------+</span><br><span class="line">| 搜索结果数量 |</span><br><span class="line">+--------------+</span><br><span class="line">|           4 |</span><br><span class="line">+--------------+</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="联合索引"><a href="#联合索引" class="headerlink" title="联合索引"></a>联合索引</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">CREATE INDEX indexName ON tableName (column1(length),column2...);</span><br><span class="line">ALTER TABLE tableName ADD INDEX indexName(column1(length),column2...);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="使用索引正确姿势"><a href="#使用索引正确姿势" class="headerlink" title="使用索引正确姿势"></a>使用索引正确姿势</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">1、查询`SQL`中尽量不要使用`OR`关键字，可以使用多`SQL`或子查询代替。</span><br><span class="line"></span><br><span class="line">2、模糊查询尽量不要以`%`开头，如果实在要实现这个功能可以建立全文索引。</span><br><span class="line"></span><br><span class="line">3、编写`SQL`时一定要注意字段的数据类型，否则`MySQL`的隐式转换会导致索引失效。</span><br><span class="line"></span><br><span class="line">4、一定不要在编写`SQL`时让索引字段执行计算工作，尽量将计算工作放在客户端中完成。</span><br><span class="line"></span><br><span class="line">5、对于索引字段尽量不要使用计算类函数，一定要使用时请记得将函数计算放在`=`后面。</span><br><span class="line"></span><br><span class="line">6、多条件的查询`SQL`一定要使用联合索引中的第一个字段，否则会打破最左匹配原则。</span><br><span class="line"></span><br><span class="line">7、对于需要对比多个字段的查询业务时，可以拆分为连表查询，使用临时表代替。</span><br><span class="line"></span><br><span class="line">8、在`SQL`中不要使用反范围性的查询条件，大部分反范围性、不等性查询都会让索引失效。</span><br></pre></td></tr></table></figure><h4 id="1-索引覆盖"><a href="#1-索引覆盖" class="headerlink" title="1.索引覆盖"></a>1.索引覆盖</h4><h4 id="2-索引下推"><a href="#2-索引下推" class="headerlink" title="2.索引下推"></a>2.索引下推</h4><h4 id="3-MRR机制"><a href="#3-MRR机制" class="headerlink" title="3.MRR机制"></a>3.MRR机制</h4><p>而<code>MRR</code>机制就主要是解决这个问题的，针对于辅助索引的回表查询，减少离散<code>IO</code>，并且将随机<code>IO</code>转换为顺序<code>IO</code>，从而提高查询效率。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SET @@optimizer_switch=&#x27;mrr=on|off,mrr_cost_based=on|off&#x27;;</span><br></pre></td></tr></table></figure><h3 id="索引过程"><a href="#索引过程" class="headerlink" title="索引过程"></a>索引过程</h3><h4 id="局部性原理"><a href="#局部性原理" class="headerlink" title="局部性原理"></a>局部性原理</h4><p>​       局部性原理的思想比较简单，比如目前有三块内存页<code>x、y、z</code>是相连的，<code>CPU</code>此刻在操作<code>x</code>页中的数据，那按照计算机的特性，一般同一个数据都会放入到物理相连的内存地址上存储，也就是当前在操作<code>x</code>页的数据，那么对于<code>y，z</code>这两页内存的数据也很有可能在接下来的时间内被操作，因此对于<code>y，z</code>这两页数据则会提前将其载入到高速缓冲区（<code>L1/L2/L3</code>），这个过程叫做利用局部性原理“预读”数据</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;mysql-索引&quot;&gt;&lt;a href=&quot;#mysql-索引&quot; class=&quot;headerlink&quot; title=&quot;mysql 索引&quot;&gt;&lt;/a&gt;mysql 索引&lt;/h1&gt;&lt;p&gt;Study from &lt;a href=&quot;https://juejin.cn/post/714</summary>
      
    
    
    
    <category term="索引" scheme="http://duanyushuai.github.io/categories/%E7%B4%A2%E5%BC%95/"/>
    
    
    <category term="索引" scheme="http://duanyushuai.github.io/tags/%E7%B4%A2%E5%BC%95/"/>
    
  </entry>
  
  <entry>
    <title>java各种变量</title>
    <link href="http://duanyushuai.github.io/2023/03/02/java%E5%90%84%E7%A7%8D%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/"/>
    <id>http://duanyushuai.github.io/2023/03/02/java%E5%90%84%E7%A7%8D%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/</id>
    <published>2023-03-02T02:00:00.000Z</published>
    <updated>2023-03-03T01:17:19.387Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java各种变量"><a href="#java各种变量" class="headerlink" title="java各种变量"></a>java各种变量</h1><h3 id="java-jar-配置参数写法说明"><a href="#java-jar-配置参数写法说明" class="headerlink" title="java -jar 配置参数写法说明"></a>java -jar 配置参数写法说明</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">java -Dxxx=test  -jar xxx.jar  （放在-jar之前）</span><br><span class="line">取值： System.getProperty(&quot;xxx&quot;)</span><br><span class="line">      spring的@value(&quot;$&#123;xxx&#125;&quot;)</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">java -jar xxx.jar value1=1 value2=2  （放在启动jar包之后）</span><br><span class="line">参数就是jar包里主启动类中main方法的args参数，按顺序来</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SpringBoot项目写法 </span><br><span class="line">java -jar xxx.jar --xxx=test（放在启动jar包之后）</span><br><span class="line">取值：spring的@value(&quot;$&#123;xxx&#125;&quot;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;java各种变量&quot;&gt;&lt;a href=&quot;#java各种变量&quot; class=&quot;headerlink&quot; title=&quot;java各种变量&quot;&gt;&lt;/a&gt;java各种变量&lt;/h1&gt;&lt;h3 id=&quot;java-jar-配置参数写法说明&quot;&gt;&lt;a href=&quot;#java-jar-配置参</summary>
      
    
    
    
    <category term="java各种变量" scheme="http://duanyushuai.github.io/categories/java%E5%90%84%E7%A7%8D%E5%8F%98%E9%87%8F/"/>
    
    
    <category term="java各种变量" scheme="http://duanyushuai.github.io/tags/java%E5%90%84%E7%A7%8D%E5%8F%98%E9%87%8F/"/>
    
  </entry>
  
  <entry>
    <title>dockerfile 编写</title>
    <link href="http://duanyushuai.github.io/2023/03/01/dockerfile%E7%BC%96%E5%86%99/"/>
    <id>http://duanyushuai.github.io/2023/03/01/dockerfile%E7%BC%96%E5%86%99/</id>
    <published>2023-03-01T03:00:23.000Z</published>
    <updated>2023-03-03T07:14:45.118Z</updated>
    
    <content type="html"><![CDATA[<h1 id="dockerfile-编写"><a href="#dockerfile-编写" class="headerlink" title="dockerfile 编写"></a>dockerfile 编写</h1><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> alpine</span><br><span class="line"><span class="keyword">LABEL</span><span class="language-bash"> maintainer=<span class="string">&#x27;duanyushuai&#x27;</span> \</span></span><br><span class="line"><span class="language-bash">adv=dev\</span></span><br><span class="line"><span class="language-bash">aab=fff</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#运行的命令，安装了软件，修改了文件，默认用id=0 也就是root</span></span><br><span class="line"><span class="comment">#镜像构建运行的命令</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">echo</span> 111</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> ping baidu.com </span></span><br></pre></td></tr></table></figure><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="language-bash"> 命令</span></span><br><span class="line"><span class="comment"># shell 形式 bash -c &quot;echo 111&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">echo</span> 1111</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> [<span class="string">&quot;echo&quot;</span>,<span class="string">&quot;2222&quot;</span>]</span></span><br></pre></td></tr></table></figure><h3 id="ARG-和-ENV"><a href="#ARG-和-ENV" class="headerlink" title="ARG 和 ENV"></a>ARG 和 ENV</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定构建参数有效</span></span><br><span class="line"><span class="keyword">ARG</span> aaa =aaa</span><br><span class="line"><span class="comment"># 指定环境变量[为RUN以及CMD指定环境变量的]</span></span><br><span class="line"><span class="keyword">ENV</span> parm=<span class="number">1111</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">echo</span> <span class="variable">$parm</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> [<span class="string">&quot;echo&quot;</span>,<span class="string">&quot;<span class="variable">$parm</span>&quot;</span>]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> <span class="built_in">sleep</span> 10; <span class="built_in">echo</span> <span class="variable">$parm</span></span></span><br></pre></td></tr></table></figure><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ARG</span> version=<span class="number">1.3</span>.<span class="number">0</span></span><br><span class="line"><span class="keyword">FROM</span> alpine:$version</span><br><span class="line"></span><br><span class="line"><span class="comment">#可以用命令替换参数</span></span><br><span class="line">docker build --no-cache  --build-<span class="keyword">arg</span> version=<span class="string">&quot;1.55.4&quot;</span>  -t  [镜像名]：[镜像版本]  -f dockerfile .</span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> app=duan</span><br><span class="line"></span><br><span class="line"><span class="comment">#构建期和运行期都可以生效，但只能在运行期修改</span></span><br><span class="line"></span><br><span class="line">docker <span class="keyword">run</span><span class="language-bash"> -e app=haha </span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"><span class="keyword">ENV</span> 的坑</span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> msg1=hello</span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> msg2=$&#123;msg1&#125;</span><br><span class="line"></span><br><span class="line">echo $&#123;msg1&#125;</span><br><span class="line">echo $&#123;msg2&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;/bin/sh&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;echo <span class="variable">$&#123;msg1&#125;</span>;echo <span class="variable">$&#123;msg2&#125;</span>&quot;</span>]</span></span><br><span class="line"></span><br><span class="line">docker <span class="keyword">run</span><span class="language-bash"> -it e msg1=666 </span></span><br><span class="line"><span class="comment">#输出的是666 hello </span></span><br><span class="line"><span class="comment">#原因是docker build 的时候，env的指已经写好了 msg1=hello。msg2 = hello</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="ADD-和COPY"><a href="#ADD-和COPY" class="headerlink" title="ADD 和COPY"></a>ADD 和COPY</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 把上下文的内容复制到镜像中，如果是压缩包自动解压，如果是远程自动下载</span></span><br><span class="line"><span class="comment">#自动下载</span></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> https://download.redis.io/releases/redis-6.2.1.tar.gz  /dest/    <span class="comment">#不加最后斜杠变为dest文件</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">#RUN指令并没有上下文关系 不能RUN cd /dest RUN ls -l</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">cd</span> /dest &amp;&amp; <span class="built_in">ls</span> -l</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#宿主机到镜像 自动解压 </span></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> *.tar.gz  /app/ </span></span><br><span class="line"></span><br><span class="line">不自动解压</span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash">  </span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="WORKDIR-和VOLUME"><a href="#WORKDIR-和VOLUME" class="headerlink" title="WORKDIR 和VOLUME"></a>WORKDIR 和VOLUME</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment"># 为一下所有的命令运行指定了基础目录</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"> </span><br><span class="line"> <span class="keyword">WORKDIR</span><span class="language-bash"> abc 可以嵌套</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment"># pwd &amp;&amp; ls -l</span></span><br><span class="line"> <span class="keyword">RUN</span><span class="language-bash">  <span class="built_in">pwd</span> &amp;&amp; <span class="built_in">ls</span> -l</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">#-----------------------------</span></span><br><span class="line"> <span class="comment">#挂载容器内文件 ，没有就创建</span></span><br><span class="line"> <span class="comment">#指定了VOLUME，即使启动容器没有指定 -v 参数，我们也会自动进行匿名卷挂载</span></span><br><span class="line"> VOLUM [<span class="string">&quot;/hello&quot;</span>,<span class="string">&quot;/app&quot;</span>]</span><br><span class="line"> </span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">mkdir</span> /hello &amp;&amp; <span class="built_in">mkdir</span> /app</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">echo</span> 111 &gt; /hello/a.txt</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">echo</span> 222 &gt; /app/b.txt</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#挂载之后</span></span><br><span class="line"><span class="comment"># 1）但是docker commit 提交当前容器的所有变化为镜像的时候，就会丢弃</span></span><br><span class="line"><span class="comment"># 2）VOLUME [&quot;/hello&quot;,&quot;/app&quot;] 容器以后自动挂载，在dockerfile中对VOLUME的所有修改都不生效</span></span><br><span class="line"><span class="comment"># 3）建议VOLUME 写在最后面</span></span><br><span class="line">VOUME [<span class="string">&quot;/hello&quot;</span>,<span class="string">&quot;/app&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这两句话没有生效</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">echo</span> 4444 &gt;&gt; /hello/a.txt</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">echo</span> 4444 &gt;&gt; /app/b.txt</span></span><br><span class="line"> </span><br></pre></td></tr></table></figure><h3 id="EXPOSE"><a href="#EXPOSE" class="headerlink" title="EXPOSE"></a>EXPOSE</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#暴露，只是一个声明，给程序员看的</span></span><br><span class="line"><span class="comment"># 给docker 看的 -d -P（随机分配端口）</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8080</span></span><br></pre></td></tr></table></figure><h3 id="CMD-和-ENTRYPOINT"><a href="#CMD-和-ENTRYPOINT" class="headerlink" title="CMD 和 ENTRYPOINT"></a>CMD 和 ENTRYPOINT</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 统一是容器启动命令</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#官方推荐写法，变化的写CMD，而CMD提供的参数给ENTRPOINT使用的</span></span><br><span class="line"><span class="comment"># docker run imageName cmd1 一旦传递了cmd1，CMD指定的所有参数都会被覆盖。</span></span><br><span class="line"><span class="comment">#自定义参数一定要写全</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;5&quot;</span>,<span class="string">&quot;baidu.com&quot;</span>]</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;ping&quot;</span>,<span class="string">&quot;-c&quot;</span>]</span></span><br></pre></td></tr></table></figure><h3 id="多阶段构建"><a href="#多阶段构建" class="headerlink" title="多阶段构建"></a>多阶段构建</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> maven:<span class="number">3.5</span>.<span class="number">0</span>-jdk-<span class="number">8</span>-alpine AS builder</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"><span class="keyword">add</span><span class="language-bash"> ./ /app</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> mvn clean package -Dmaven.test.skip=<span class="literal">true</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二阶段，最小运行环境只需要jre</span></span><br><span class="line"><span class="keyword">FROM</span> openjdk:<span class="number">8</span>-jre-alpine</span><br><span class="line"><span class="comment"># 修改时区 </span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">ln</span> -sf /usr/share/zoneinfo/Asia/Shanghai  /etc/localtime &amp;&amp; <span class="built_in">echo</span> <span class="string">&#x27;Asia/Shanghai&#x27;</span> &gt;/etc/timezone</span></span><br><span class="line"><span class="keyword">LABEL</span><span class="language-bash"> maintainer = <span class="string">&quot;duanyushuai&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">#从上一个阶段复制内容</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --frombuilder /app/target/*.jar /app/jar</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#docker run -e JAVA_OPTS=&quot;-Xmx512m -Xms33 &quot; -e PARAM=&quot;--spring.profiles=dev&quot; -jar app.jar</span></span><br><span class="line"><span class="keyword">ENV</span> JAVA_OPTS=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> PARAMS=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;sh&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;java -Djava.security.egd=file:/dev/./urandom <span class="variable">$JAVA_OPTS</span> -jar /app.jar <span class="variable">$PARAMS</span>&quot;</span>]</span></span><br></pre></td></tr></table></figure><h3 id="springboot-dockerfile常用写法"><a href="#springboot-dockerfile常用写法" class="headerlink" title="springboot dockerfile常用写法"></a>springboot dockerfile常用写法</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> openjdk:<span class="number">8</span>-jre-aalpine</span><br><span class="line"><span class="keyword">LABEL</span><span class="language-bash"> maintainer=<span class="string">&quot;duanyushuai&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> target/*.jar  /app.jar</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">ln</span> -sf /usr/share/zoneinfo/Asia/Shanghai  /etc/localtime &amp;&amp; <span class="built_in">echo</span> <span class="string">&#x27;Asia/Shanghai&#x27;</span> &gt;/etc/timezone &amp;&amp; <span class="built_in">touch</span> /app.jar</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> JAVA_OPTS=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> PARAMS=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;sh&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;java -Djava.security.egd=file:/dev/./urandom <span class="variable">$JAVA_OPTS</span> -jar /app.jar <span class="variable">$PARAMS</span>&quot;</span>]</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;dockerfile-编写&quot;&gt;&lt;a href=&quot;#dockerfile-编写&quot; class=&quot;headerlink&quot; title=&quot;dockerfile 编写&quot;&gt;&lt;/a&gt;dockerfile 编写&lt;/h1&gt;&lt;figure class=&quot;highlight dock</summary>
      
    
    
    
    <category term="docker" scheme="http://duanyushuai.github.io/categories/docker/"/>
    
    
    <category term="docker" scheme="http://duanyushuai.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>msyql性能优化</title>
    <link href="http://duanyushuai.github.io/2023/03/01/mysql%E4%BC%98%E5%8C%96/"/>
    <id>http://duanyushuai.github.io/2023/03/01/mysql%E4%BC%98%E5%8C%96/</id>
    <published>2023-03-01T02:00:00.000Z</published>
    <updated>2023-03-31T07:35:51.971Z</updated>
    
    <content type="html"><![CDATA[<h1 id="msyql性能优化"><a href="#msyql性能优化" class="headerlink" title="msyql性能优化"></a>msyql性能优化</h1><h2 id="1-系统配置优化"><a href="#1-系统配置优化" class="headerlink" title="1.系统配置优化"></a>1.系统配置优化</h2><h4 id="1-1-内存读取数据"><a href="#1-1-内存读取数据" class="headerlink" title="1.1  内存读取数据"></a>1.1  内存读取数据</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">调大 innodb_buffer_pool_size</span><br></pre></td></tr></table></figure><h4 id="1-2-数据预热"><a href="#1-2-数据预热" class="headerlink" title="1.2 数据预热"></a>1.2 数据预热</h4><p>默认情况，仅仅有某条数据被读取一次，才会缓存在 innodb_buffer_pool。所以，数据库刚刚启动，须要进行数据预热，将磁盘上的全部数据缓存到内存中。数据预热能够提高读取速度。</p><h4 id="1-3降低磁盘写入"><a href="#1-3降低磁盘写入" class="headerlink" title="1.3降低磁盘写入"></a>1.3降低磁盘写入</h4><p>1.增大redolog，减少落盘次数</p><p>innodb_log_file_size 设置为 0.25 * innodb_buffer_pool_size</p><p>2.通用查询日志、慢查询日志可以不开 ，bin-log开</p><p>生产中不开通用查询日志，遇到性能问题开慢查询日志</p><h2 id="2-表结构优化"><a href="#2-表结构优化" class="headerlink" title="2. 表结构优化"></a>2. 表结构优化</h2><h4 id="2-1-设计中间表"><a href="#2-1-设计中间表" class="headerlink" title="2.1 设计中间表"></a>2.1 设计中间表</h4><h4 id="2-2-设计冗余字段"><a href="#2-2-设计冗余字段" class="headerlink" title="2.2 设计冗余字段"></a>2.2 设计冗余字段</h4><h4 id="2-3拆表"><a href="#2-3拆表" class="headerlink" title="2.3拆表"></a>2.3拆表</h4><p>对于表中经常不被使用的字段或者存储数据比较多的字段，考虑拆表</p><h4 id="2-5-字段的设计"><a href="#2-5-字段的设计" class="headerlink" title="2.5 字段的设计"></a><strong>2.5</strong> 字段的设计</h4><p>字段宽度尽可能小，尽量把字段设置为NOTNULL，能用数字的用数值类型</p><h2 id="3-sql语句，索引优化"><a href="#3-sql语句，索引优化" class="headerlink" title="3. sql语句，索引优化"></a>3. sql语句，索引优化</h2><h4 id="3-1-EXPLAIN-查看索引使用情况"><a href="#3-1-EXPLAIN-查看索引使用情况" class="headerlink" title="3.1 EXPLAIN 查看索引使用情况"></a>3.1 EXPLAIN 查看索引使用情况</h4><h4 id="3-2-SQL语句中-IN-包含的值不应过多"><a href="#3-2-SQL语句中-IN-包含的值不应过多" class="headerlink" title="3.2 SQL语句中 IN 包含的值不应过多"></a>3.2 SQL语句中 IN 包含的值不应过多</h4><h4 id="3-3-SELECT-语句务必指明字段名称"><a href="#3-3-SELECT-语句务必指明字段名称" class="headerlink" title="3.3 SELECT 语句务必指明字段名称"></a>3.3 SELECT 语句务必指明字段名称</h4><h4 id="3-4-当只需要一条数据的时候，使用-limit-1"><a href="#3-4-当只需要一条数据的时候，使用-limit-1" class="headerlink" title="3.4 当只需要一条数据的时候，使用  limit 1"></a><strong>3.4</strong> 当只需要一条数据的时候，使用  limit 1</h4><h4 id="3-5-排序字段加索引"><a href="#3-5-排序字段加索引" class="headerlink" title="3.5  排序字段加索引"></a>3.5  排序字段加索引</h4><h4 id="3-6-不使用ORDER-BY-RAND"><a href="#3-6-不使用ORDER-BY-RAND" class="headerlink" title="3.6 不使用ORDER BY RAND()"></a>3.6 不使用ORDER BY RAND()</h4><h4 id="3-7-如果限制条件中其他字段没有索引，尽量少用-or"><a href="#3-7-如果限制条件中其他字段没有索引，尽量少用-or" class="headerlink" title="3.7 如果限制条件中其他字段没有索引，尽量少用 or"></a>3.7 如果限制条件中其他字段没有索引，尽量少用 or</h4><h4 id="3-8-区分in-和exists、not-in和not-exists"><a href="#3-8-区分in-和exists、not-in和not-exists" class="headerlink" title="3.8 区分in 和exists、not in和not exists"></a>3.8 区分in 和exists、not in和not exists</h4><p>区分in和exists主要是造成了驱动顺序的改变（这是性能变化的关键），如果是exists，那么以外层表为</p><p>驱动表，先被访问，如果是IN，那么先执行子查询。所以IN适合于外表大而内表小的情况；EXISTS适合</p><p>于外表小而内表大的情况。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select * from tbiguser limit 9999998, 2;</span><br><span class="line">select * from tbiguser where id&gt;9999998 limit 2;</span><br></pre></td></tr></table></figure><h4 id="3-9不建议使用-前缀模糊查询"><a href="#3-9不建议使用-前缀模糊查询" class="headerlink" title="3.9不建议使用%前缀模糊查询"></a>3.9不建议使用%前缀模糊查询</h4><h4 id="3-10避免在where子句中对字段进行表达式操作"><a href="#3-10避免在where子句中对字段进行表达式操作" class="headerlink" title="3.10避免在where子句中对字段进行表达式操作"></a>3.10避免在where子句中对字段进行表达式操作</h4><h4 id="3-11避免隐式类型转换"><a href="#3-11避免隐式类型转换" class="headerlink" title="3.11避免隐式类型转换"></a>3.11避免隐式类型转换</h4><h4 id="3-12对于联合索引来说，要遵守最左前缀法则"><a href="#3-12对于联合索引来说，要遵守最左前缀法则" class="headerlink" title="3.12对于联合索引来说，要遵守最左前缀法则"></a>3.12对于联合索引来说，要遵守最左前缀法则</h4><h4 id="3-13-使用JOIN-优化，尽量选择少表作为驱动表"><a href="#3-13-使用JOIN-优化，尽量选择少表作为驱动表" class="headerlink" title="3.13 使用JOIN 优化，尽量选择少表作为驱动表"></a>3.13 使用JOIN 优化，尽量选择少表作为驱动表</h4><h2 id="4-explain使用"><a href="#4-explain使用" class="headerlink" title="4.explain使用"></a>4.explain使用</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">----+-------------+----------+------+---------------+------+---------+------+------+-------+</span><br><span class="line">| id | select_type | table    | type | possible_keys | key  | key_len | ref  | rows | Extra |</span><br><span class="line">+----+-------------+----------+------+---------------+------+---------+------+------+-------+</span><br><span class="line">|  1 | SIMPLE      | zz_users | ALL  | NULL          | NULL | NULL    | NULL |    3 |       |</span><br><span class="line">+----+-------------+----------+------+---------------+------+---------+------+------+-------+</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>id</code>：这是执行计划的<code>ID</code>值，这个值越大，表示执行的优先级越高。</p><p><code>select_type</code>：当前查询语句的类型，有如下几个值：</p><ul><li><code>simple</code>：简单查询。</li><li><code>primary</code>：复杂查询的外层查询。</li><li><code>subquery</code>：包含在查询语句中的子查询。</li><li><code>derived</code>：包含在<code>FROM</code>中的子查询。</li></ul><p><code>table</code>：表示当前这个执行计划是基于那张表执行的。</p><p><code>type</code>：当前执行计划查询的类型，有几种情况：</p><ul><li><code>all</code>：表示走了全表查询，未命中索引或索引失效。</li><li><code>system</code>：表示要查询的表中仅有一条数据。</li><li><code>const</code>：表示当前<code>SQL</code>语句的查询条件中，可以命中索引查询。</li><li><code>range</code>：表示当前查询操作是查某个区间。</li><li><code>eq_ref</code>：表示目前在做多表关联查询。</li><li><code>ref</code>：表示目前使用了普通索引查询。</li><li><code>index</code>：表示目前<code>SQL</code>使用了辅助索引查询。</li></ul><p><code>possible_keys</code>：执行<code>SQL</code>时，优化器可能会选择的索引（最后执行不一定用）。</p><p><code>key</code>：查询语句执行时，用到的索引名字。</p><p><code>key_len</code>：这里表示索引字段使用的字节数。</p><p><code>ref</code>：这里显示使用了那种查询的类型。</p><p><code>rows</code>：当前查询语句可能会扫描多少行数据才能检索出结果。</p><p><code>Extra</code>：这里是记录着额外的一些索引使用信息，有几种状态：</p><ul><li><code>using index</code>：表示目前使用了覆盖索引查询（稍后讲）。</li><li><code>using where</code>：表示使用了<code>where</code>子句查询，通常表示没使用索引。</li><li><code>using index condition</code>：表示查询条件使用到了联合索引的前面几个字段。</li><li><code>using temporary</code>：表示使用了临时表处理查询结果。</li><li><code>using filesort</code>：表示以索引字段之外的方式进行排序，效率较低。</li><li><code>select tables optimized away</code>：表示在索引字段上使用了聚合函数。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">create table tbiguser(</span><br><span class="line">  id int primary key auto_increment, </span><br><span class="line">  nickname varchar(255), </span><br><span class="line">  loginname varchar(255), </span><br><span class="line">  age int, </span><br><span class="line">  sex char(1), </span><br><span class="line">  status int, </span><br><span class="line">  address varchar(255)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create table tuser2( id int primary key auto_increment, name varchar(255), address varchar(255) );</span><br></pre></td></tr></table></figure><h5 id="1-无变化"><a href="#1-无变化" class="headerlink" title="1.无变化"></a>1.无变化</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN SELECT</span><br><span class="line">count( id ) num,</span><br><span class="line">address </span><br><span class="line">FROM</span><br><span class="line">tbiguser </span><br><span class="line">WHERE</span><br><span class="line">address IN ( SELECT DISTINCT address FROM tuser1 ) </span><br><span class="line">GROUP BY</span><br><span class="line">address </span><br><span class="line">UNION</span><br><span class="line">SELECT</span><br><span class="line">count( id ) num,</span><br><span class="line">address </span><br><span class="line">FROM</span><br><span class="line">tbiguser </span><br><span class="line">WHERE</span><br><span class="line">address IN ( SELECT DISTINCT address FROM tuser2 ) </span><br><span class="line">GROUP BY</span><br><span class="line">address</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2dongbei</span><br><span class="line">1xianggang</span><br><span class="line">1shanghai</span><br></pre></td></tr></table></figure><p><img src="/../img/mysql%E4%BC%98%E5%8C%961.jpeg"></p><h5 id="2-给address加索引"><a href="#2-给address加索引" class="headerlink" title="2. 给address加索引"></a>2. 给address加索引</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alter table tbiguser add index idx_addr(address);</span><br><span class="line">alter table tuser1 add index idx_addr(address); </span><br><span class="line">alter table tuser2 add index idx_addr(address);</span><br></pre></td></tr></table></figure><p><img src="/../img/mysql%E4%BC%98%E5%8C%962.jpeg"></p><h5 id="3-修改sql"><a href="#3-修改sql" class="headerlink" title="3. 修改sql"></a>3. 修改sql</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN SELECT</span><br><span class="line">count( id ) num,</span><br><span class="line">address </span><br><span class="line">FROM</span><br><span class="line">tbiguser </span><br><span class="line">WHERE</span><br><span class="line">address IN ( SELECT DISTINCT address FROM tuser1 ) </span><br><span class="line">OR address IN ( SELECT DISTINCT address FROM tuser2 ) </span><br><span class="line">GROUP BY</span><br><span class="line">address </span><br><span class="line">ORDER BY</span><br><span class="line">address;</span><br></pre></td></tr></table></figure><p><img src="/../img/mysql%E4%BC%98%E5%8C%963.jpeg"></p><p>4. </p><p>从前面的执行计划可以看出，索引只是使用了覆盖索引，rows&#x3D;9754360， 说明还是几乎扫描了全表的</p><p>行</p><p>利用address索引，先过滤数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select distinct b.* from tuser2 a,tbiguser b where a.address=b.address;</span><br><span class="line">select distinct b.* from tuser1 a,tbiguser b where a.address=b.address;</span><br></pre></td></tr></table></figure><p>创建视图</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">create view v_tuser as select distinct b.* from tuser1 a,tbiguser b where a.address=b.address union all select distinct b.* from tuser2 a,tbiguser b where a.address=b.address;</span><br><span class="line">--执行SQL </span><br><span class="line">select count(id) cont ,address from v_tuser group by address order by address;</span><br></pre></td></tr></table></figure><h3 id="优化总结"><a href="#优化总结" class="headerlink" title="优化总结"></a>优化总结</h3><p>开启慢查询日志，定位运行慢的SQL语句</p><p>利用explain执行计划，查看SQL执行情况</p><p>关注索引使用情况：type</p><p>关注Rows：行扫描</p><p>关注Extra：没有信息最好</p><p>加索引后，查看索引使用情况，index只是覆盖索引，并不算很好的使用索引</p><p>如果有关联尽量将索引用到<strong>eq_ref</strong>或<strong>ref</strong>级别</p><p>复杂SQL可以做成视图，视图在MySQL内部有优化，而且开发也比较友好</p><p>对于复杂的SQL要逐一分析，找到比较费时的SQL语句片段进行优化</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;msyql性能优化&quot;&gt;&lt;a href=&quot;#msyql性能优化&quot; class=&quot;headerlink&quot; title=&quot;msyql性能优化&quot;&gt;&lt;/a&gt;msyql性能优化&lt;/h1&gt;&lt;h2 id=&quot;1-系统配置优化&quot;&gt;&lt;a href=&quot;#1-系统配置优化&quot; class=&quot;</summary>
      
    
    
    
    <category term="msyql" scheme="http://duanyushuai.github.io/categories/msyql/"/>
    
    
    <category term="msyql" scheme="http://duanyushuai.github.io/tags/msyql/"/>
    
  </entry>
  
  <entry>
    <title>k8s</title>
    <link href="http://duanyushuai.github.io/2023/02/22/k8s/"/>
    <id>http://duanyushuai.github.io/2023/02/22/k8s/</id>
    <published>2023-02-22T06:14:11.674Z</published>
    <updated>2023-02-22T06:15:53.972Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>常用linux命令</title>
    <link href="http://duanyushuai.github.io/2023/02/10/linux/"/>
    <id>http://duanyushuai.github.io/2023/02/10/linux/</id>
    <published>2023-02-10T01:50:08.054Z</published>
    <updated>2023-03-02T13:50:40.581Z</updated>
    
    <content type="html"><![CDATA[<p><strong>查找文件名中包含某字符（如”elm”）的文件</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find /home/lijiajia/ -name <span class="string">&#x27;*elm*&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>删除目录</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf /root/logs/game </span><br></pre></td></tr></table></figure><p><strong>删除文件夹</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -f /root/logs/game </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;查找文件名中包含某字符（如”elm”）的文件&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>netty学习</title>
    <link href="http://duanyushuai.github.io/2023/01/30/netty%E7%AC%94%E8%AE%B0/"/>
    <id>http://duanyushuai.github.io/2023/01/30/netty%E7%AC%94%E8%AE%B0/</id>
    <published>2023-01-30T13:33:46.509Z</published>
    <updated>2023-02-05T13:55:27.744Z</updated>
    
    <content type="html"><![CDATA[<h1 id="netty-笔记"><a href="#netty-笔记" class="headerlink" title="netty 笔记"></a>netty 笔记</h1><h4 id="零拷贝"><a href="#零拷贝" class="headerlink" title="零拷贝"></a>零拷贝</h4><p>传统IO，从直接内存DMA 拷贝到内核 在用CPU拷贝到用户态进行修改，在用cpu拷贝内核，在DMA拷贝到协议栈</p><p>mmap优化</p><p>通过内存映射，用户空间可以共享内核空间数据。</p><p>零拷贝指没有cpu拷贝   </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;netty-笔记&quot;&gt;&lt;a href=&quot;#netty-笔记&quot; class=&quot;headerlink&quot; title=&quot;netty 笔记&quot;&gt;&lt;/a&gt;netty 笔记&lt;/h1&gt;&lt;h4 id=&quot;零拷贝&quot;&gt;&lt;a href=&quot;#零拷贝&quot; class=&quot;headerlink&quot; ti</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>若依框架学习</title>
    <link href="http://duanyushuai.github.io/2023/01/22/%E8%8B%A5%E4%BE%9D%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/"/>
    <id>http://duanyushuai.github.io/2023/01/22/%E8%8B%A5%E4%BE%9D%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/</id>
    <published>2023-01-22T02:00:00.000Z</published>
    <updated>2023-02-12T14:09:52.050Z</updated>
    
    <content type="html"><![CDATA[<h1 id="若依框架学习"><a href="#若依框架学习" class="headerlink" title="若依框架学习"></a>若依框架学习</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring.profiles.active = prod</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;若依框架学习&quot;&gt;&lt;a href=&quot;#若依框架学习&quot; class=&quot;headerlink&quot; title=&quot;若依框架学习&quot;&gt;&lt;/a&gt;若依框架学习&lt;/h1&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=</summary>
      
    
    
    
    <category term="框架学习" scheme="http://duanyushuai.github.io/categories/%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="框架学习" scheme="http://duanyushuai.github.io/tags/%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>动态线程池</title>
    <link href="http://duanyushuai.github.io/2023/01/13/%E5%8A%A8%E6%80%81%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
    <id>http://duanyushuai.github.io/2023/01/13/%E5%8A%A8%E6%80%81%E7%BA%BF%E7%A8%8B%E6%B1%A0/</id>
    <published>2023-01-13T02:00:00.000Z</published>
    <updated>2023-03-01T02:12:27.913Z</updated>
    
    <content type="html"><![CDATA[<h1 id="动态线程池"><a href="#动态线程池" class="headerlink" title="动态线程池"></a>动态线程池</h1><p><a href="https://tech.meituan.com/2020/04/02/java-pooling-pratice-in-meituan.html">https://tech.meituan.com/2020/04/02/java-pooling-pratice-in-meituan.html</a></p><p><a href="https://mp.weixin.qq.com/s/leoP_3uOtXsE55PMmSAVTg">https://mp.weixin.qq.com/s/leoP_3uOtXsE55PMmSAVTg</a></p><p><a href="https://mp.weixin.qq.com/s/4kir2LfMnyuApKwulnRAmA">https://mp.weixin.qq.com/s/4kir2LfMnyuApKwulnRAmA</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;动态线程池&quot;&gt;&lt;a href=&quot;#动态线程池&quot; class=&quot;headerlink&quot; title=&quot;动态线程池&quot;&gt;&lt;/a&gt;动态线程池&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://tech.meituan.com/2020/04/02/java-pooling-</summary>
      
    
    
    
    <category term="线程" scheme="http://duanyushuai.github.io/categories/%E7%BA%BF%E7%A8%8B/"/>
    
    
    <category term="多线程" scheme="http://duanyushuai.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>springboot源码</title>
    <link href="http://duanyushuai.github.io/2023/01/10/springboot%E6%BA%90%E7%A0%81/"/>
    <id>http://duanyushuai.github.io/2023/01/10/springboot%E6%BA%90%E7%A0%81/</id>
    <published>2023-01-10T12:00:00.000Z</published>
    <updated>2023-01-11T08:39:23.484Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Springboot源码"><a href="#Springboot源码" class="headerlink" title="Springboot源码"></a>Springboot源码</h1><p><code>@springbootApplication</code>注解包括</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//@AutoConfigurationPackage</span></span><br><span class="line"><span class="meta">@Import(&#123;Registrar.class&#125;)</span></span><br><span class="line"><span class="meta">@Import(&#123;AutoConfigurationImportSelector.class&#125;)</span></span><br><span class="line"><span class="meta">@ComponentScan(</span></span><br><span class="line"><span class="meta">    excludeFilters = &#123;@Filter(</span></span><br><span class="line"><span class="meta">    type = FilterType.CUSTOM,</span></span><br><span class="line"><span class="meta">    classes = &#123;TypeExcludeFilter.class&#125;</span></span><br><span class="line"><span class="meta">), @Filter(</span></span><br><span class="line"><span class="meta">    type = FilterType.CUSTOM,</span></span><br><span class="line"><span class="meta">    classes = &#123;AutoConfigurationExcludeFilter.class&#125;</span></span><br><span class="line"><span class="meta">)&#125;</span></span><br></pre></td></tr></table></figure><p><code>@Import(&#123;Registrar.class&#125;) </code>指定我们要扫描哪些包下组件</p><p><code>AutoConfigurationPackages</code>怎么创建对象的，就是<code>controller</code>等对象创建</p><p><code>@Import(&#123;AutoConfigurationImportSelector.class&#125;) </code> 中加载<code>classLoader.getResources(&quot;META-INF/spring.factories&quot;)</code></p><p>SPI机制 找到<code>@EnableAutoConfiguration</code>中全类名对应的值</p><p><img src="/../img/springboot%E6%BA%90%E7%A0%811.jpg"></p><p>有过滤组件，引入了包，自动配置才生效</p><p><code>Spring</code> 启动器 <code>springmvc</code>启动器</p><p>1.首先先启动<code>ServletWebServerFactoryAutoConfiguration</code>   servlet容器</p><p>2.在启动<code>DispatcherServletAutoConfiguration</code></p><h5 id="1-ServletWebServerFactoryAutoConfiguration"><a href="#1-ServletWebServerFactoryAutoConfiguration" class="headerlink" title="1. ServletWebServerFactoryAutoConfiguration"></a>1. ServletWebServerFactoryAutoConfiguration</h5><p><code>@EnableConfigurationProperties(ServlerProperties.class)</code>   </p><p>配置tomcat参数</p><p><code>@Import   WebServerFactoryCustomizerBeanPostProcessor</code></p><p>导入三种服务器 Tomcat 、jetty、Undertow 默认是Tomcat生效  </p><p>给容器中放入<code>TomcatServeletWebServerFactory </code>      </p><p><code>@ConditionalOnMissingBean(ServletWebServerFactory) </code>我们也可以自己放一个<code>ServletWebServerFactory</code></p><p>TomcatServeletWebServerFactory 里的getWebServer 创建new Tomcat() </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Springboot源码&quot;&gt;&lt;a href=&quot;#Springboot源码&quot; class=&quot;headerlink&quot; title=&quot;Springboot源码&quot;&gt;&lt;/a&gt;Springboot源码&lt;/h1&gt;&lt;p&gt;&lt;code&gt;@springbootApplication&lt;/</summary>
      
    
    
    
    <category term="springboot" scheme="http://duanyushuai.github.io/categories/springboot/"/>
    
    
    <category term="源码" scheme="http://duanyushuai.github.io/tags/%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>caffeine 本地缓存</title>
    <link href="http://duanyushuai.github.io/2023/01/10/Caffeine%E6%9C%AC%E5%9C%B0%E7%BC%93%E5%AD%98/"/>
    <id>http://duanyushuai.github.io/2023/01/10/Caffeine%E6%9C%AC%E5%9C%B0%E7%BC%93%E5%AD%98/</id>
    <published>2023-01-10T06:00:00.000Z</published>
    <updated>2023-01-11T01:23:04.959Z</updated>
    
    <content type="html"><![CDATA[<h1 id="caffeine-本地缓存"><a href="#caffeine-本地缓存" class="headerlink" title="caffeine 本地缓存"></a>caffeine 本地缓存</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.github.ben-manes.caffeine&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;caffeine&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">2.9</span><span class="number">.3</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>官方文档 ：<a href="https://github.com/ben-manes/caffeine/wiki/Eviction-zh-CN">https://github.com/ben-manes/caffeine/wiki/Eviction-zh-CN</a></p><h4 id="添加-3种加载策略"><a href="#添加-3种加载策略" class="headerlink" title="添加    3种加载策略"></a>添加    3种加载策略</h4><p><strong>手动加载</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> duan.test.caffeine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.github.benmanes.caffeine.cache.Cache;</span><br><span class="line"><span class="keyword">import</span> com.github.benmanes.caffeine.cache.Caffeine;</span><br><span class="line"><span class="keyword">import</span> com.github.benmanes.caffeine.cache.LoadingCache;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Function;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CaffeineTest2</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">            <span class="comment">// 初始化缓存，设置了1分钟的写过期，100的缓存最大个数</span></span><br><span class="line">            Cache&lt;Integer, Integer&gt; cache = Caffeine.newBuilder()</span><br><span class="line">                    .expireAfterWrite(<span class="number">1</span>, TimeUnit.MINUTES)</span><br><span class="line">                    .maximumSize(<span class="number">100</span>)</span><br><span class="line">                    .build();</span><br><span class="line">            <span class="type">int</span> <span class="variable">key1</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">            <span class="comment">// 使用getIfPresent方法从缓存中获取值。如果缓存中不存指定的值，则方法将返回 null：</span></span><br><span class="line">            System.out.println(cache.getIfPresent(key1));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 也可以使用 get 方法获取值，该方法将一个参数为 key 的 Function 作为参数传入。如果缓存中不存在该 key</span></span><br><span class="line">            <span class="comment">// 则该函数将用于提供默认值，该值在计算后插入缓存中：</span></span><br><span class="line">            System.out.println(cache.get(key1, <span class="keyword">new</span> <span class="title class_">Function</span>&lt;Integer, Integer&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> Integer <span class="title function_">apply</span><span class="params">(Integer integer)</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 校验key1对应的value是否插入缓存中</span></span><br><span class="line">            System.out.println(cache.getIfPresent(key1));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 手动put数据填充缓存中</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">value1</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">            cache.put(key1, value1);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 使用getIfPresent方法从缓存中获取值。如果缓存中不存指定的值，则方法将返回 null：</span></span><br><span class="line">            System.out.println(cache.getIfPresent(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 移除数据，让数据失效</span></span><br><span class="line">            cache.invalidate(<span class="number">1</span>);</span><br><span class="line">            System.out.println(cache.getIfPresent(<span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>同步加载数据</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> duan.test.caffeine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.github.benmanes.caffeine.cache.CacheLoader;</span><br><span class="line"><span class="keyword">import</span> com.github.benmanes.caffeine.cache.Caffeine;</span><br><span class="line"><span class="keyword">import</span> com.github.benmanes.caffeine.cache.LoadingCache;</span><br><span class="line"><span class="keyword">import</span> org.checkerframework.checker.nullness.qual.NonNull;</span><br><span class="line"><span class="keyword">import</span> org.checkerframework.checker.nullness.qual.Nullable;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CaffeineTest2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        test();</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 模拟从数据库中读取key</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getInDB</span><span class="params">(<span class="type">int</span> key)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> key + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="comment">// 初始化缓存，设置了1分钟的写过期，100的缓存最大个数</span></span><br><span class="line">            LoadingCache&lt;Integer, Integer&gt; cache = Caffeine.newBuilder()</span><br><span class="line">                    .expireAfterWrite(<span class="number">1</span>, TimeUnit.MINUTES)</span><br><span class="line">                    .maximumSize(<span class="number">100</span>)</span><br><span class="line">                    .build(<span class="keyword">new</span> <span class="title class_">CacheLoader</span>&lt;Integer, Integer&gt;() &#123;</span><br><span class="line">                        <span class="meta">@Nullable</span></span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="keyword">public</span> Integer <span class="title function_">load</span><span class="params">(<span class="meta">@NonNull</span> Integer key)</span> &#123;</span><br><span class="line">                            <span class="keyword">return</span> getInDB(key);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> <span class="variable">key1</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">            <span class="comment">// get数据，取不到则从数据库中读取相关数据，该值也会插入缓存中：</span></span><br><span class="line">            <span class="type">Integer</span> <span class="variable">value1</span> <span class="operator">=</span> cache.get(key1);</span><br><span class="line">            System.out.println(value1);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 支持直接get一组值，支持批量查找</span></span><br><span class="line">            Map&lt;Integer, Integer&gt; dataMap</span><br><span class="line">                    = cache.getAll(Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>));</span><br><span class="line">            System.out.println(dataMap);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> &#123;</span><br><span class="line">        LoadingCache&lt;Integer, Integer&gt; cache = Caffeine.newBuilder()</span><br><span class="line">                .expireAfterWrite(<span class="number">1</span>, TimeUnit.MINUTES)</span><br><span class="line">                .maximumSize(<span class="number">100</span>)</span><br><span class="line">                .build(<span class="keyword">new</span> <span class="title class_">CacheLoader</span>&lt;Integer, Integer&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Nullable</span></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> Integer <span class="title function_">load</span><span class="params">(<span class="meta">@NonNull</span> Integer key)</span> &#123;</span><br><span class="line">                        <span class="keyword">return</span> getInDB(key);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">key1</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// get数据，取不到则从数据库中读取相关数据，该值也会插入缓存中：</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">value1</span> <span class="operator">=</span> cache.get(key1);</span><br><span class="line">        System.out.println(value1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 支持直接get一组值，支持批量查找</span></span><br><span class="line">        Map&lt;Integer, Integer&gt; dataMap</span><br><span class="line">                = cache.getAll(Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>));</span><br><span class="line">        System.out.println(dataMap);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>**异步加载 **</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> duan.test.caffeine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.github.benmanes.caffeine.cache.AsyncCache;</span><br><span class="line"><span class="keyword">import</span> com.github.benmanes.caffeine.cache.Caffeine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CompletableFuture;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutionException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Function;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CaffeineTest2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">        test();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模拟从数据库中读取key</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getInDB</span><span class="params">(<span class="type">int</span> key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> key + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">        <span class="comment">// 使用executor设置线程池</span></span><br><span class="line">        AsyncCache&lt;Integer, Integer&gt; asyncCache = Caffeine.newBuilder()</span><br><span class="line">                .expireAfterWrite(<span class="number">1</span>, TimeUnit.MINUTES)</span><br><span class="line">                .maximumSize(<span class="number">100</span>).executor(Executors.newSingleThreadExecutor()).buildAsync();</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">key</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// get返回的是CompletableFuture</span></span><br><span class="line">        CompletableFuture&lt;Integer&gt; future = asyncCache.get(key, <span class="keyword">new</span> <span class="title class_">Function</span>&lt;Integer, Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Integer <span class="title function_">apply</span><span class="params">(Integer key)</span> &#123;</span><br><span class="line">                <span class="comment">// 执行所在的线程不在是main，而是ForkJoinPool线程池提供的线程</span></span><br><span class="line">                System.out.println(<span class="string">&quot;当前所在线程：&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">                <span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> getInDB(key);</span><br><span class="line">                <span class="keyword">return</span> value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> future.get();</span><br><span class="line">        System.out.println(<span class="string">&quot;当前所在线程：&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">        System.out.println(value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="淘汰机制"><a href="#淘汰机制" class="headerlink" title="淘汰机制"></a>淘汰机制</h4><p><strong>基于权重</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化缓存，设置最大权重为2</span></span><br><span class="line">        Cache&lt;Integer, Integer&gt; cache = Caffeine.newBuilder()</span><br><span class="line">                .maximumWeight(<span class="number">2</span>)</span><br><span class="line">                .weigher(<span class="keyword">new</span> <span class="title class_">Weigher</span>&lt;Integer, Integer&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="meta">@NonNegative</span> <span class="type">int</span> <span class="title function_">weigh</span><span class="params">(<span class="meta">@NonNull</span> Integer key, <span class="meta">@NonNull</span> Integer value)</span> &#123;</span><br><span class="line">                        <span class="keyword">return</span> key;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        cache.put(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 打印缓存个数，结果为1</span></span><br><span class="line">        System.out.println(cache.estimatedSize());</span><br><span class="line"></span><br><span class="line">        cache.put(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">        <span class="comment">// 稍微休眠一秒</span></span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        <span class="comment">// 打印缓存个数，结果为1</span></span><br><span class="line">        System.out.println(cache.estimatedSize());</span><br></pre></td></tr></table></figure><p><strong>基于大小</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化缓存，缓存最大个数为1</span></span><br><span class="line">       Cache&lt;Integer, Integer&gt; cache = Caffeine.newBuilder()</span><br><span class="line">               .maximumSize(<span class="number">1</span>)</span><br><span class="line">               .build();</span><br><span class="line"></span><br><span class="line">       cache.put(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">       <span class="comment">// 打印缓存个数，结果为1</span></span><br><span class="line">       System.out.println(cache.estimatedSize());</span><br><span class="line"></span><br><span class="line">       cache.put(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">       <span class="comment">// 稍微休眠一秒</span></span><br><span class="line">       Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">       <span class="comment">// 打印缓存个数，结果为1</span></span><br><span class="line">       System.out.println(cache.estimatedSize());</span><br></pre></td></tr></table></figure><p><strong>基于时间</strong></p><p>然后是基于时间的方式，基于时间的回收机制，Caffeine有提供了三种类型，可以分为：</p><ul><li>访问后到期，时间节点从最近一次读或者写，也就是get或者put开始算起。</li><li>写入后到期，时间节点从写开始算起，也就是put。</li><li>自定义策略，自定义具体到期时间。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 设置写入5秒后数据到期</span></span><br><span class="line">Cache&lt;Integer, Integer&gt; cache = Caffeine.newBuilder()</span><br><span class="line">                .expireAfterWrite(<span class="number">5</span>, TimeUnit.SECONDS).scheduler(Scheduler.systemScheduler())</span><br><span class="line">                .build();</span><br><span class="line">        cache.put(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">        System.out.println(cache.getIfPresent(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">        Thread.sleep(<span class="number">6000</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(cache.getIfPresent(<span class="number">1</span>));</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置访问5秒后数据到期</span></span><br><span class="line">        Cache&lt;Integer, Integer&gt; cache = Caffeine.newBuilder()</span><br><span class="line">                .expireAfterAccess(<span class="number">5</span>, TimeUnit.SECONDS).scheduler(Scheduler.systemScheduler())</span><br><span class="line">                .build();</span><br><span class="line">        cache.put(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">        System.out.println(cache.getIfPresent(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">        Thread.sleep(<span class="number">6000</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(cache.getIfPresent(<span class="number">1</span>));</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">Cache&lt;Integer, Integer&gt; cache = Caffeine.newBuilder()</span><br><span class="line">                .expireAfter(<span class="keyword">new</span> <span class="title class_">Expiry</span>&lt;Integer, Integer&gt;() &#123;</span><br><span class="line">                    <span class="comment">// 创建1秒后过期，可以看到这里必须要用纳秒</span></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">expireAfterCreate</span><span class="params">(<span class="meta">@NonNull</span> Integer key, <span class="meta">@NonNull</span> Integer value, <span class="type">long</span> currentTime)</span> &#123;</span><br><span class="line">                        <span class="keyword">return</span> TimeUnit.SECONDS.toNanos(<span class="number">1</span>);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 更新2秒后过期，可以看到这里必须要用纳秒</span></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">expireAfterUpdate</span><span class="params">(<span class="meta">@NonNull</span> Integer key, <span class="meta">@NonNull</span> Integer value, <span class="type">long</span> currentTime, <span class="meta">@NonNegative</span> <span class="type">long</span> currentDuration)</span> &#123;</span><br><span class="line">                        <span class="keyword">return</span> TimeUnit.SECONDS.toNanos(<span class="number">2</span>);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 读3秒后过期，可以看到这里必须要用纳秒</span></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">expireAfterRead</span><span class="params">(<span class="meta">@NonNull</span> Integer key, <span class="meta">@NonNull</span> Integer value, <span class="type">long</span> currentTime, <span class="meta">@NonNegative</span> <span class="type">long</span> currentDuration)</span> &#123;</span><br><span class="line">                        <span class="keyword">return</span> TimeUnit.SECONDS.toNanos(<span class="number">3</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;).scheduler(Scheduler.systemScheduler())</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        cache.put(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(cache.getIfPresent(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">        Thread.sleep(<span class="number">6000</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(cache.getIfPresent(<span class="number">1</span>));</span><br></pre></td></tr></table></figure><p>写后重新计时</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置写入后3秒后数据过期，2秒后如果有数据访问则刷新数据</span></span><br><span class="line">        LoadingCache&lt;Integer, Integer&gt; cache = Caffeine.newBuilder()</span><br><span class="line">                .refreshAfterWrite(<span class="number">2</span>, TimeUnit.SECONDS) <span class="comment">//刷新机制</span></span><br><span class="line">                .expireAfterWrite(<span class="number">3</span>, TimeUnit.SECONDS)</span><br><span class="line">                .build(<span class="keyword">new</span> <span class="title class_">CacheLoader</span>&lt;Integer, Integer&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Nullable</span></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> Integer <span class="title function_">load</span><span class="params">(<span class="meta">@NonNull</span> Integer key)</span> &#123;</span><br><span class="line">                        <span class="keyword">return</span> getInDB();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">        cache.put(<span class="number">1</span>, getInDB());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 休眠2.5秒，后取值</span></span><br><span class="line">        Thread.sleep(<span class="number">2500</span>);</span><br><span class="line">        System.out.println(cache.getIfPresent(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 休眠1.5秒，后取值</span></span><br><span class="line">        Thread.sleep(<span class="number">1500</span>);</span><br><span class="line">        System.out.println(cache.getIfPresent(<span class="number">1</span>));</span><br></pre></td></tr></table></figure><h5 id="问题1"><a href="#问题1" class="headerlink" title="问题1"></a>问题1</h5><p>说直接给Caffeine设置了最大缓存个数，会存在一个隐患，那便是当同时在线的玩家数超过最大缓存个数的情况下，会导致缓存被清，之后导致频繁读取数据库加载数据，让我在Caffeine的基础上，结合二级缓存解决这个问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 充当二级缓存用，生命周期仅活到下个gc</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;Integer, WeakReference&lt;Integer&gt;&gt; secondCacheMap =</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="comment">// 设置最大缓存个数为1</span></span><br><span class="line">        LoadingCache&lt;Integer, Integer&gt; cache = Caffeine.newBuilder()</span><br><span class="line">                .maximumSize(<span class="number">1</span>)</span><br><span class="line">                <span class="comment">// 设置put和remove的回调</span></span><br><span class="line">                .writer(<span class="keyword">new</span> <span class="title class_">CacheWriter</span>&lt;Integer, Integer&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(<span class="meta">@NonNull</span> Integer key, <span class="meta">@NonNull</span> Integer value)</span> &#123;</span><br><span class="line">                        secondCacheMap.put(key, <span class="keyword">new</span> <span class="title class_">WeakReference</span>&lt;&gt;(value));</span><br><span class="line">                        System.out.println(<span class="string">&quot;触发CacheWriter.write，将key = &quot;</span> + key + <span class="string">&quot;放入二级缓存中&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(<span class="meta">@NonNull</span> Integer key, <span class="meta">@Nullable</span> Integer value, <span class="meta">@NonNull</span> RemovalCause cause)</span> &#123;</span><br><span class="line">                        <span class="keyword">switch</span> (cause) &#123;</span><br><span class="line">                            <span class="keyword">case</span> EXPLICIT:</span><br><span class="line">                                secondCacheMap.remove(key);</span><br><span class="line">                                System.out.println(<span class="string">&quot;触发CacheWriter&quot;</span> +</span><br><span class="line">                                        <span class="string">&quot;.delete，清除原因：主动清除，将key = &quot;</span> + key +</span><br><span class="line">                                        <span class="string">&quot;从二级缓存清除&quot;</span>);</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            <span class="keyword">case</span> SIZE:</span><br><span class="line">                                System.out.println(<span class="string">&quot;触发CacheWriter&quot;</span> +</span><br><span class="line">                                        <span class="string">&quot;.delete，清除原因：缓存个数超过上限，key = &quot;</span> + key);</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            <span class="keyword">default</span>:</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                .build(<span class="keyword">new</span> <span class="title class_">CacheLoader</span>&lt;Integer, Integer&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Nullable</span></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> Integer <span class="title function_">load</span><span class="params">(<span class="meta">@NonNull</span> Integer key)</span> &#123;</span><br><span class="line">                        WeakReference&lt;Integer&gt; value = secondCacheMap.get(key);</span><br><span class="line">                        <span class="keyword">if</span> (value == <span class="literal">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        System.out.println(<span class="string">&quot;触发CacheLoader.load，从二级缓存读取key = &quot;</span> + key);</span><br><span class="line">                        <span class="keyword">return</span> value.get();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">        cache.put(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        cache.put(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">        <span class="comment">// 由于清除缓存是异步的，因而睡眠1秒等待清除完成</span></span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 缓存超上限触发清除后</span></span><br><span class="line">        System.out.println(<span class="string">&quot;从Caffeine中get数据，key为1，value为&quot;</span>+cache.get(<span class="number">1</span>));</span><br></pre></td></tr></table></figure><h4 id="淘汰监听"><a href="#淘汰监听" class="headerlink" title="淘汰监听"></a>淘汰监听</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xifanxiaxue</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/11/19 22:34</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@desc</span> 淘汰通知</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CaffeineRemovalListenerTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        LoadingCache&lt;Integer, Integer&gt; cache = Caffeine.newBuilder()</span><br><span class="line">                .expireAfterAccess(<span class="number">1</span>, TimeUnit.SECONDS)</span><br><span class="line">                .scheduler(Scheduler.systemScheduler())</span><br><span class="line">             <span class="comment">// 增加了淘汰监听</span></span><br><span class="line">                .removalListener(((key, value, cause) -&gt; &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;淘汰通知，key：&quot;</span> + key + <span class="string">&quot;，原因：&quot;</span> + cause);</span><br><span class="line">                &#125;))</span><br><span class="line">                .build(<span class="keyword">new</span> <span class="title class_">CacheLoader</span>&lt;Integer, Integer&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="meta">@Nullable</span> Integer <span class="title function_">load</span><span class="params">(<span class="meta">@NonNull</span> Integer key)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                        <span class="keyword">return</span> key;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">        cache.put(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        Thread.currentThread().sleep(<span class="number">2000</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="缓存一致性"><a href="#缓存一致性" class="headerlink" title="缓存一致性"></a>缓存一致性</h4><p>利用mq，来更新缓存，需要根据数据库数据判断缓存是否需要更新</p><p><img src="/../img/%E7%BC%93%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A71.jpg"></p><p>利用cancel监控binlog日志更新缓存</p><p><img src="/../img/%E7%BC%93%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A72.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;caffeine-本地缓存&quot;&gt;&lt;a href=&quot;#caffeine-本地缓存&quot; class=&quot;headerlink&quot; title=&quot;caffeine 本地缓存&quot;&gt;&lt;/a&gt;caffeine 本地缓存&lt;/h1&gt;&lt;figure class=&quot;highlight java</summary>
      
    
    
    
    <category term="java" scheme="http://duanyushuai.github.io/categories/java/"/>
    
    
    <category term="缓存" scheme="http://duanyushuai.github.io/tags/%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>springMVC 源码分析</title>
    <link href="http://duanyushuai.github.io/2023/01/06/springmvc%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>http://duanyushuai.github.io/2023/01/06/springmvc%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</id>
    <published>2023-01-06T02:02:49.137Z</published>
    <updated>2023-01-06T02:13:58.273Z</updated>
    
    <content type="html"><![CDATA[<h1 id="springMVC-源码分析"><a href="#springMVC-源码分析" class="headerlink" title="springMVC 源码分析"></a>springMVC 源码分析</h1><p><img src="/../img/SpringMVC%E5%8E%9F%E7%90%86.jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;springMVC-源码分析&quot;&gt;&lt;a href=&quot;#springMVC-源码分析&quot; class=&quot;headerlink&quot; title=&quot;springMVC 源码分析&quot;&gt;&lt;/a&gt;springMVC 源码分析&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/../img/Spri</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>自控力</title>
    <link href="http://duanyushuai.github.io/2023/01/05/%E8%87%AA%E6%8E%A7%E5%8A%9B/"/>
    <id>http://duanyushuai.github.io/2023/01/05/%E8%87%AA%E6%8E%A7%E5%8A%9B/</id>
    <published>2023-01-05T02:00:00.000Z</published>
    <updated>2023-03-24T08:49:41.326Z</updated>
    
    <content type="html"><![CDATA[<h1 id="自控力"><a href="#自控力" class="headerlink" title="自控力"></a>自控力</h1><h4 id="1-冥想"><a href="#1-冥想" class="headerlink" title="1. 冥想"></a>1. 冥想</h4><p>遇到难题有两个想法，专注自己的呼吸5分钟，帮助自己获得更好的选择</p><h4 id="2-关注自己的意志力强弱"><a href="#2-关注自己的意志力强弱" class="headerlink" title="2.  关注自己的意志力强弱"></a>2.  关注自己的意志力强弱</h4><h4 id="3-意志力榜样"><a href="#3-意志力榜样" class="headerlink" title="3. 意志力榜样"></a>3. 意志力榜样</h4><h4 id="4-等待十分钟的诱惑"><a href="#4-等待十分钟的诱惑" class="headerlink" title="4. 等待十分钟的诱惑"></a>4. 等待十分钟的诱惑</h4>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;自控力&quot;&gt;&lt;a href=&quot;#自控力&quot; class=&quot;headerlink&quot; title=&quot;自控力&quot;&gt;&lt;/a&gt;自控力&lt;/h1&gt;&lt;h4 id=&quot;1-冥想&quot;&gt;&lt;a href=&quot;#1-冥想&quot; class=&quot;headerlink&quot; title=&quot;1. 冥想&quot;&gt;&lt;/a&gt;1.</summary>
      
    
    
    
    <category term="读书" scheme="http://duanyushuai.github.io/categories/%E8%AF%BB%E4%B9%A6/"/>
    
    
    <category term="读书" scheme="http://duanyushuai.github.io/tags/%E8%AF%BB%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>redis限流</title>
    <link href="http://duanyushuai.github.io/2022/11/22/redis%E9%99%90%E6%B5%81/"/>
    <id>http://duanyushuai.github.io/2022/11/22/redis%E9%99%90%E6%B5%81/</id>
    <published>2022-11-22T02:00:00.000Z</published>
    <updated>2022-11-22T14:33:38.995Z</updated>
    
    <content type="html"><![CDATA[<h1 id="redis-限流"><a href="#redis-限流" class="headerlink" title="redis 限流"></a>redis 限流</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;redis-限流&quot;&gt;&lt;a href=&quot;#redis-限流&quot; class=&quot;headerlink&quot; title=&quot;redis 限流&quot;&gt;&lt;/a&gt;redis 限流&lt;/h1&gt;</summary>
      
    
    
    
    <category term="redis" scheme="http://duanyushuai.github.io/categories/redis/"/>
    
    
    <category term="限流" scheme="http://duanyushuai.github.io/tags/%E9%99%90%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>excel导入</title>
    <link href="http://duanyushuai.github.io/2022/11/18/excel%E5%AF%BC%E5%85%A5/"/>
    <id>http://duanyushuai.github.io/2022/11/18/excel%E5%AF%BC%E5%85%A5/</id>
    <published>2022-11-18T03:00:23.000Z</published>
    <updated>2022-10-18T14:07:28.242Z</updated>
    
    <content type="html"><![CDATA[<h1 id="excel导入"><a href="#excel导入" class="headerlink" title="excel导入"></a>excel导入</h1><h4 id="百万数据导入"><a href="#百万数据导入" class="headerlink" title="百万数据导入"></a>百万数据导入</h4><p>1、 我遇到的数据量超级大，使用传统的POI方式来完成导入导出很明显会内存溢出，并且效率会非常低；</p><p>2、 数据量大直接使用<code>select * from tableName</code>肯定不行，一下子查出来300w条数据肯定会很慢；</p><p>3、 300w 数据导出到Excel时肯定不能都写在一个Sheet中，这样效率会非常低；估计打开都得几分钟；</p><p>4、 300w数据导出到Excel中肯定不能一行一行的导出到Excel中。频繁IO操作绝对不行；</p><p>5、 导入时300万数据存储到DB如果循环一条条插入也肯定不行；</p><p>6、导入时300w数据如果使用Mybatis的批量插入肯定不行，因为Mybatis的批量插入其实就是SQL的循环；一样很慢。</p><h5 id="针对1："><a href="#针对1：" class="headerlink" title="针对1："></a>针对1：</h5><p>其实问题所在就是内存溢出，我们只要使用对上面介绍的POI方式即可，主要问题就是原生的POI解决起来相当麻烦。</p><p>经过查阅资料翻看到阿里的一款POI封装工具EasyExcel，上面问题等到解决；</p><h5 id="针对2："><a href="#针对2：" class="headerlink" title="针对2："></a>针对2：</h5><p>不能一次性查询出全部数据，我们可以分批进行查询，只不过时多查询几次的问题，况且市面上分页插件很多。此问题好解决。</p><h5 id="针对3："><a href="#针对3：" class="headerlink" title="针对3："></a>针对3：</h5><p>可以将300w条数据写到不同的Sheet中，每一个Sheet写一百万即可。</p><h5 id="针对4："><a href="#针对4：" class="headerlink" title="针对4："></a>针对4：</h5><p>不能一行一行的写入到Excel上，我们可以将分批查询的数据分批写入到Excel中。</p><h5 id="针对5："><a href="#针对5：" class="headerlink" title="针对5："></a>针对5：</h5><p>导入到DB时我们可以将Excel中读取的数据存储到集合中，到了一定数量，直接批量插入到DB中。</p><h5 id="针对6："><a href="#针对6：" class="headerlink" title="针对6："></a>针对6：</h5><p>不能使用Mybatis的批量插入，我们可以使用JDBC的批量插入，配合事务来完成批量插入到DB。即 Excel读取分批+JDBC分批插入+事务。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dataExport300w</span><span class="params">(HttpServletResponse response)</span> &#123;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">            System.out.println(<span class="string">&quot;导出开始时间:&quot;</span> + startTime);</span><br><span class="line"></span><br><span class="line">            outputStream = response.getOutputStream();</span><br><span class="line">            <span class="type">ExcelWriter</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ExcelWriter</span>(outputStream, ExcelTypeEnum.XLSX);</span><br><span class="line">            <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>((<span class="string">&quot;excel100w&quot;</span>).getBytes(), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//title</span></span><br><span class="line">            <span class="type">Table</span> <span class="variable">table</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Table</span>(<span class="number">1</span>);</span><br><span class="line">            List&lt;List&lt;String&gt;&gt; titles = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;List&lt;String&gt;&gt;();</span><br><span class="line">            titles.add(Arrays.asList(<span class="string">&quot;onlineseqid&quot;</span>));</span><br><span class="line">            titles.add(Arrays.asList(<span class="string">&quot;businessid&quot;</span>));</span><br><span class="line">            titles.add(Arrays.asList(<span class="string">&quot;becifno&quot;</span>));</span><br><span class="line">            titles.add(Arrays.asList(<span class="string">&quot;ivisresult&quot;</span>));</span><br><span class="line">            titles.add(Arrays.asList(<span class="string">&quot;createdby&quot;</span>));</span><br><span class="line">            titles.add(Arrays.asList(<span class="string">&quot;createddate&quot;</span>));</span><br><span class="line">            titles.add(Arrays.asList(<span class="string">&quot;updateby&quot;</span>));</span><br><span class="line">            titles.add(Arrays.asList(<span class="string">&quot;updateddate&quot;</span>));</span><br><span class="line">            titles.add(Arrays.asList(<span class="string">&quot;risklevel&quot;</span>));</span><br><span class="line">            table.setHead(titles);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//模拟统计查询的数据数量这里模拟100w</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">3000001</span>;</span><br><span class="line">            <span class="comment">//记录总数:实际中需要根据查询条件进行统计即可</span></span><br><span class="line">            <span class="type">Integer</span> <span class="variable">totalCount</span> <span class="operator">=</span> actResultLogMapper.findActResultLogByCondations(count);</span><br><span class="line">            <span class="comment">//每一个Sheet存放100w条数据</span></span><br><span class="line">            <span class="type">Integer</span> <span class="variable">sheetDataRows</span> <span class="operator">=</span> ExcelConstants.PER_SHEET_ROW_COUNT;</span><br><span class="line">            <span class="comment">//每次写入的数据量20w</span></span><br><span class="line">            <span class="type">Integer</span> <span class="variable">writeDataRows</span> <span class="operator">=</span> ExcelConstants.PER_WRITE_ROW_COUNT;</span><br><span class="line">            <span class="comment">//计算需要的Sheet数量</span></span><br><span class="line">            <span class="type">Integer</span> <span class="variable">sheetNum</span> <span class="operator">=</span> totalCount % sheetDataRows == <span class="number">0</span> ? (totalCount / sheetDataRows) : (totalCount / sheetDataRows + <span class="number">1</span>);</span><br><span class="line">            <span class="comment">//计算一般情况下每一个Sheet需要写入的次数(一般情况不包含最后一个sheet,因为最后一个sheet不确定会写入多少条数据)</span></span><br><span class="line">            <span class="type">Integer</span> <span class="variable">oneSheetWriteCount</span> <span class="operator">=</span> sheetDataRows / writeDataRows;</span><br><span class="line">            <span class="comment">//计算最后一个sheet需要写入的次数</span></span><br><span class="line">            <span class="type">Integer</span> <span class="variable">lastSheetWriteCount</span> <span class="operator">=</span> totalCount % sheetDataRows == <span class="number">0</span> ? oneSheetWriteCount : (totalCount % sheetDataRows % writeDataRows == <span class="number">0</span> ? (totalCount / sheetDataRows / writeDataRows) : (totalCount / sheetDataRows / writeDataRows + <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">            <span class="comment">//开始分批查询分次写入</span></span><br><span class="line">            <span class="comment">//注意这次的循环就需要进行嵌套循环了,外层循环是Sheet数目,内层循环是写入次数</span></span><br><span class="line">            List&lt;List&lt;String&gt;&gt; dataList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; sheetNum; i++) &#123;</span><br><span class="line">                <span class="comment">//创建Sheet</span></span><br><span class="line">                <span class="type">Sheet</span> <span class="variable">sheet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Sheet</span>(i, <span class="number">0</span>);</span><br><span class="line">                sheet.setSheetName(<span class="string">&quot;测试Sheet1&quot;</span> + i);</span><br><span class="line">                <span class="comment">//循环写入次数: j的自增条件是当不是最后一个Sheet的时候写入次数为正常的每个Sheet写入的次数,如果是最后一个就需要使用计算的次数lastSheetWriteCount</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; (i != sheetNum - <span class="number">1</span> ? oneSheetWriteCount : lastSheetWriteCount); j++) &#123;</span><br><span class="line">                    <span class="comment">//集合复用,便于GC清理</span></span><br><span class="line">                    dataList.clear();</span><br><span class="line">                    <span class="comment">//分页查询一次20w</span></span><br><span class="line">                    PageHelper.startPage(j + <span class="number">1</span> + oneSheetWriteCount * i, writeDataRows);</span><br><span class="line">                    List&lt;ActResultLog&gt; reslultList = actResultLogMapper.findByPage100w();</span><br><span class="line">                    <span class="keyword">if</span> (!CollectionUtils.isEmpty(reslultList)) &#123;</span><br><span class="line">                        reslultList.forEach(item -&gt; &#123;</span><br><span class="line">                            dataList.add(Arrays.asList(item.getOnlineseqid(), item.getBusinessid(), item.getBecifno(), item.getIvisresult(), item.getCreatedby(), Calendar.getInstance().getTime().toString(), item.getUpdateby(), Calendar.getInstance().getTime().toString(), item.getRisklevel()));</span><br><span class="line">                        &#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//写数据</span></span><br><span class="line">                    writer.write0(dataList, sheet, table);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 下载EXCEL</span></span><br><span class="line">            response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>((fileName).getBytes(<span class="string">&quot;gb2312&quot;</span>), <span class="string">&quot;ISO-8859-1&quot;</span>) + <span class="string">&quot;.xlsx&quot;</span>);</span><br><span class="line">            response.setContentType(<span class="string">&quot;multipart/form-data&quot;</span>);</span><br><span class="line">            response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">            writer.finish();</span><br><span class="line">            outputStream.flush();</span><br><span class="line">            <span class="comment">//导出时间结束</span></span><br><span class="line">            <span class="type">long</span> <span class="variable">endTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">            System.out.println(<span class="string">&quot;导出结束时间:&quot;</span> + endTime + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;导出所用时间:&quot;</span> + (endTime - startTime) / <span class="number">1000</span> + <span class="string">&quot;秒&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (outputStream != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    outputStream.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="300W数据的导入解决思路"><a href="#300W数据的导入解决思路" class="headerlink" title="300W数据的导入解决思路"></a><strong>300W数据的导入解决思路</strong></h4><p>1、首先是分批读取读取Excel中的300w数据，这一点EasyExcel有自己的解决方案，我们可以参考Demo即可，只需要把它分批的参数3000调大即可。我是用的20w；（一会儿代码一看就能明白）</p><p>2、其次就是往DB里插入，怎么去插入这20w条数据，当然不能一条一条的循环，应该批量插入这20w条数据，同样也不能使用Mybatis的批量插入语，因为效率也低。可以参考下面链接【Myabtis批量插入和JDBC批量插入性能对比】</p><p>3、使用JDBC+事务的批量操作将数据插入到数据库。（分批读取+JDBC分批插入+手动事务控制）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// EasyExcel的读取Excel数据的API</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">import2DBFromExcel10wTest</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> <span class="string">&quot;D:\\StudyWorkspace\\JavaWorkspace\\java_project_workspace\\idea_projects\\SpringBootProjects\\easyexcel\\exportFile\\excel300w.xlsx&quot;</span>;</span><br><span class="line">    <span class="comment">//记录开始读取Excel时间,也是导入程序开始时间</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">startReadTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    System.out.println(<span class="string">&quot;------开始读取Excel的Sheet时间(包括导入数据过程):&quot;</span> + startReadTime + <span class="string">&quot;ms------&quot;</span>);</span><br><span class="line">    <span class="comment">//读取所有Sheet的数据.每次读完一个Sheet就会调用这个方法</span></span><br><span class="line">    EasyExcel.read(fileName, <span class="keyword">new</span> <span class="title class_">EasyExceGeneralDatalListener</span>(actResultLogService2)).doReadAll();</span><br><span class="line">    <span class="type">long</span> <span class="variable">endReadTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    System.out.println(<span class="string">&quot;------结束读取Excel的Sheet时间(包括导入数据过程):&quot;</span> + endReadTime + <span class="string">&quot;ms------&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 事件监听</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EasyExceGeneralDatalListener</span> <span class="keyword">extends</span> <span class="title class_">AnalysisEventListener</span>&lt;Map&lt;Integer, String&gt;&gt; &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理业务逻辑的Service,也可以是Mapper</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> ActResultLogService2 actResultLogService2;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用于存储读取的数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Map&lt;Integer, String&gt;&gt; dataList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Map&lt;Integer, String&gt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">EasyExceGeneralDatalListener</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">EasyExceGeneralDatalListener</span><span class="params">(ActResultLogService2 actResultLogService2)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.actResultLogService2 = actResultLogService2;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">invoke</span><span class="params">(Map&lt;Integer, String&gt; data, AnalysisContext context)</span> &#123;</span><br><span class="line">        <span class="comment">//数据add进入集合</span></span><br><span class="line">        dataList.add(data);</span><br><span class="line">        <span class="comment">//size是否为100000条:这里其实就是分批.当数据等于10w的时候执行一次插入</span></span><br><span class="line">        <span class="keyword">if</span> (dataList.size() &gt;= ExcelConstants.GENERAL_ONCE_SAVE_TO_DB_ROWS) &#123;</span><br><span class="line">            <span class="comment">//存入数据库:数据小于1w条使用Mybatis的批量插入即可;</span></span><br><span class="line">            saveData();</span><br><span class="line">            <span class="comment">//清理集合便于GC回收</span></span><br><span class="line">            dataList.clear();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存数据到DB</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@MethodName</span>: saveData</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">saveData</span><span class="params">()</span> &#123;</span><br><span class="line">        actResultLogService2.import2DBFromExcel10w(dataList);</span><br><span class="line">        dataList.clear();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Excel中所有数据解析完毕会调用此方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>: context</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@MethodName</span>: doAfterAllAnalysed</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doAfterAllAnalysed</span><span class="params">(AnalysisContext context)</span> &#123;</span><br><span class="line">        saveData();</span><br><span class="line">        dataList.clear();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//JDBC工具类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCDruidUtils</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DataSource dataSource;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">   创建数据Properties集合对象加载加载配置文件</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">pro</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        <span class="comment">//加载数据库连接池对象</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//获取数据库连接池对象</span></span><br><span class="line">            pro.load(JDBCDruidUtils.class.getClassLoader().getResourceAsStream(<span class="string">&quot;druid.properties&quot;</span>));</span><br><span class="line">            dataSource = DruidDataSourceFactory.createDataSource(pro);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    获取连接</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="keyword">return</span> dataSource.getConnection();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关闭conn,和 statement独对象资源</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> connection</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> statement</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@MethodName</span>: close</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">(Connection connection, Statement statement)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (connection != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (statement != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                statement.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关闭 conn , statement 和resultset三个对象资源</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> connection</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> statement</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> resultSet</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@MethodName</span>: close</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">(Connection connection, Statement statement, ResultSet resultSet)</span> &#123;</span><br><span class="line">        close(connection, statement);</span><br><span class="line">        <span class="keyword">if</span> (resultSet != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                resultSet.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    获取连接池对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> DataSource <span class="title function_">getDataSource</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Service中具体业务逻辑</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试用Excel导入超过10w条数据,经过测试发现,使用Mybatis的批量插入速度非常慢,所以这里可以使用 数据分批+JDBC分批插入+事务来继续插入速度会非常快</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@MethodName</span>: import2DBFromExcel10w</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>: java.util.Map&lt;java.lang.String, java.lang.Object&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">import2DBFromExcel10w</span><span class="params">(List&lt;Map&lt;Integer, String&gt;&gt; dataList)</span> &#123;</span><br><span class="line">    HashMap&lt;String, Object&gt; result = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//结果集中数据为0时,结束方法.进行下一次调用</span></span><br><span class="line">    <span class="keyword">if</span> (dataList.size() == <span class="number">0</span>) &#123;</span><br><span class="line">        result.put(<span class="string">&quot;empty&quot;</span>, <span class="string">&quot;0000&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//JDBC分批插入+事务操作完成对10w数据的插入</span></span><br><span class="line">    <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(dataList.size() + <span class="string">&quot;条,开始导入到数据库时间:&quot;</span> + startTime + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line">        conn = JDBCDruidUtils.getConnection();</span><br><span class="line">        <span class="comment">//控制事务:默认不提交</span></span><br><span class="line">        conn.setAutoCommit(<span class="literal">false</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into ACT_RESULT_LOG (onlineseqid,businessid,becifno,ivisresult,createdby,createddate,updateby,updateddate,risklevel) values&quot;</span>;</span><br><span class="line">        sql += <span class="string">&quot;(?,?,?,?,?,?,?,?,?)&quot;</span>;</span><br><span class="line">        ps = conn.prepareStatement(sql);</span><br><span class="line">        <span class="comment">//循环结果集:这里循环不支持&quot;烂布袋&quot;表达式</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; dataList.size(); i++) &#123;</span><br><span class="line">            Map&lt;Integer, String&gt; item = dataList.get(i);</span><br><span class="line">            ps.setString(<span class="number">1</span>, item.get(<span class="number">0</span>));</span><br><span class="line">            ps.setString(<span class="number">2</span>, item.get(<span class="number">1</span>));</span><br><span class="line">            ps.setString(<span class="number">3</span>, item.get(<span class="number">2</span>));</span><br><span class="line">            ps.setString(<span class="number">4</span>, item.get(<span class="number">3</span>));</span><br><span class="line">            ps.setString(<span class="number">5</span>, item.get(<span class="number">4</span>));</span><br><span class="line">            ps.setTimestamp(<span class="number">6</span>, <span class="keyword">new</span> <span class="title class_">Timestamp</span>(System.currentTimeMillis()));</span><br><span class="line">            ps.setString(<span class="number">7</span>, item.get(<span class="number">6</span>));</span><br><span class="line">            ps.setTimestamp(<span class="number">8</span>, <span class="keyword">new</span> <span class="title class_">Timestamp</span>(System.currentTimeMillis()));</span><br><span class="line">            ps.setString(<span class="number">9</span>, item.get(<span class="number">8</span>));</span><br><span class="line">            <span class="comment">//将一组参数添加到此 PreparedStatement 对象的批处理命令中。</span></span><br><span class="line">            ps.addBatch();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//执行批处理</span></span><br><span class="line">        ps.executeBatch();</span><br><span class="line">        <span class="comment">//手动提交事务</span></span><br><span class="line">        conn.commit();</span><br><span class="line">        <span class="type">long</span> <span class="variable">endTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(dataList.size() + <span class="string">&quot;条,结束导入到数据库时间:&quot;</span> + endTime + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line">        System.out.println(dataList.size() + <span class="string">&quot;条,导入用时:&quot;</span> + (endTime - startTime) + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line">        result.put(<span class="string">&quot;success&quot;</span>, <span class="string">&quot;1111&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        result.put(<span class="string">&quot;exception&quot;</span>, <span class="string">&quot;0000&quot;</span>);</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">//关连接</span></span><br><span class="line">        JDBCDruidUtils.close(conn, ps);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;excel导入&quot;&gt;&lt;a href=&quot;#excel导入&quot; class=&quot;headerlink&quot; title=&quot;excel导入&quot;&gt;&lt;/a&gt;excel导入&lt;/h1&gt;&lt;h4 id=&quot;百万数据导入&quot;&gt;&lt;a href=&quot;#百万数据导入&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="springboot" scheme="http://duanyushuai.github.io/categories/springboot/"/>
    
    
    <category term="springboot" scheme="http://duanyushuai.github.io/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>设计模式</title>
    <link href="http://duanyushuai.github.io/2022/11/08/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://duanyushuai.github.io/2022/11/08/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-11-08T09:21:31.529Z</published>
    <updated>2022-11-11T15:13:58.258Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><h2 id="1-创建型模式"><a href="#1-创建型模式" class="headerlink" title="1.创建型模式"></a>1.创建型模式</h2><h4 id="1-单例模式"><a href="#1-单例模式" class="headerlink" title="1. 单例模式"></a>1. 单例模式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton singleton;  </span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span> <span class="params">()</span>&#123;&#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getSingleton</span><span class="params">()</span> &#123;  </span><br><span class="line">    <span class="keyword">if</span> (singleton == <span class="literal">null</span>) &#123;  </span><br><span class="line">        <span class="keyword">synchronized</span> (Singleton.class) &#123;  </span><br><span class="line">        <span class="keyword">if</span> (singleton == <span class="literal">null</span>) &#123;  </span><br><span class="line">            singleton = <span class="keyword">new</span> <span class="title class_">Singleton</span>();  </span><br><span class="line">        &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> singleton;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-原型"><a href="#2-原型" class="headerlink" title="2.原型"></a>2.原型</h4><p>创建重复对象 实现接口Cloneable</p><h4 id="3-工厂"><a href="#3-工厂" class="headerlink" title="3.工厂"></a>3.工厂</h4><p>**简单工厂 **</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 工厂的产品</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractCar</span> &#123;</span><br><span class="line"></span><br><span class="line">    String engine;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MiniCar</span> <span class="keyword">extends</span> <span class="title class_">AbstractCar</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MiniCar</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.engine = <span class="string">&quot;四缸水平对置发动机&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(engine+<span class="string">&quot;--&gt; 嘟嘟嘟...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 具体产品</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VanCar</span> <span class="keyword">extends</span> <span class="title class_">AbstractCar</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">VanCar</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.engine = <span class="string">&quot;单杠柴油机&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(engine+<span class="string">&quot;--》嗒嗒嗒....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"> * 简单工厂</span><br><span class="line"> * <span class="number">1</span>、产品数量极少</span><br><span class="line"> */</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WuLinSimpleFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> type  Class: 好像具有扩展性，但是没有解决实际问题</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> AbstractCar <span class="title function_">newCar</span><span class="params">(String type)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//核心方法：一切从简</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;van&quot;</span>.equals(type))&#123;</span><br><span class="line">            <span class="comment">// 钣金、喷漆、放发动机、申请环保</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">VanCar</span>();</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;mini&quot;</span>.equals(type))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MiniCar</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//.....</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//更多的产品，违反开闭原则。应该直接扩展出一个类来造</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-建造者"><a href="#4-建造者" class="headerlink" title="4.建造者"></a>4.建造者</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//builder  lombok</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-结构模式"><a href="#2-结构模式" class="headerlink" title="2.结构模式"></a>2.结构模式</h2><h4 id="1-适配器模式"><a href="#1-适配器模式" class="headerlink" title="1.适配器模式"></a>1.适配器模式</h4><p>已有两个接口，在不改变两个接口的情况下，完成两个接口的合并</p><p><img src="/../img/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F1.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 继承的方式：类结构模型，适配转换到了翻译器的功能上</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JPMoviePlayerAdapter</span> <span class="keyword">extends</span> <span class="title class_">Zh_JPTranslator</span> <span class="keyword">implements</span> <span class="title class_">Player</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Player target;<span class="comment">//被适配对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JPMoviePlayerAdapter</span><span class="params">(Player target)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">play</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">play</span> <span class="operator">=</span> target.play();</span><br><span class="line">        <span class="comment">//转换字幕</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">translate</span> <span class="operator">=</span> translate(play);</span><br><span class="line">        System.out.println(<span class="string">&quot;日文：&quot;</span>+translate);</span><br><span class="line">        <span class="keyword">return</span> play;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.design.structural.adapter.obj;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.design.structural.adapter.Player;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.design.structural.adapter.Translator;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.design.structural.adapter.Zh_JPTranslator;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 组合的方式：对象结构模型，适配转换到了翻译器的功能上</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * （继承、组合）、封装、多态</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JPMoviePlayerAdapter</span> <span class="keyword">implements</span> <span class="title class_">Player</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//组合的方式</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Translator</span> <span class="variable">translator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Zh_JPTranslator</span>();</span><br><span class="line">    <span class="keyword">private</span> Player target;<span class="comment">//被适配对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JPMoviePlayerAdapter</span><span class="params">(Player target)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">play</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">play</span> <span class="operator">=</span> target.play();</span><br><span class="line">        <span class="comment">//转换字幕</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">translate</span> <span class="operator">=</span> translator.translate(play);</span><br><span class="line">        System.out.println(<span class="string">&quot;日文：&quot;</span>+translate);</span><br><span class="line">        <span class="keyword">return</span> play;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-桥接模式"><a href="#2-桥接模式" class="headerlink" title="2. 桥接模式"></a>2. 桥接模式</h4><p>真正引起一个类变换的维度直接抽取出来，通过组合的方式侨接起来</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1、抽象手机类</span></span><br><span class="line"><span class="comment"> *  手机有各种销售渠道价格都不一样</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractPhone</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//桥接在此.....设计期间就得想好</span></span><br><span class="line">    <span class="comment">//桥接+适配器 ...</span></span><br><span class="line">    AbstractSale sale; <span class="comment">//分离渠道【桥接的关注点】</span></span><br><span class="line"><span class="comment">//    abstract int getPrice();  如果这么写需要多少个实现。违反开闭原则</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前手机的描述</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">abstract</span> String <span class="title function_">getPhone</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSale</span><span class="params">(AbstractSale sale)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sale = sale;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 抽象销售渠道</span></span><br><span class="line"><span class="comment"> * PhoneOnSale  ==howToSale</span></span><br><span class="line"><span class="comment"> * PhoneOffSale == howToSale</span></span><br><span class="line"><span class="comment"> * PhoneStudentSale = howToSale</span></span><br><span class="line"><span class="comment"> * PhonePDD == howToSale</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractSale</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String type;</span><br><span class="line">    <span class="keyword">private</span> Integer price;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AbstractSale</span><span class="params">(String type,Integer price)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.type = type;</span><br><span class="line">        <span class="built_in">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">getSaleInfo</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;渠道：&quot;</span>+type+<span class="string">&quot;==&gt;&quot;</span>+<span class="string">&quot;价格：&quot;</span>+price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">howToSale</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//都不一样</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3-装饰器模式"><a href="#3-装饰器模式" class="headerlink" title="3. 装饰器模式"></a>3. 装饰器模式</h4><p>增强一个类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//wrapper Pattern</span></span><br><span class="line"><span class="comment">//已有的类功能不够用时，增强方法，当引用第三方就是适配器了</span></span><br></pre></td></tr></table></figure><h4 id="4-代理"><a href="#4-代理" class="headerlink" title="4.代理"></a>4.代理</h4><p><strong>动态代理</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdkTiktokProxy</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> T target;</span><br><span class="line">    <span class="comment">//接受被代理对象</span></span><br><span class="line">    JdkTiktokProxy(T target)&#123;</span><br><span class="line">        <span class="built_in">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取被代理对象的  代理对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> t</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>&lt;T&gt; T <span class="title function_">getProxy</span><span class="params">(T t)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * ClassLoader loader, 当前被代理对象的类加载器</span></span><br><span class="line"><span class="comment">         * Class&lt;?&gt;[] interfaces, 当前被代理对象所实现的所有接口</span></span><br><span class="line"><span class="comment">         * InvocationHandler h,</span></span><br><span class="line"><span class="comment">         *  当前被代理对象执行目标方法的时候我们使用h可以定义拦截增强方法</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> Proxy.newProxyInstance(</span><br><span class="line">                t.getClass().getClassLoader(),</span><br><span class="line">                t.getClass().getInterfaces(), <span class="comment">//必须接口</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">JdkTiktokProxy</span>(t));</span><br><span class="line">        <span class="keyword">return</span> (T)o;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义目标方法的拦截逻辑；每个方法都会进来的</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> proxy</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> method</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Throwable</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy,</span></span><br><span class="line"><span class="params">                         Method method,</span></span><br><span class="line"><span class="params">                         Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//反射执行</span></span><br><span class="line">        System.out.println(<span class="string">&quot;真正执行被代理对象的方法&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">invoke</span> <span class="operator">=</span> method.invoke(target, args);</span><br><span class="line">        System.out.println(<span class="string">&quot;返回值：一堆美女&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> invoke;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 动态代理模式：</span></span><br><span class="line"><span class="comment"> * JDK要求被代理对象必须有接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 代理对象和目标对象的相同点在于都是同一个接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ManTikTok</span> <span class="variable">leiTikTok</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LeiTikTok</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 动态代理机制。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">ManTikTok</span> <span class="variable">proxy</span> <span class="operator">=</span> JdkTiktokProxy.getProxy(leiTikTok);</span><br><span class="line">        proxy.tiktok();</span><br><span class="line"></span><br><span class="line">        ((SellTikTok)proxy).sell();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//能不能代理被代理对象本类自己的方法?proxy只能转成接口类</span></span><br><span class="line"><span class="comment">//        ((LeiTikTok)proxy).haha();</span></span><br><span class="line">        System.out.println(Arrays.asList(proxy.getClass().getInterfaces()));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>cglib</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1、使用cglib帮我们创建出代理对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CglibProxy</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//为任意对象创建代理</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>&lt;T&gt; T <span class="title function_">createProxy</span><span class="params">(T t)</span>&#123;</span><br><span class="line">        <span class="comment">//1、创建一个增强器</span></span><br><span class="line">        <span class="type">Enhancer</span> <span class="variable">enhancer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Enhancer</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2、设置要增强哪个个类的功能。增强器为这个类动态创建一个子类</span></span><br><span class="line">        enhancer.setSuperclass(t.getClass());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3、设置回调</span></span><br><span class="line">        enhancer.setCallback(<span class="keyword">new</span> <span class="title class_">MethodInterceptor</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Object <span class="title function_">intercept</span><span class="params">(Object obj,</span></span><br><span class="line"><span class="params">                                    Method method,  //为了能获取到原方法的一些元数据信息</span></span><br><span class="line"><span class="params">                                    Object[] args,</span></span><br><span class="line"><span class="params">                                    MethodProxy proxy)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                <span class="comment">//编写拦截的逻辑</span></span><br><span class="line">                System.out.println(<span class="string">&quot;cglib上场le .......xxx&quot;</span>);</span><br><span class="line">                <span class="comment">//当前方法的信息</span></span><br><span class="line"><span class="comment">//                method.get</span></span><br><span class="line"><span class="comment">//                method.getAnnotation()</span></span><br><span class="line">                <span class="comment">//目标方法进行执行</span></span><br><span class="line">                <span class="type">Object</span> <span class="variable">invoke</span> <span class="operator">=</span> proxy.invokeSuper(obj,args);</span><br><span class="line">                <span class="keyword">return</span> invoke;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> enhancer.create();</span><br><span class="line">        <span class="keyword">return</span> (T) o;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="5-外观模式"><a href="#5-外观模式" class="headerlink" title="5.外观模式"></a>5.外观模式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//去医院看病，可能要去挂号、门诊、划价、取药，让患者或患者家属觉得很复杂，如果有提供接待人员，只让接待人员来处理，就很方便。以此类比......</span></span><br><span class="line"><span class="comment">//JAVA 的三层开发模式。</span></span><br><span class="line"><span class="comment">//分布式系统的网关</span></span><br><span class="line"><span class="comment">//Tomcat源码中的RequestFacade干什么的？</span></span><br><span class="line"><span class="comment">//......</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="6-组合模式"><a href="#6-组合模式" class="headerlink" title="6.组合模式"></a>6.组合模式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//树形结构  层级结构</span></span><br></pre></td></tr></table></figure><h4 id="7-享元模式"><a href="#7-享元模式" class="headerlink" title="7.享元模式"></a>7.享元模式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//就是线程池</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 足道店：这相当于享元工厂</span></span><br><span class="line"><span class="comment"> *      店里面很多服务员。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 享元和原型</span></span><br><span class="line"><span class="comment"> * 1、享元返回的是这个本人。</span></span><br><span class="line"><span class="comment"> * 2、原型返回的是克隆人。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ZuDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String,AbstractWaitressFlyweight&gt; pool = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//享元，池子中有对象</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="type">BeautifulWaitress</span> <span class="variable">waitress</span> <span class="operator">=</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">BeautifulWaitress</span>(<span class="string">&quot;1111&quot;</span>,<span class="string">&quot;张三&quot;</span>,<span class="number">18</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">BeautifulWaitress</span> <span class="variable">waitress2</span> <span class="operator">=</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">BeautifulWaitress</span>(<span class="string">&quot;9527&quot;</span>,<span class="string">&quot;李四&quot;</span>,<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        pool.put(waitress.id,waitress);</span><br><span class="line">        pool.put(waitress2.id,waitress2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addWaitress</span><span class="params">(AbstractWaitressFlyweight waitressFlyweight)</span>&#123;</span><br><span class="line">        pool.put(UUID.randomUUID().toString(),waitressFlyweight);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> AbstractWaitressFlyweight <span class="title function_">getWaitress</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="type">AbstractWaitressFlyweight</span> <span class="variable">flyweight</span> <span class="operator">=</span> pool.get(name);</span><br><span class="line">        <span class="keyword">if</span>(flyweight == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span> (AbstractWaitressFlyweight value : pool.values()) &#123;</span><br><span class="line">                <span class="comment">//当前共享对象能否是否</span></span><br><span class="line">                <span class="keyword">if</span>(value.isCanService())&#123;</span><br><span class="line">                    <span class="keyword">return</span> value;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> flyweight;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 具体享元类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BeautifulWaitress</span> <span class="keyword">extends</span> <span class="title class_">AbstractWaitressFlyweight</span>&#123;</span><br><span class="line">    String id;<span class="comment">//工号</span></span><br><span class="line">    String name;<span class="comment">//名字</span></span><br><span class="line">    <span class="type">int</span> age;<span class="comment">//年龄</span></span><br><span class="line">    <span class="comment">//以上是不变的</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">service</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;工号：&quot;</span>+id+<span class="string">&quot;；&quot;</span>+name+<span class="string">&quot; &quot;</span>+age+<span class="string">&quot; 正在为您服务...&quot;</span>);</span><br><span class="line">        <span class="comment">//改变外部状态</span></span><br><span class="line">        <span class="built_in">this</span>.canService = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">end</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;工号：&quot;</span>+id+<span class="string">&quot;；&quot;</span>+name+<span class="string">&quot; &quot;</span>+age+<span class="string">&quot; 服务结束...请给五星好评&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.canService = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-行为模式"><a href="#3-行为模式" class="headerlink" title="3.行为模式"></a>3.行为模式</h2><h4 id="1-模版方法"><a href="#1-模版方法" class="headerlink" title="1.模版方法"></a>1.模版方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1、定义模板</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">CookTemplate</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义算法：  定义好了模板</span></span><br><span class="line"><span class="comment">     * 父类可以实现某些步骤</span></span><br><span class="line"><span class="comment">     * 留关键给子类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cook</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//定义算法步骤</span></span><br><span class="line">        heating();   <span class="comment">//v</span></span><br><span class="line">        addfood();</span><br><span class="line">        addsalt();</span><br><span class="line">        stirfry();   <span class="comment">//v</span></span><br><span class="line">        end();      <span class="comment">//v</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//加热方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">heating</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;开火...&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加食物</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">addfood</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//加盐</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">addsalt</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//翻炒</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">stirfry</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;翻炒中...&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//出锅</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">end</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;出锅....&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-策略模式"><a href="#2-策略模式" class="headerlink" title="2.策略模式"></a>2.策略模式</h4><p>定义整体方法，可以将一部分抽离出来，装配策略</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 环境类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TeamGNR</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//抽取游戏策略算法，并进行引用</span></span><br><span class="line">    <span class="keyword">private</span> GameStrategy gameStrategy;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setGameStrategy</span><span class="params">(GameStrategy gameStrategy)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.gameStrategy = gameStrategy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startGame</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;游戏开始.....&quot;</span>);</span><br><span class="line">        <span class="comment">//游戏策略</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        gameStrategy.warStrategy();</span><br><span class="line">        System.out.println(<span class="string">&quot;win......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-状态模式"><a href="#3-状态模式" class="headerlink" title="3.状态模式"></a>3.状态模式</h4><p>状态机</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 竞赛状态</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MatchState</span> <span class="keyword">implements</span> <span class="title class_">TeamState</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">playGame</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;全力以赴打比赛....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//状态模式的核心</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> TeamState <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">VocationState</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="4-中介者模式"><a href="#4-中介者模式" class="headerlink" title="4.中介者模式"></a>4.中介者模式</h4><p><img src="/../img/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F2.png"></p><p><img src="/../img/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F3.png"></p><h4 id="5-观察者模式"><a href="#5-观察者模式" class="headerlink" title="5.观察者模式"></a>5.观察者模式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">**</span><br><span class="line"> * 抽象观察者</span><br><span class="line"> */</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractFans</span> &#123;</span><br><span class="line"></span><br><span class="line">    List&lt;AbstractTikToker&gt; tikTokers;<span class="comment">//双向观察</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">acceptMsg</span><span class="params">(String msg)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">follow</span><span class="params">(AbstractTikToker tikToker)</span>&#123;</span><br><span class="line">        <span class="comment">//主播增粉了</span></span><br><span class="line">        tikToker.addFans(<span class="built_in">this</span>);</span><br><span class="line"><span class="comment">//        for (AbstractTikToker toker : tikTokers) &#123;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HumanFans</span> <span class="keyword">extends</span> <span class="title class_">AbstractFans</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">acceptMsg</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;主播说：&quot;</span>+msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 抖音主播</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 粉丝观察主播....</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractTikToker</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加粉丝</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">addFans</span><span class="params">(AbstractFans fans)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通知粉丝</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">notifyFans</span><span class="params">(String msg)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 主播</span></span><br><span class="line"><span class="comment"> * 双向观察</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MMTikToker</span>  <span class="keyword">extends</span> <span class="title class_">AbstractTikToker</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1、观察者的核心1</span></span><br><span class="line">    List&lt;AbstractFans&gt; fansList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">startSell</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;雷丰阳... 开始卖货...源码设计课&quot;</span>);</span><br><span class="line">        notifyFans(<span class="string">&quot;我开始卖东西了，是源码设计课，只要666&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">endSell</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;雷丰阳... 结束卖货...源码设计课&quot;</span>);</span><br><span class="line">        notifyFans(<span class="string">&quot;课已经卖完了，记得五星好评...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">addFans</span><span class="params">(AbstractFans fans)</span> &#123;</span><br><span class="line">        fansList.add(fans);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">notifyFans</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        <span class="comment">//1、所有粉丝拿来通知</span></span><br><span class="line">        <span class="keyword">for</span> (AbstractFans fans : fansList) &#123;</span><br><span class="line">            fans.acceptMsg(msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="6-备忘录模式"><a href="#6-备忘录模式" class="headerlink" title="6.备忘录模式"></a>6.备忘录模式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//什么场景用到？</span></span><br><span class="line"><span class="comment">//游戏存档</span></span><br><span class="line"><span class="comment">//数据库保存点事务（savepoint）</span></span><br><span class="line"><span class="comment">//session活化钝化</span></span><br></pre></td></tr></table></figure><p><img src="/../img/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F4.png"></p><h4 id="7-解释器模式"><a href="#7-解释器模式" class="headerlink" title="7.解释器模式"></a>7.解释器模式</h4><p><img src="/Users/duanyushuai/blog/source/img/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F5.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 终结符表达式</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 多少种解析规则就需要定义多少种规则类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TerminalExpression</span> <span class="keyword">extends</span> <span class="title class_">IDCardExpression</span> &#123;</span><br><span class="line">    String[] data;</span><br><span class="line">    String symbol; <span class="comment">//定义解析用的符号如  ： -</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TerminalExpression</span><span class="params">(String[] data,String symbol)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">        <span class="built_in">this</span>.symbol = symbol;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">interpret</span><span class="params">(String expression)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 非终结表达式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrExpression</span> <span class="keyword">extends</span> <span class="title class_">IDCardExpression</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//组合两个终结表达式。最终的判断结果是终结表达式判断出来的，这个表达式只是一个桥梁</span></span><br><span class="line">    <span class="keyword">private</span> IDCardExpression cityExp;</span><br><span class="line">    <span class="keyword">private</span> IDCardExpression typeExp;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">OrExpression</span><span class="params">(IDCardExpression cityExp, IDCardExpression typeExp)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.cityExp = cityExp;</span><br><span class="line">        <span class="built_in">this</span>.typeExp = typeExp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">interpret</span><span class="params">(String expression)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span>  cityExp.interpret(expression) || typeExp.interpret(expression);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="9-命令模式"><a href="#9-命令模式" class="headerlink" title="9.命令模式"></a>9.命令模式</h4><p>mvc就是命令模式</p><h4 id="10-迭代器模式"><a href="#10-迭代器模式" class="headerlink" title="10. 迭代器模式"></a>10. 迭代器模式</h4><h4 id="11-访问者模式"><a href="#11-访问者模式" class="headerlink" title="11.访问者模式"></a>11.访问者模式</h4><p> 将作用于某种数据结构中的各元素的操作分离出来封装成独立的类，使其在不改变数据结构的前提下可以添加作用于这些元素的新的操作，为数据结构中的每个元素提供多种访问方式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CPU</span>  <span class="keyword">extends</span> <span class="title class_">Hardware</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CPU</span><span class="params">(String command)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(command);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(Vistor vistor)</span> &#123;</span><br><span class="line">        <span class="comment">//软件包要能访问当前硬件</span></span><br><span class="line">        vistor.visitCPU(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Disk</span> <span class="keyword">extends</span> <span class="title class_">Hardware</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Disk</span><span class="params">(String command)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(command);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(Vistor vistor)</span> &#123;</span><br><span class="line">        vistor.visitDisk(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span>  <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Hardware</span> &#123;</span><br><span class="line">    String command;<span class="comment">//封装硬件的处理指令</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Hardware</span><span class="params">(String command)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.command = command;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">work</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(command);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义接受软件升级包的方法。这个方法应该具体硬件去实现</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(Vistor vistor)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 升级包可以更改指令</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UpdatePackage</span> <span class="keyword">implements</span> <span class="title class_">Vistor</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">visitCPU</span><span class="params">(CPU cpu)</span> &#123;</span><br><span class="line">        cpu.command+=<span class="string">&quot;；正在联网查询...&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">visitDisk</span><span class="params">(Disk disk)</span> &#123;</span><br><span class="line">        disk.command+=<span class="string">&quot;；正在保存记录&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Vistor</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">visitCPU</span><span class="params">(CPU cpu)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">visitDisk</span><span class="params">(Disk disk)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="12-责任链模式"><a href="#12-责任链模式" class="headerlink" title="12.责任链模式"></a>12.责任链模式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FilterChain</span> <span class="keyword">implements</span>  <span class="title class_">Filter</span>&#123;</span><br><span class="line">    List&lt;Filter&gt; filterList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">int</span> <span class="variable">cur</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Filter filter)</span>&#123;</span><br><span class="line">        filterList.add(filter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(Request req, Response res, FilterChain chain)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Filter</span> <span class="variable">filter</span> <span class="operator">=</span> filterList.get(cur);</span><br><span class="line">        cur++;</span><br><span class="line">        filter.doFilter(req,res,chain);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(Request req,Response res,FilterChain chain)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[toc]&lt;/p&gt;
&lt;h1 id=&quot;设计模式&quot;&gt;&lt;a href=&quot;#设计模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式&quot;&gt;&lt;/a&gt;设计模式&lt;/h1&gt;&lt;h2 id=&quot;1-创建型模式&quot;&gt;&lt;a href=&quot;#1-创建型模式&quot; class=&quot;headerlin</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>树形结构</title>
    <link href="http://duanyushuai.github.io/2022/11/04/%E6%A0%91%E5%BD%A2%E6%8E%A5%E5%8F%A3/"/>
    <id>http://duanyushuai.github.io/2022/11/04/%E6%A0%91%E5%BD%A2%E6%8E%A5%E5%8F%A3/</id>
    <published>2022-11-04T09:20:20.358Z</published>
    <updated>2022-11-06T02:45:36.918Z</updated>
    
    <content type="html"><![CDATA[<h1 id="树形结构怎么做"><a href="#树形结构怎么做" class="headerlink" title="树形结构怎么做"></a>树形结构怎么做</h1><p>**实体类 **</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>变成派大星</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer  Id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer pid;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Node&gt; treeNode = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(<span class="type">int</span> id, <span class="type">int</span> pid)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.Id = id;</span><br><span class="line">        <span class="built_in">this</span>.pid = pid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(<span class="type">int</span> id, <span class="type">int</span> pid, String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(id, pid);</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> List&lt;Node&gt; <span class="title function_">handleTreeVo</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">Node</span> <span class="variable">first</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="number">1</span>, <span class="number">0</span>, <span class="string">&quot;first&quot;</span>);</span><br><span class="line">  <span class="type">Node</span> <span class="variable">second</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="number">2</span>, <span class="number">1</span>, <span class="string">&quot;second&quot;</span>);</span><br><span class="line"> <span class="type">Node</span> <span class="variable">third</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="number">3</span>, <span class="number">2</span>, <span class="string">&quot;third&quot;</span>);</span><br><span class="line"> <span class="type">Node</span> <span class="variable">second001</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="number">4</span>, <span class="number">1</span>, <span class="string">&quot;second001&quot;</span>);</span><br><span class="line"> <span class="type">Node</span> <span class="variable">third001</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="number">5</span>, <span class="number">4</span>, <span class="string">&quot;third001&quot;</span>);</span><br><span class="line"> <span class="comment">// 组装树状数据</span></span><br><span class="line">List&lt;Node&gt; nodes = Arrays.asList(first,second,third,second001,third001);</span><br><span class="line"> <span class="keyword">return</span> buildTree(nodes);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> List&lt;Node&gt; <span class="title function_">buildTree</span><span class="params">(List&lt;Node&gt; nodes)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将这些非顶级节点的数据按pid进行分组   这个是根据pid为key 第一步过滤非Pid=0的节点  第二步进行分组</span></span><br><span class="line">     Map&lt;Integer, List&lt;Node&gt;&gt; nodeMap = nodes.stream().filter(node-&gt;node.getPid()!=<span class="number">0</span>)</span><br><span class="line">    .collect(Collectors.groupingBy(node -&gt; node.getPid()));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//循环设置对应的子节点（根据id = pid） 上一步以pid为Key 所以就直接循环获取</span></span><br><span class="line">    nodes.forEach(node -&gt; node.setTreeNode(nodeMap.get(node.getId())));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//过滤第一层不是Pid为零的数据 也就是没有根节点的数据</span></span><br><span class="line">    List&lt;Node&gt; treeNode = nodes.stream().filter(node -&gt; node.getPid() == <span class="number">0</span>).collect(Collectors.toList());</span><br><span class="line">    <span class="keyword">return</span> treeNode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cn.hutool.core.collection.CollUtil;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.toolkit.CollectionUtils;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.function.BiConsumer;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Function;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Predicate;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 变成派大星</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TreeUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> list             源数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> setChildListFn   设置递归的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> idFn             获取id的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pidFn            获取父id的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> getRootCondition 获取根节点的提哦啊见</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 将List 转换成 Tree</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;M, T&gt; List&lt;M&gt; <span class="title function_">listToTree</span><span class="params">(List&lt;M&gt; list,</span></span><br><span class="line"><span class="params">                                            Function&lt;M, T&gt; idFn,</span></span><br><span class="line"><span class="params">                                            Function&lt;M, T&gt; pidFn,</span></span><br><span class="line"><span class="params">                                            BiConsumer&lt;M, List&lt;M&gt;&gt; setChildListFn,</span></span><br><span class="line"><span class="params">                                            Predicate&lt;M&gt; getRootCondition)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (CollUtil.isEmpty(list)) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        Map&lt;T, List&lt;M&gt;&gt; listMap = list.stream().collect(Collectors.groupingBy(pidFn));</span><br><span class="line">        list.forEach(model -&gt; setChildListFn.accept(model, listMap.get(idFn.apply(model))));</span><br><span class="line">        <span class="keyword">return</span> list.stream().filter(getRootCondition).collect(Collectors.toList());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;M&gt; List&lt;M&gt; <span class="title function_">treeToList</span><span class="params">(List&lt;M&gt; source,</span></span><br><span class="line"><span class="params">                                         Function&lt;M, List&lt;M&gt;&gt; getChildListFn,</span></span><br><span class="line"><span class="params">                                         BiConsumer&lt;M, List&lt;M&gt;&gt; setChildListFn,</span></span><br><span class="line"><span class="params">                                         Predicate&lt;M&gt; getRootCondition)</span> &#123;</span><br><span class="line">        List&lt;M&gt; target = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isNotEmpty(source)) &#123;</span><br><span class="line">            treeToList(source, target, getChildListFn);</span><br><span class="line">            target.forEach(model -&gt; setChildListFn.accept(model, <span class="literal">null</span>));</span><br><span class="line">            target.addAll(target.stream().filter(getRootCondition).collect(Collectors.toList()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> &lt;F&gt; <span class="keyword">void</span> <span class="title function_">treeToList</span><span class="params">(List&lt;F&gt; source,</span></span><br><span class="line"><span class="params">                                       List&lt;F&gt; target,</span></span><br><span class="line"><span class="params">                                       Function&lt;F, List&lt;F&gt;&gt; getChildListFn)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isNotEmpty(source)) &#123;</span><br><span class="line">            target.addAll(source);</span><br><span class="line">            source.forEach(model -&gt; &#123;</span><br><span class="line">                List&lt;F&gt; childList = getChildListFn.apply(model);</span><br><span class="line">                <span class="keyword">if</span> (CollectionUtils.isNotEmpty(childList)) &#123;</span><br><span class="line">                    treeToList(childList, target, getChildListFn);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Node&gt; <span class="title function_">handleTree</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">Node</span> <span class="variable">first</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="number">1</span>, <span class="number">0</span>, <span class="string">&quot;first&quot;</span>);</span><br><span class="line">    <span class="type">Node</span> <span class="variable">second</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="number">2</span>, <span class="number">1</span>, <span class="string">&quot;second&quot;</span>);</span><br><span class="line">    <span class="type">Node</span> <span class="variable">third</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="number">3</span>, <span class="number">2</span>, <span class="string">&quot;third&quot;</span>);</span><br><span class="line">    <span class="type">Node</span> <span class="variable">second001</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="number">4</span>, <span class="number">1</span>, <span class="string">&quot;second001&quot;</span>);</span><br><span class="line">    <span class="type">Node</span> <span class="variable">third001</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="number">5</span>, <span class="number">4</span>, <span class="string">&quot;third001&quot;</span>);</span><br><span class="line">    List&lt;Node&gt; nodes = Arrays.asList(first,second,third,second001,third001);</span><br><span class="line">    List&lt;Node&gt; nodeList = TreeUtils.listToTree(nodes, Node::getId, Node::getPid, Node::setTreeNode, (l) -&gt; l.getPid() == <span class="number">0</span>);</span><br><span class="line">     </span><br><span class="line">    <span class="comment">// 树状结构转换成 List 也就是还原数据</span></span><br><span class="line">    <span class="keyword">return</span> TreeUtils.treeToList(nodeList, Node::getTreeNode, Node::setTreeNode, (l) -&gt; l.getPid() == <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;树形结构怎么做&quot;&gt;&lt;a href=&quot;#树形结构怎么做&quot; class=&quot;headerlink&quot; title=&quot;树形结构怎么做&quot;&gt;&lt;/a&gt;树形结构怎么做&lt;/h1&gt;&lt;p&gt;**实体类 **&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>链表</title>
    <link href="http://duanyushuai.github.io/2022/10/26/%E7%AE%97%E6%B3%95/"/>
    <id>http://duanyushuai.github.io/2022/10/26/%E7%AE%97%E6%B3%95/</id>
    <published>2022-10-26T12:26:17.945Z</published>
    <updated>2022-11-03T10:53:46.135Z</updated>
    
    <content type="html"><![CDATA[<h1 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h1><h4 id="1-反转列表"><a href="#1-反转列表" class="headerlink" title="1. 反转列表"></a>1. 反转列表</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">public class ListNode &#123;</span></span><br><span class="line"><span class="comment">    int val;</span></span><br><span class="line"><span class="comment">    ListNode next = null;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    ListNode(int val) &#123;</span></span><br><span class="line"><span class="comment">        this.val = val;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">ReverseList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">rHead</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(-<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">while</span>(head!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">p</span> <span class="operator">=</span> head;</span><br><span class="line">            head = head.next;</span><br><span class="line">            p.next = rHead.next;</span><br><span class="line">            rHead.next = p;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> rHead.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">ReverseList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">newHead</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">temp</span> <span class="operator">=</span><span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">while</span>(head!=<span class="literal">null</span>)&#123;</span><br><span class="line">             temp = head.next;</span><br><span class="line">            head.next = newHead;</span><br><span class="line">            newHead = head;</span><br><span class="line">            head = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> newHead;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-列表执行区间内反转"><a href="#2-列表执行区间内反转" class="headerlink" title="2. 列表执行区间内反转"></a>2. 列表执行区间内反转</h4><p>将一个节点数为 size 链表 m 位置到 n 位置之间的区间反转，要求时间复杂度 O(n)<em>O</em>(<em>n</em>)，空间复杂度 O(1)<em>O</em>(1)。<br>例如：<br>给出的链表为 1\to 2 \to 3 \to 4 \to 5 \to NULL1→2→3→4→5→<em>N<strong>U</strong>L**L</em>, m&#x3D;2,n&#x3D;4<em>m</em>&#x3D;2,<em>n</em>&#x3D;4,<br>返回 1\to 4\to 3\to 2\to 5\to NULL1→4→3→2→5→<em>N<strong>U</strong>L**L</em>.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *   int val;</span></span><br><span class="line"><span class="comment"> *   ListNode next = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> head ListNode类 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> m int整型 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> n int整型 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> ListNode类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">       <span class="comment">// 解法一：双指针(两次遍历)</span></span><br><span class="line">       <span class="comment">//说明：方便理解，以下注释中将用left，right分别代替m,n节点 </span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">reverseBetween</span> <span class="params">(ListNode head, <span class="type">int</span> m, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">             <span class="comment">//设置虚拟头节点</span></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">dummyNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(-<span class="number">1</span>);</span><br><span class="line">        dummyNode.next = head;</span><br><span class="line"></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">pre</span> <span class="operator">=</span> dummyNode;</span><br><span class="line">        <span class="comment">//1.走left-1步到left的前一个节点</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m-<span class="number">1</span>;i++)&#123;</span><br><span class="line">            pre = pre.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.走roght-left+1步到right节点</span></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">rigthNode</span> <span class="operator">=</span> pre;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n-m+<span class="number">1</span>;i++)&#123;</span><br><span class="line">            rigthNode = rigthNode.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.截取出一个子链表</span></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">leftNode</span> <span class="operator">=</span> pre.next;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> rigthNode.next;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.切断链接</span></span><br><span class="line">        pre.next=<span class="literal">null</span>;</span><br><span class="line">        rigthNode.next=<span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.反转局部链表</span></span><br><span class="line">        reverseLinkedList(leftNode);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6.接回原来的链表</span></span><br><span class="line">        pre.next = rigthNode;</span><br><span class="line">        leftNode.next = cur;</span><br><span class="line">        <span class="keyword">return</span> dummyNode.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//反转局部链表</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">reverseLinkedList</span><span class="params">(ListNode head)</span>&#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">pre</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span>(cur!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//Cur_next 指向cur节点的下一个节点</span></span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">Cur_next</span> <span class="operator">=</span> cur.next;</span><br><span class="line">            cur.next = pre;</span><br><span class="line">            pre = cur;</span><br><span class="line">            cur = Cur_next ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3-链表每k组反转"><a href="#3-链表每k组反转" class="headerlink" title="3. 链表每k组反转"></a>3. 链表每k组反转</h4><p>将给出的链表中的节点每 k 个一组翻转，返回翻转后的链表<br>如果链表中的节点数不是 k 的倍数，将最后剩下的节点保持原样<br>你不能更改节点中的值，只能更改节点本身。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">reverseKGroup</span> <span class="params">(ListNode head, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="comment">//找到每次翻转的尾部</span></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">tail</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="comment">//遍历k次到尾部 </span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; k; i++)&#123; </span><br><span class="line">            <span class="comment">//如果不足k到了链表尾，直接返回，不翻转</span></span><br><span class="line">            <span class="keyword">if</span>(tail == <span class="literal">null</span>) </span><br><span class="line">                <span class="keyword">return</span> head;</span><br><span class="line">            tail = tail.next; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//翻转时需要的前序和当前节点</span></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">pre</span> <span class="operator">=</span> <span class="literal">null</span>; </span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="comment">//在到达当前段尾节点前</span></span><br><span class="line">        <span class="keyword">while</span>(cur != tail)&#123; </span><br><span class="line">            <span class="comment">//翻转</span></span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">temp</span> <span class="operator">=</span> cur.next; </span><br><span class="line">            cur.next = pre;</span><br><span class="line">            pre = cur;</span><br><span class="line">            cur = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//当前尾指向下一段要翻转的链表</span></span><br><span class="line">        head.next = reverseKGroup(tail, k); </span><br><span class="line">        <span class="keyword">return</span> pre;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="4-合并两个排序的链表"><a href="#4-合并两个排序的链表" class="headerlink" title="4. 合并两个排序的链表"></a>4. 合并两个排序的链表</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">public class ListNode &#123;</span></span><br><span class="line"><span class="comment">    int val;</span></span><br><span class="line"><span class="comment">    ListNode next = null;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    ListNode(int val) &#123;</span></span><br><span class="line"><span class="comment">        this.val = val;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">Merge</span><span class="params">(ListNode list1, ListNode list2)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(-<span class="number">1</span>);</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">head</span> <span class="operator">=</span> temp;</span><br><span class="line">        <span class="keyword">while</span> (list1 != <span class="literal">null</span> &amp;&amp; list2 != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (list1.val &lt;= list2.val) &#123;</span><br><span class="line">                temp.next = list1;</span><br><span class="line">                temp = temp.next;</span><br><span class="line">                list1 = list1.next;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                temp.next = list2;</span><br><span class="line">                temp = temp.next;</span><br><span class="line">                list2 = list2.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (list1 == <span class="literal">null</span>) &#123;</span><br><span class="line">            temp.next = list2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (list2 == <span class="literal">null</span>) &#123;</span><br><span class="line">            temp.next = list1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//递归</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">Merge</span><span class="params">(ListNode list1,ListNode list2)</span> &#123;</span><br><span class="line">        <span class="comment">// list1 list2为空的情况</span></span><br><span class="line">        <span class="keyword">if</span>(list1 == <span class="literal">null</span> || list2 == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> list1 != <span class="literal">null</span> ? list1 : list2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 两个链表元素依次对比</span></span><br><span class="line">        <span class="keyword">if</span>(list1.val &lt;= list2.val)&#123;</span><br><span class="line">            <span class="comment">// 递归计算 list1.next, list2</span></span><br><span class="line">            list1.next = Merge(list1.next, list2);</span><br><span class="line">            <span class="keyword">return</span> list1;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">// 递归计算 list1, list2.next</span></span><br><span class="line">            list2.next = Merge(list1, list2.next);</span><br><span class="line">            <span class="keyword">return</span> list2;</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-合并k个已排序的列表"><a href="#5-合并k个已排序的列表" class="headerlink" title="5. 合并k个已排序的列表"></a>5. 合并k个已排序的列表</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">mergeKLists</span><span class="params">(ArrayList&lt;ListNode&gt; lists)</span> &#123;</span><br><span class="line">        <span class="comment">//小顶堆</span></span><br><span class="line">        Queue&lt;ListNode&gt; pq = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;((v1, v2) -&gt; v1.val - v2.val);</span><br><span class="line">        <span class="comment">//遍历所有链表第一个元素</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; lists.size(); i++) &#123;</span><br><span class="line">            <span class="comment">//不为空则加入小顶堆</span></span><br><span class="line">            <span class="keyword">if</span> (lists.get(i) != <span class="literal">null</span>)</span><br><span class="line">                pq.offer(lists.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//加一个表头</span></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">res</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(-<span class="number">1</span>);</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">head</span> <span class="operator">=</span> res;</span><br><span class="line">        <span class="comment">//直到小顶堆为空</span></span><br><span class="line">        <span class="keyword">while</span> (!pq.isEmpty()) &#123;</span><br><span class="line">            <span class="comment">//取出最小的元素</span></span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">temp</span> <span class="operator">=</span> pq.poll();</span><br><span class="line">            <span class="comment">//连接</span></span><br><span class="line">            head.next = temp;</span><br><span class="line">            head = head.next;</span><br><span class="line">            <span class="comment">//每次取出链表的后一个元素加入小顶堆</span></span><br><span class="line">            <span class="keyword">if</span> (temp.next != <span class="literal">null</span>)</span><br><span class="line">                pq.add(temp.next);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//去掉表头</span></span><br><span class="line">        <span class="keyword">return</span> res.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="6-链表中的环的入口节点"><a href="#6-链表中的环的入口节点" class="headerlink" title="6. 链表中的环的入口节点"></a>6. 链表中的环的入口节点</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> public class ListNode &#123;</span></span><br><span class="line"><span class="comment">    int val;</span></span><br><span class="line"><span class="comment">    ListNode next = null;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    ListNode(int val) &#123;</span></span><br><span class="line"><span class="comment">        this.val = val;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">EntryNodeOfLoop</span><span class="params">(ListNode pHead)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (pHead == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">slow</span>  <span class="operator">=</span> pHead;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">fast</span> <span class="operator">=</span> pHead;</span><br><span class="line">        <span class="keyword">while</span> (fast != <span class="literal">null</span> &amp;&amp; fast.next != <span class="literal">null</span>) &#123;</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            <span class="keyword">if</span> (slow == fast)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (fast == <span class="literal">null</span> || fast.next == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        fast = pHead;</span><br><span class="line">        <span class="keyword">while</span> (fast != slow) &#123;</span><br><span class="line">            fast = fast.next;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> fast;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 哈希表 </span></span><br><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">EntryNodeOfLoop</span><span class="params">(ListNode pHead)</span> &#123;</span><br><span class="line">        <span class="comment">// 使用set来记录出现的结点</span></span><br><span class="line">        HashSet&lt;ListNode&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span>(pHead != <span class="literal">null</span>)&#123;</span><br><span class="line">           <span class="comment">// 当set中包含结点，说明第一次出现重复的结点，即环的入口结点</span></span><br><span class="line">            <span class="keyword">if</span>(set.contains(pHead))&#123;</span><br><span class="line">                <span class="keyword">return</span> pHead;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// set中加入未重复的结点</span></span><br><span class="line">            set.add(pHead);</span><br><span class="line">            pHead = pHead.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="7-删除链表最后K的节点"><a href="#7-删除链表最后K的节点" class="headerlink" title="7. 删除链表最后K的节点"></a>7. 删除链表最后K的节点</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *   int val;</span></span><br><span class="line"><span class="comment"> *   ListNode next = null;</span></span><br><span class="line"><span class="comment"> *   public ListNode(int val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *   &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pHead ListNode类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> k int整型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> ListNode类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">FindKthToTail</span> <span class="params">(ListNode pHead, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="comment">// write code here</span></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">temp</span> <span class="operator">=</span> pHead;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (temp == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> temp;</span><br><span class="line">            &#125;</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (temp != <span class="literal">null</span>) &#123;</span><br><span class="line">            pHead = pHead.next;</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pHead;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8-删除链表倒数第n的节点"><a href="#8-删除链表倒数第n的节点" class="headerlink" title="8.删除链表倒数第n的节点"></a>8.删除链表倒数第n的节点</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *   int val;</span></span><br><span class="line"><span class="comment"> *   ListNode next = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> head ListNode类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> n int整型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> ListNode类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">removeNthFromEnd</span> <span class="params">(ListNode head, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="comment">// write code here</span></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">temp</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n + <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (temp == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> head.next;</span><br><span class="line">            &#125;</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">pre</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span> (temp != <span class="literal">null</span>) &#123;</span><br><span class="line">            pre = pre.next;</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        pre.next = pre.next.next;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9-寻找两个链表公共节点"><a href="#9-寻找两个链表公共节点" class="headerlink" title="9. 寻找两个链表公共节点"></a>9. 寻找两个链表公共节点</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">FindFirstCommonNode</span><span class="params">(ListNode pHead1, ListNode pHead2)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">l1</span> <span class="operator">=</span> pHead1;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">l2</span> <span class="operator">=</span> pHead2;</span><br><span class="line">        <span class="keyword">while</span> (l1 != l2) &#123;</span><br><span class="line">            l1 = (l1 == <span class="literal">null</span>) ? pHead2 : l1.next;</span><br><span class="line">            l2 = (l2 == <span class="literal">null</span>) ? pHead1 : l2.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> l1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="10-链表相加"><a href="#10-链表相加" class="headerlink" title="10. 链表相加"></a>10. 链表相加</h4><p>例如：链表 1 为 9-&gt;3-&gt;7，链表 2 为 6-&gt;3，最后生成新的结果链表为 1-&gt;0-&gt;0-&gt;0。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.*;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *   int val;</span></span><br><span class="line"><span class="comment"> *   ListNode next = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> head1 ListNode类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> head2 ListNode类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> ListNode类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">addInList</span> <span class="params">(ListNode head1, ListNode head2)</span> &#123;</span><br><span class="line">        <span class="comment">// write code here</span></span><br><span class="line">        <span class="keyword">if</span> (head1 == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> head2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (head2 == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> head1;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        head1 = reverse(head1);</span><br><span class="line">        head2 = reverse(head2);</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">head</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(-<span class="number">1</span>);</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">newHead</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (head1 != <span class="literal">null</span> || head2 != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">val</span> <span class="operator">=</span> temp;</span><br><span class="line">            <span class="keyword">if</span> (head1 != <span class="literal">null</span>) &#123;</span><br><span class="line">                val += head1.val;</span><br><span class="line">                head1 = head1.next;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (head2 != <span class="literal">null</span>) &#123;</span><br><span class="line">                val += head2.val;</span><br><span class="line">                head2 = head2.next;</span><br><span class="line">            &#125;</span><br><span class="line">            temp = val / <span class="number">10</span>;</span><br><span class="line">            newHead.next = <span class="keyword">new</span> <span class="title class_">ListNode</span>(val % <span class="number">10</span>);</span><br><span class="line">            newHead = newHead.next;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (temp &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            newHead.next = <span class="keyword">new</span> <span class="title class_">ListNode</span>(temp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> reverse(head.next);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">reverse</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">rHead</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(-<span class="number">1</span>);</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">temp</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span> (temp != <span class="literal">null</span>) &#123;</span><br><span class="line">            temp = temp.next;</span><br><span class="line">            head.next = rHead.next;</span><br><span class="line">            rHead.next = head;</span><br><span class="line">            head = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> rHead.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;链表&quot;&gt;&lt;a href=&quot;#链表&quot; class=&quot;headerlink&quot; title=&quot;链表&quot;&gt;&lt;/a&gt;链表&lt;/h1&gt;&lt;h4 id=&quot;1-反转列表&quot;&gt;&lt;a href=&quot;#1-反转列表&quot; class=&quot;headerlink&quot; title=&quot;1. 反转列表&quot;&gt;&lt;/a&gt;</summary>
      
    
    
    
    
    <category term="链表" scheme="http://duanyushuai.github.io/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>spring Validation 学习</title>
    <link href="http://duanyushuai.github.io/2022/10/14/spring%20validation/"/>
    <id>http://duanyushuai.github.io/2022/10/14/spring%20validation/</id>
    <published>2022-10-14T12:00:00.000Z</published>
    <updated>2022-10-18T13:42:45.571Z</updated>
    
    <content type="html"><![CDATA[<h2 id="spring-Validation-学习"><a href="#spring-Validation-学习" class="headerlink" title="spring Validation 学习"></a>spring Validation 学习</h2><h4 id="统一异常处理"><a href="#统一异常处理" class="headerlink" title="统一异常处理"></a>统一异常处理</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonExceptionHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(&#123;MethodArgumentNotValidException.class&#125;)</span></span><br><span class="line">    <span class="meta">@ResponseStatus(HttpStatus.OK)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">handleMethodArgumentNotValidException</span><span class="params">(MethodArgumentNotValidException ex)</span> &#123;</span><br><span class="line">        <span class="type">BindingResult</span> <span class="variable">bindingResult</span> <span class="operator">=</span> ex.getBindingResult();</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot;校验失败:&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (FieldError fieldError : bindingResult.getFieldErrors()) &#123;</span><br><span class="line">            sb.append(fieldError.getField()).append(<span class="string">&quot;：&quot;</span>).append(fieldError.getDefaultMessage()).append(<span class="string">&quot;, &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> sb.toString();</span><br><span class="line">       <span class="keyword">return</span> Result.fail(BusinessCode.参数校验失败, msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(&#123;ConstraintViolationException.class&#125;)</span></span><br><span class="line">    <span class="meta">@ResponseStatus(HttpStatus.OK)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">handleConstraintViolationException</span><span class="params">(ConstraintViolationException ex)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(BusinessCode.参数校验失败, ex.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="嵌套校验"><a href="#嵌套校验" class="headerlink" title="嵌套校验"></a>嵌套校验</h4><p>某个字段也是一个对象，加Valid注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDTO</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Min(value = 10000000000000000L, groups = Update.class)</span></span><br><span class="line">    <span class="keyword">private</span> Long userId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull(groups = &#123;Save.class, Update.class&#125;)</span></span><br><span class="line">    <span class="meta">@Length(min = 2, max = 10, groups = &#123;Save.class, Update.class&#125;)</span></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull(groups = &#123;Save.class, Update.class&#125;)</span></span><br><span class="line">    <span class="meta">@Length(min = 6, max = 20, groups = &#123;Save.class, Update.class&#125;)</span></span><br><span class="line">    <span class="keyword">private</span> String account;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull(groups = &#123;Save.class, Update.class&#125;)</span></span><br><span class="line">    <span class="meta">@Length(min = 6, max = 20, groups = &#123;Save.class, Update.class&#125;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull(groups = &#123;Save.class, Update.class&#125;)</span></span><br><span class="line">    <span class="meta">@Valid</span></span><br><span class="line">    <span class="keyword">private</span> Job job;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Data</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Job</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Min(value = 1, groups = Update.class)</span></span><br><span class="line">        <span class="keyword">private</span> Long jobId;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@NotNull(groups = &#123;Save.class, Update.class&#125;)</span></span><br><span class="line">        <span class="meta">@Length(min = 2, max = 10, groups = &#123;Save.class, Update.class&#125;)</span></span><br><span class="line">        <span class="keyword">private</span> String jobName;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@NotNull(groups = &#123;Save.class, Update.class&#125;)</span></span><br><span class="line">        <span class="meta">@Length(min = 2, max = 10, groups = &#123;Save.class, Update.class&#125;)</span></span><br><span class="line">        <span class="keyword">private</span> String position;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存的时候校验分组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Save</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新的时候校验分组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Update</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="集合校验"><a href="#集合校验" class="headerlink" title="集合校验"></a>集合校验</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ValidationList</span>&lt;E&gt; <span class="keyword">implements</span> <span class="title class_">List</span>&lt;E&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Delegate</span> <span class="comment">// @Delegate是lombok注解</span></span><br><span class="line">    <span class="meta">@Valid</span> <span class="comment">// 一定要加@Valid注解</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;E&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 一定要记得重写toString方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> list.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/saveList&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">saveList</span><span class="params">(<span class="meta">@RequestBody</span> <span class="meta">@Validated(UserDTO.Save.class)</span> ValidationList&lt;UserDTO&gt; userList)</span> &#123;</span><br><span class="line">    <span class="comment">// 校验通过，才会执行业务逻辑处理</span></span><br><span class="line">    <span class="keyword">return</span> Result.ok();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="自定义约束注解"><a href="#自定义约束注解" class="headerlink" title="自定义约束注解"></a>自定义约束注解</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Constraint(validatedBy = &#123;EncryptIdValidator.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EncryptId &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 默认错误消息</span></span><br><span class="line">    String <span class="title function_">message</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;加密id格式错误&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 分组</span></span><br><span class="line">    Class&lt;?&gt;[] groups() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 负载</span></span><br><span class="line">    Class&lt;? <span class="keyword">extends</span> <span class="title class_">Payload</span>&gt;[] payload() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>实现ConstraintValidator接口编写约束校验器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EncryptIdValidator</span> <span class="keyword">implements</span> <span class="title class_">ConstraintValidator</span>&lt;EncryptId, String&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Pattern</span> <span class="variable">PATTERN</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;^[a-f\d]&#123;32,256&#125;$&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(String value, ConstraintValidatorContext context)</span> &#123;</span><br><span class="line">        <span class="comment">// 不为null才进行校验</span></span><br><span class="line">        <span class="keyword">if</span> (value != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> PATTERN.matcher(value);</span><br><span class="line">            <span class="keyword">return</span> matcher.find();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="编程式校验"><a href="#编程式校验" class="headerlink" title="编程式校验"></a>编程式校验</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set&lt;ConstraintViolation&lt;UserDTO&gt;&gt; validate = globalValidator.validate(userDTO, UserDTO.Save.class);</span><br></pre></td></tr></table></figure><h3 id="Validator实现原理"><a href="#Validator实现原理" class="headerlink" title="Validator实现原理"></a>Validator实现原理</h3><h3 id="requestBody参数校验实现原理"><a href="#requestBody参数校验实现原理" class="headerlink" title="requestBody参数校验实现原理"></a>requestBody参数校验实现原理</h3><p>在<code>spring-mvc</code>中，<code>RequestResponseBodyMethodProcessor</code>是用于解析<code>@RequestBody</code>标注的参数以及处理<code>@ResponseBody</code>标注方法的返回值的。显然，执行参数校验的逻辑肯定就在解析参数的方法<code>resolveArgument()</code>中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestResponseBodyMethodProcessor</span> <span class="keyword">extends</span> <span class="title class_">AbstractMessageConverterMethodProcessor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">resolveArgument</span><span class="params">(MethodParameter parameter, <span class="meta">@Nullable</span> ModelAndViewContainer mavContainer,</span></span><br><span class="line"><span class="params">                                  NativeWebRequest webRequest, <span class="meta">@Nullable</span> WebDataBinderFactory binderFactory)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        parameter = parameter.nestedIfOptional();</span><br><span class="line">        <span class="comment">//将请求数据封装到DTO对象中</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">arg</span> <span class="operator">=</span> readWithMessageConverters(webRequest, parameter, parameter.getNestedGenericParameterType());</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> Conventions.getVariableNameForParameter(parameter);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (binderFactory != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">WebDataBinder</span> <span class="variable">binder</span> <span class="operator">=</span> binderFactory.createBinder(webRequest, arg, name);</span><br><span class="line">            <span class="keyword">if</span> (arg != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 执行数据校验</span></span><br><span class="line">                validateIfApplicable(binder, parameter);</span><br><span class="line">                <span class="keyword">if</span> (binder.getBindingResult().hasErrors() &amp;&amp; isBindExceptionRequired(binder, parameter)) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MethodArgumentNotValidException</span>(parameter, binder.getBindingResult());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (mavContainer != <span class="literal">null</span>) &#123;</span><br><span class="line">                mavContainer.addAttribute(BindingResult.MODEL_KEY_PREFIX + name, binder.getBindingResult());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> adaptArgumentIfNecessary(arg, parameter);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，<code>resolveArgument()</code>调用了<code>validateIfApplicable()</code>进行参数校验。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">validateIfApplicable</span><span class="params">(WebDataBinder binder, MethodParameter parameter)</span> &#123;</span><br><span class="line">    <span class="comment">// 获取参数注解，比如@RequestBody、@Valid、@Validated</span></span><br><span class="line">    Annotation[] annotations = parameter.getParameterAnnotations();</span><br><span class="line">    <span class="keyword">for</span> (Annotation ann : annotations) &#123;</span><br><span class="line">        <span class="comment">// 先尝试获取@Validated注解</span></span><br><span class="line">        <span class="type">Validated</span> <span class="variable">validatedAnn</span> <span class="operator">=</span> AnnotationUtils.getAnnotation(ann, Validated.class);</span><br><span class="line">        <span class="comment">//如果直接标注了@Validated，那么直接开启校验。</span></span><br><span class="line">        <span class="comment">//如果没有，那么判断参数前是否有Valid起头的注解。</span></span><br><span class="line">        <span class="keyword">if</span> (validatedAnn != <span class="literal">null</span> || ann.annotationType().getSimpleName().startsWith(<span class="string">&quot;Valid&quot;</span>)) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">hints</span> <span class="operator">=</span> (validatedAnn != <span class="literal">null</span> ? validatedAnn.value() : AnnotationUtils.getValue(ann));</span><br><span class="line">            Object[] validationHints = (hints <span class="keyword">instanceof</span> Object[] ? (Object[]) hints : <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;hints&#125;);</span><br><span class="line">            <span class="comment">//执行校验</span></span><br><span class="line">            binder.validate(validationHints);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，<code>resolveArgument()</code>调用了<code>validateIfApplicable()</code>进行参数校验。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">validateIfApplicable</span><span class="params">(WebDataBinder binder, MethodParameter parameter)</span> &#123;</span><br><span class="line">    <span class="comment">// 获取参数注解，比如@RequestBody、@Valid、@Validated</span></span><br><span class="line">    Annotation[] annotations = parameter.getParameterAnnotations();</span><br><span class="line">    <span class="keyword">for</span> (Annotation ann : annotations) &#123;</span><br><span class="line">        <span class="comment">// 先尝试获取@Validated注解</span></span><br><span class="line">        <span class="type">Validated</span> <span class="variable">validatedAnn</span> <span class="operator">=</span> AnnotationUtils.getAnnotation(ann, Validated.class);</span><br><span class="line">        <span class="comment">//如果直接标注了@Validated，那么直接开启校验。</span></span><br><span class="line">        <span class="comment">//如果没有，那么判断参数前是否有Valid起头的注解。</span></span><br><span class="line">        <span class="keyword">if</span> (validatedAnn != <span class="literal">null</span> || ann.annotationType().getSimpleName().startsWith(<span class="string">&quot;Valid&quot;</span>)) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">hints</span> <span class="operator">=</span> (validatedAnn != <span class="literal">null</span> ? validatedAnn.value() : AnnotationUtils.getValue(ann));</span><br><span class="line">            Object[] validationHints = (hints <span class="keyword">instanceof</span> Object[] ? (Object[]) hints : <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;hints&#125;);</span><br><span class="line">            <span class="comment">//执行校验</span></span><br><span class="line">            binder.validate(validationHints);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到这里，大家应该能明白为什么这种场景下<code>@Validated</code>、<code>@Valid</code>两个注解可以混用。我们接下来继续看<code>WebDataBinder.validate()</code>实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">validate</span><span class="params">(Object target, Errors errors, Object... validationHints)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.targetValidator != <span class="literal">null</span>) &#123;</span><br><span class="line">        processConstraintViolations(</span><br><span class="line">            <span class="comment">//此处调用Hibernate Validator执行真正的校验</span></span><br><span class="line">            <span class="built_in">this</span>.targetValidator.validate(target, asValidationGroups(validationHints)), errors);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终发现底层最终还是调用了Hibernate Validator进行真正的校验处理。</p><h3 id="方法级别的参数校验实现原理"><a href="#方法级别的参数校验实现原理" class="headerlink" title="方法级别的参数校验实现原理"></a>方法级别的参数校验实现原理</h3><p>上面提到的将参数一个个平铺到方法参数中，然后在每个参数前面声明约束注解的校验方式，就是方法级别的参数校验。</p><p>实际上，这种方式可用于任何<code>Spring Bean</code>的方法上，比如<code>Controller/Service</code>等。其底层实现原理就是AOP，具体来说是通过<code>MethodValidationPostProcessor</code>动态注册<code>AOP</code>切面，然后使用<code>MethodValidationInterceptor</code>对切点方法织入增强。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MethodValidationPostProcessor</span> <span class="keyword">extends</span> <span class="title class_">AbstractBeanFactoryAwareAdvisingPostProcessorimplements</span> InitializingBean &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterPropertiesSet</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//为所有`@Validated`标注的Bean创建切面</span></span><br><span class="line">        <span class="type">Pointcut</span> <span class="variable">pointcut</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationMatchingPointcut</span>(<span class="built_in">this</span>.validatedAnnotationType, <span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//创建Advisor进行增强</span></span><br><span class="line">        <span class="built_in">this</span>.advisor = <span class="keyword">new</span> <span class="title class_">DefaultPointcutAdvisor</span>(pointcut, createMethodValidationAdvice(<span class="built_in">this</span>.validator));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建Advice，本质就是一个方法拦截器</span></span><br><span class="line">    <span class="keyword">protected</span> Advice <span class="title function_">createMethodValidationAdvice</span><span class="params">(<span class="meta">@Nullable</span> Validator validator)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (validator != <span class="literal">null</span> ? <span class="keyword">new</span> <span class="title class_">MethodValidationInterceptor</span>(validator) : <span class="keyword">new</span> <span class="title class_">MethodValidationInterceptor</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着看一下MethodValidationInterceptor：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MethodValidationInterceptor</span> <span class="keyword">implements</span> <span class="title class_">MethodInterceptor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(MethodInvocation invocation)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="comment">//无需增强的方法，直接跳过</span></span><br><span class="line">        <span class="keyword">if</span> (isFactoryBeanMetadataMethod(invocation.getMethod())) &#123;</span><br><span class="line">            <span class="keyword">return</span> invocation.proceed();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获取分组信息</span></span><br><span class="line">        Class&lt;?&gt;[] groups = determineValidationGroups(invocation);</span><br><span class="line">        <span class="type">ExecutableValidator</span> <span class="variable">execVal</span> <span class="operator">=</span> <span class="built_in">this</span>.validator.forExecutables();</span><br><span class="line">        <span class="type">Method</span> <span class="variable">methodToValidate</span> <span class="operator">=</span> invocation.getMethod();</span><br><span class="line">        Set&lt;ConstraintViolation&lt;Object&gt;&gt; result;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//方法入参校验，最终还是委托给Hibernate Validator来校验</span></span><br><span class="line">            result = execVal.validateParameters(</span><br><span class="line">                invocation.getThis(), methodToValidate, invocation.getArguments(), groups);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (IllegalArgumentException ex) &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//有异常直接抛出</span></span><br><span class="line">        <span class="keyword">if</span> (!result.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConstraintViolationException</span>(result);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//真正的方法调用</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">returnValue</span> <span class="operator">=</span> invocation.proceed();</span><br><span class="line">        <span class="comment">//对返回值做校验，最终还是委托给Hibernate Validator来校验</span></span><br><span class="line">        result = execVal.validateReturnValue(invocation.getThis(), methodToValidate, returnValue, groups);</span><br><span class="line">        <span class="comment">//有异常直接抛出</span></span><br><span class="line">        <span class="keyword">if</span> (!result.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConstraintViolationException</span>(result);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> returnValue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际上，不管是<code>requestBody</code>参数校验还是方法级别的校验，最终都是调用<code>Hibernate Validator</code>执行校验，<code>Spring Validation</code>只是做了一层封装。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;spring-Validation-学习&quot;&gt;&lt;a href=&quot;#spring-Validation-学习&quot; class=&quot;headerlink&quot; title=&quot;spring Validation 学习&quot;&gt;&lt;/a&gt;spring Validation 学习&lt;/h2&gt;&lt;</summary>
      
    
    
    
    <category term="springboot" scheme="http://duanyushuai.github.io/categories/springboot/"/>
    
    
    <category term="springboot" scheme="http://duanyushuai.github.io/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>springboot动态定时任务</title>
    <link href="http://duanyushuai.github.io/2022/10/10/springboot%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
    <id>http://duanyushuai.github.io/2022/10/10/springboot%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/</id>
    <published>2022-10-10T12:00:00.000Z</published>
    <updated>2022-10-18T13:42:48.636Z</updated>
    
    <content type="html"><![CDATA[<h1 id="springboot动态定时任务"><a href="#springboot动态定时任务" class="headerlink" title="springboot动态定时任务"></a>springboot动态定时任务</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:/task-config.ini&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ScheduleTask</span> <span class="keyword">implements</span> <span class="title class_">SchedulingConfigurer</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;printTime.cron&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String cron;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="type">Long</span> <span class="variable">timer</span> <span class="operator">=</span> <span class="number">10000L</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configureTasks</span><span class="params">(ScheduledTaskRegistrar taskRegistrar)</span> &#123;</span><br><span class="line">        <span class="comment">// 动态使用cron表达式设置循环间隔</span></span><br><span class="line">        taskRegistrar.addTriggerTask(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                log.info(<span class="string">&quot;Current time： &#123;&#125;&quot;</span>, LocalDateTime.now());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="keyword">new</span> <span class="title class_">Trigger</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Date <span class="title function_">nextExecutionTime</span><span class="params">(TriggerContext triggerContext)</span> &#123;</span><br><span class="line">                <span class="comment">// 使用CronTrigger触发器，可动态修改cron表达式来操作循环规则</span></span><br><span class="line"><span class="comment">//                CronTrigger cronTrigger = new CronTrigger(cron);</span></span><br><span class="line"><span class="comment">//                Date nextExecutionTime = cronTrigger.nextExecutionTime(triggerContext);</span></span><br><span class="line"> </span><br><span class="line">                <span class="comment">// 使用不同的触发器，为设置循环时间的关键，区别于CronTrigger触发器，该触发器可随意设置循环间隔时间，单位为毫秒</span></span><br><span class="line">                <span class="type">PeriodicTrigger</span> <span class="variable">periodicTrigger</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PeriodicTrigger</span>(timer);</span><br><span class="line">                <span class="type">Date</span> <span class="variable">nextExecutionTime</span> <span class="operator">=</span> periodicTrigger.nextExecutionTime(triggerContext);</span><br><span class="line">                <span class="keyword">return</span> nextExecutionTime;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除了上面的借助cron表达式的方法，还有另一种触发器，区别于CronTrigger触发器，该触发器可随意设置循环间隔时间，不像cron表达式只能定义小于等于间隔59秒</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;springboot动态定时任务&quot;&gt;&lt;a href=&quot;#springboot动态定时任务&quot; class=&quot;headerlink&quot; title=&quot;springboot动态定时任务&quot;&gt;&lt;/a&gt;springboot动态定时任务&lt;/h1&gt;&lt;figure class=&quot;hi</summary>
      
    
    
    
    <category term="springboot" scheme="http://duanyushuai.github.io/categories/springboot/"/>
    
    
    <category term="springboot" scheme="http://duanyushuai.github.io/tags/springboot/"/>
    
  </entry>
  
</feed>
