<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Duan</title>
  
  
  <link href="http://duanyushuai.github.io/atom.xml" rel="self"/>
  
  <link href="http://duanyushuai.github.io/"/>
  <updated>2022-06-13T00:32:33.427Z</updated>
  <id>http://duanyushuai.github.io/</id>
  
  <author>
    <name>小段</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://duanyushuai.github.io/2022/06/12/Duan/"/>
    <id>http://duanyushuai.github.io/2022/06/12/Duan/</id>
    <published>2022-06-12T09:02:04.255Z</published>
    <updated>2022-06-13T00:32:33.427Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Duan"><a href="#Duan" class="headerlink" title="Duan"></a>Duan</h2><p>test</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Duan&quot;&gt;&lt;a href=&quot;#Duan&quot; class=&quot;headerlink&quot; title=&quot;Duan&quot;&gt;&lt;/a&gt;Duan&lt;/h2&gt;&lt;p&gt;test&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Java高并发程序设计第二章</title>
    <link href="http://duanyushuai.github.io/2021/06/07/Java%E9%AB%98%E5%B9%B6%E5%8F%91%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AC%AC%E4%BA%8C%E7%AB%A0/"/>
    <id>http://duanyushuai.github.io/2021/06/07/Java%E9%AB%98%E5%B9%B6%E5%8F%91%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AC%AC%E4%BA%8C%E7%AB%A0/</id>
    <published>2021-06-07T03:00:23.000Z</published>
    <updated>2022-06-13T15:00:55.975Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java高并发程序设计第二章"><a href="#Java高并发程序设计第二章" class="headerlink" title="Java高并发程序设计第二章"></a>Java高并发程序设计第二章</h1><h4 id="线程创建4个方法"><a href="#线程创建4个方法" class="headerlink" title="线程创建4个方法"></a>线程创建4个方法</h4><p>创建线程4个方法</p><ol><li>继承Thread类创建线程</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;<span class="comment">//继承Thread类</span></span><br><span class="line"></span><br><span class="line">　　<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">　　<span class="comment">//重写run方法</span></span><br><span class="line">　　&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">MyThread</span>().start();<span class="comment">//创建并启动线程</span></span><br></pre></td></tr></table></figure><ol start="2"><li>实现Runnable接口创建线程</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread2</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;<span class="comment">//实现Runnable接口</span></span><br><span class="line"></span><br><span class="line">　　<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">　　<span class="comment">//重写run方法</span></span><br><span class="line">　　&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">　　<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">　　　　<span class="comment">//创建并启动线程</span></span><br><span class="line">　　　　MyThread2 myThread=<span class="keyword">new</span> <span class="title class_">MyThread2</span>();</span><br><span class="line">　　　　Thread thread=<span class="keyword">new</span> <span class="title class_">Thread</span>(myThread);</span><br><span class="line">　　　　thread().start();</span><br><span class="line"></span><br><span class="line">　　　　<span class="comment">//或者    new Thread(new MyThread2()).start();</span></span><br><span class="line">　　&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>使用Callable和Future创建线程</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="comment">// 先使用Lambda表达式创建Callable&lt;Integer&gt;对象</span></span><br><span class="line">       <span class="comment">// 使用FutureTask来包装Callable对象</span></span><br><span class="line">       FutureTask&lt;Integer&gt; task = <span class="keyword">new</span>  <span class="title class_">FutureTask</span>&lt;&gt;((Callable&lt;Integer&gt;)() -&gt; <span class="number">5</span>);</span><br><span class="line">       <span class="keyword">new</span> <span class="title class_">Thread</span>(task).start();</span><br><span class="line">       <span class="keyword">try</span></span><br><span class="line">       &#123;</span><br><span class="line">           System.out.println(<span class="string">&quot;子线程的返回值：&quot;</span> +  task.get());</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">       &#123;</span><br><span class="line">           ex.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="4"><li>使用线程池例如用Executor框架</li></ol><h4 id="线程中断"><a href="#线程中断" class="headerlink" title="线程中断"></a>线程中断</h4><hr><p>禁止用stop()来退出线程，不安全。</p><p>线程安全退出，与中断有关的三个方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> Thread.interrupt() <span class="comment">// 中断线程</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> Thread.isInterrupted() <span class="comment">// 判断是否被中断</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> Thread.interrupted() <span class="comment">// 判断是否被中断，并清除当前中断状态</span></span><br></pre></td></tr></table></figure><h4 id="等待wait和通知notify"><a href="#等待wait和通知notify" class="headerlink" title="等待wait和通知notify"></a>等待wait和通知notify</h4><hr><p>这两个⽅法并不是在Thread类中 的，⽽是输出Object类。</p><p>Object.wait()和Thread.sleep()方法都可以让线程等待若干时 间。除了wait()可以被唤醒外，另外一个主要区别就是wait()方法会 释放目标对象的锁，而Thread.sleep()方法不会释放任何资源。</p><h4 id="等待线程结束（join-和谦让-yield"><a href="#等待线程结束（join-和谦让-yield" class="headerlink" title="等待线程结束（join)和谦让(yield)"></a>等待线程结束（join)和谦让(yield)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JoinMain</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">volatile</span> <span class="keyword">static</span> <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">AddThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">1111111</span>;i++);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span></span><br><span class="line">            InterruptedException &#123;</span><br><span class="line">        AddThread at=<span class="keyword">new</span> <span class="title class_">AddThread</span>();</span><br><span class="line">        at.start();</span><br><span class="line">        at.join();</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>join()d的核心代码段</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (isAlive()) &#123;</span><br><span class="line"> wait(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>可以看到，它让调⽤线程在当前线程对象上进⾏等待。当线程执 ⾏完成后，被等待的线程会在退出前调⽤notifyAll()通知所有的等待线 程继续执⾏。因此，值得注意的⼀点是：不要在应⽤程序中，在 Thread对象实例上使⽤类似wait()或者notify()等⽅法，因为这很有可能 会影响系统API的⼯作，或者被系统API所影响。</p></blockquote></blockquote><h4 id="守护线程-Daemon"><a href="#守护线程-Daemon" class="headerlink" title="守护线程(Daemon)"></a>守护线程(Daemon)</h4><p>如垃圾回收线程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> testdemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DaemonDemo</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(DaemonDemo.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">DaemonT</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">                logger.info(<span class="string">&quot;I am alive&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">DaemonT</span> <span class="variable">d</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DaemonT</span>();</span><br><span class="line">        d.setDaemon(<span class="literal">true</span>);</span><br><span class="line">        d.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>d线程为main线程的守护线程，main一结束，d立即结束。</p><h4 id="线程优先级设置"><a href="#线程优先级设置" class="headerlink" title="线程优先级设置"></a>线程优先级设置</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Thread high=<span class="keyword">new</span> <span class="title class_">HightPriority</span>();</span><br><span class="line">LowPriority low=<span class="keyword">new</span> <span class="title class_">LowPriority</span>();</span><br><span class="line">high.setPriority(Thread.MAX_PRIORITY);</span><br><span class="line">low.setPriority(Thread.MIN_PRIORITY);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Java高并发程序设计第二章&quot;&gt;&lt;a href=&quot;#Java高并发程序设计第二章&quot; class=&quot;headerlink&quot; title=&quot;Java高并发程序设计第二章&quot;&gt;&lt;/a&gt;Java高并发程序设计第二章&lt;/h1&gt;&lt;h4 id=&quot;线程创建4个方法&quot;&gt;&lt;a href</summary>
      
    
    
    
    <category term="java" scheme="http://duanyushuai.github.io/categories/java/"/>
    
    
    <category term="java" scheme="http://duanyushuai.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>joda-time、日志、代码规范</title>
    <link href="http://duanyushuai.github.io/2021/04/07/joda-time%20%20%E6%97%A5%E5%BF%97%20%20%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/"/>
    <id>http://duanyushuai.github.io/2021/04/07/joda-time%20%20%E6%97%A5%E5%BF%97%20%20%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/</id>
    <published>2021-04-07T03:00:23.000Z</published>
    <updated>2022-06-13T15:02:06.174Z</updated>
    
    <content type="html"><![CDATA[<h4 id="joda-time-日志-代码规范"><a href="#joda-time-日志-代码规范" class="headerlink" title="joda-time  日志  代码规范"></a>joda-time  日志  代码规范</h4><h5 id="jode-time"><a href="#jode-time" class="headerlink" title="jode-time"></a>jode-time</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dateDemo</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">DateTime</span> <span class="variable">dt</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DateTime</span>(<span class="number">2015</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">12</span>,<span class="number">30</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="type">Date</span> <span class="variable">d</span> <span class="operator">=</span> dt.toDate();</span><br><span class="line">        <span class="comment">//当天起始日期</span></span><br><span class="line">        <span class="type">DateTime</span> <span class="variable">today</span> <span class="operator">=</span> DateTime.now().withTimeAtStartOfDay();</span><br><span class="line">        <span class="comment">//三天后的日期</span></span><br><span class="line">        <span class="type">DateTime</span> <span class="variable">dateTime</span> <span class="operator">=</span> today.plusDays(<span class="number">3</span>).plusMonths(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//入住时间和离店时间的差值</span></span><br><span class="line">        <span class="type">DateTime</span> <span class="variable">checkIn</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DateTime</span>(<span class="number">2015</span>,<span class="number">8</span>,<span class="number">29</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="type">DateTime</span> <span class="variable">checkOut</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DateTime</span>(<span class="number">2015</span>,<span class="number">9</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">        System.out.println(Days.daysBetween(checkIn,checkOut).getDays());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>日期格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DateTimeExample1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">DateTimeFormatter</span> <span class="variable">DATE_TIME_FORMATTER</span> <span class="operator">=</span> DateTimeFormat.forPattern(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(DATE_TIME_FORMATTER.print(<span class="keyword">new</span> <span class="title class_">DateTime</span>()));</span><br><span class="line">        System.out.println(DATE_TIME_FORMATTER.parseDateTime(<span class="string">&quot;2000-01-01 12:12:12&quot;</span>).toDate());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="日志规范"><a href="#日志规范" class="headerlink" title="日志规范"></a>日志规范</h5><p>配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.slf4j&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">1.7</span><span class="number">.25</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;ch.qos.logback&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;logback-core&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">1.1</span><span class="number">.3</span>&lt;/version&gt;</span><br><span class="line">    &lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;ch.qos.logback&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;logback-classic&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">1.1</span><span class="number">.3</span>&lt;/version&gt;</span><br><span class="line">    &lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogTest</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(LogTest.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        logger.trace(<span class="string">&quot;log in trace level,args:&#123;&#125;&quot;</span>,args);</span><br><span class="line">        logger.debug(<span class="string">&quot;log in trace level,args:&#123;&#125;&quot;</span>,args);</span><br><span class="line">        logger.info(<span class="string">&quot;log in trace level,args:&#123;&#125;&quot;</span>,args);</span><br><span class="line">        logger.warn(<span class="string">&quot;log in trace level,args:&#123;&#125;&quot;</span>,args);</span><br><span class="line">        logger.error(<span class="string">&quot;log in trace level,args:&#123;&#125;&quot;</span>,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>查看日志</strong></p><ol><li>登录跳板机</li><li>在跳板机登录服务器</li><li>进入应用目录，一般为&#x2F;home&#x2F;q&#x2F;www&#x2F;&lt;应用名&gt;&#x2F;</li><li>该目录下有logs目录，其中存放了Tomcat日志，catalina.out记录了打印到控制台的日志，一般来说，查看改日志即可。</li></ol><p><strong>日志规范</strong></p><ul><li><p>禁止使用System.out.print()</p></li><li><p>在异常处理中打印关键信息</p><ul><li>入参</li><li>关键变量值</li></ul></li><li><p>注意数据保密</p><ul><li>与用户相关的信息保密</li><li>打码到日志</li></ul></li><li><p>不能影响正常业务</p><ul><li>打印日志不能抛出异常，不能影响正常业务</li><li>日志影响性能，高QPS业务，控制日志输出量。</li></ul></li><li><p>使用占位符代替字符串拼接</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogTest</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(LogTest.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;111&quot;</span>;</span><br><span class="line">        logger.info(<span class="string">&quot;log in trace level,args: &#123;&#125;&quot;</span>,args);</span><br><span class="line">        logger.info(<span class="string">&quot;log in trace level,args: &#123;&#125; , &#123;&#125;&quot;</span>,s,s.length());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>代码规范</strong></p><ul><li>代码给以后的自己看</li><li>强迫症</li></ul><p>书《编写可读代码的艺术》</p><ul><li>类名：形容词或动词</li><li>方法名：动词</li></ul><p><strong>注释</strong></p><ul><li>使用Javadoc格式编写注释</li><li>接口必须有注释，对参数，返回值有说明。例如参数限制，返回值是否为空，接口调用频率。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;joda-time-日志-代码规范&quot;&gt;&lt;a href=&quot;#joda-time-日志-代码规范&quot; class=&quot;headerlink&quot; title=&quot;joda-time  日志  代码规范&quot;&gt;&lt;/a&gt;joda-time  日志  代码规范&lt;/h4&gt;&lt;h5 id=&quot;j</summary>
      
    
    
    
    <category term="java" scheme="http://duanyushuai.github.io/categories/java/"/>
    
    
    <category term="java" scheme="http://duanyushuai.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>线程创建4个方法</title>
    <link href="http://duanyushuai.github.io/2021/04/07/%E7%BA%BF%E7%A8%8B%E5%88%9B%E5%BB%BA4%E4%B8%AA%E6%96%B9%E6%B3%95/"/>
    <id>http://duanyushuai.github.io/2021/04/07/%E7%BA%BF%E7%A8%8B%E5%88%9B%E5%BB%BA4%E4%B8%AA%E6%96%B9%E6%B3%95/</id>
    <published>2021-04-07T03:00:23.000Z</published>
    <updated>2022-06-13T15:00:03.170Z</updated>
    
    <content type="html"><![CDATA[<h4 id="线程创建4个方法"><a href="#线程创建4个方法" class="headerlink" title="线程创建4个方法"></a>线程创建4个方法</h4><p>创建线程4个方法</p><ol><li>继承Thread类创建线程</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;<span class="comment">//继承Thread类</span></span><br><span class="line"></span><br><span class="line">　　<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">　　<span class="comment">//重写run方法</span></span><br><span class="line">　　&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">MyThread</span>().start();<span class="comment">//创建并启动线程</span></span><br></pre></td></tr></table></figure><ol start="2"><li>实现Runnable接口创建线程</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread2</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;<span class="comment">//实现Runnable接口</span></span><br><span class="line"></span><br><span class="line">　　<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">　　<span class="comment">//重写run方法</span></span><br><span class="line">　　&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">　　<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">　　　　<span class="comment">//创建并启动线程</span></span><br><span class="line">　　　　MyThread2 myThread=<span class="keyword">new</span> <span class="title class_">MyThread2</span>();</span><br><span class="line">　　　　Thread thread=<span class="keyword">new</span> <span class="title class_">Thread</span>(myThread);</span><br><span class="line">　　　　thread().start();</span><br><span class="line"></span><br><span class="line">　　　　<span class="comment">//或者    new Thread(new MyThread2()).start();</span></span><br><span class="line">　　&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>使用Callable和Future创建线程</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="comment">// 先使用Lambda表达式创建Callable&lt;Integer&gt;对象</span></span><br><span class="line">       <span class="comment">// 使用FutureTask来包装Callable对象</span></span><br><span class="line">       FutureTask&lt;Integer&gt; task = <span class="keyword">new</span>  <span class="title class_">FutureTask</span>&lt;&gt;((Callable&lt;Integer&gt;)() -&gt; <span class="number">5</span>);</span><br><span class="line">       <span class="keyword">new</span> <span class="title class_">Thread</span>(task).start();</span><br><span class="line">       <span class="keyword">try</span></span><br><span class="line">       &#123;</span><br><span class="line">           System.out.println(<span class="string">&quot;子线程的返回值：&quot;</span> +  task.get());</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">       &#123;</span><br><span class="line">           ex.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="4"><li>使用线程池例如用Executor框架</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;线程创建4个方法&quot;&gt;&lt;a href=&quot;#线程创建4个方法&quot; class=&quot;headerlink&quot; title=&quot;线程创建4个方法&quot;&gt;&lt;/a&gt;线程创建4个方法&lt;/h4&gt;&lt;p&gt;创建线程4个方法&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;继承Thread类创建线程&lt;/li&gt;
&lt;/ol&gt;</summary>
      
    
    
    
    <category term="java" scheme="http://duanyushuai.github.io/categories/java/"/>
    
    
    <category term="java" scheme="http://duanyushuai.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>CompletableFuture</title>
    <link href="http://duanyushuai.github.io/2021/04/05/CompletableFuture/"/>
    <id>http://duanyushuai.github.io/2021/04/05/CompletableFuture/</id>
    <published>2021-04-05T03:00:23.000Z</published>
    <updated>2022-06-13T03:02:59.980Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CompletableFuture"><a href="#CompletableFuture" class="headerlink" title="CompletableFuture"></a>CompletableFuture</h1><h3 id="实例化"><a href="#实例化" class="headerlink" title="实例化"></a>实例化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;U&gt; CompletableFuture&lt;U&gt; <span class="title function_">supplyAsync</span><span class="params">(Supplier&lt;U&gt; supplier)</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;U&gt; CompletableFuture&lt;U&gt; <span class="title function_">supplyAsync</span><span class="params">(Supplier&lt;U&gt; supplier, Executor executor)</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> CompletableFuture&lt;Void&gt; <span class="title function_">runAsync</span><span class="params">(Runnable runnable)</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> CompletableFuture&lt;Void&gt; <span class="title function_">runAsync</span><span class="params">(Runnable runnable, Executor executor)</span>;</span><br></pre></td></tr></table></figure><p>supply:有返回结果</p><p>run：无返回结果</p><h3 id="获取结果"><a href="#获取结果" class="headerlink" title="获取结果"></a>获取结果</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> T    <span class="title function_">get</span><span class="params">()</span></span><br><span class="line"><span class="keyword">public</span> T    <span class="title function_">get</span><span class="params">(<span class="type">long</span> timeout, TimeUnit unit)</span></span><br><span class="line"><span class="keyword">public</span> T    <span class="title function_">getNow</span><span class="params">(T valueIfAbsent)</span></span><br><span class="line"><span class="keyword">public</span> T    <span class="title function_">join</span><span class="params">()</span></span><br></pre></td></tr></table></figure><h3 id="计算完成后续操作1——complete"><a href="#计算完成后续操作1——complete" class="headerlink" title="计算完成后续操作1——complete"></a>计算完成后续操作1——complete</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> CompletableFuture&lt;T&gt;     <span class="title function_">whenComplete</span><span class="params">(BiConsumer&lt;? <span class="built_in">super</span> T,? <span class="built_in">super</span> Throwable&gt; action)</span></span><br><span class="line"><span class="keyword">public</span> CompletableFuture&lt;T&gt;     <span class="title function_">whenCompleteAsync</span><span class="params">(BiConsumer&lt;? <span class="built_in">super</span> T,? <span class="built_in">super</span> Throwable&gt; action)</span></span><br><span class="line"><span class="keyword">public</span> CompletableFuture&lt;T&gt;     <span class="title function_">whenCompleteAsync</span><span class="params">(BiConsumer&lt;? <span class="built_in">super</span> T,? <span class="built_in">super</span> Throwable&gt; action, Executor executor)</span></span><br><span class="line"><span class="keyword">public</span> CompletableFuture&lt;T&gt;     <span class="title function_">exceptionally</span><span class="params">(Function&lt;Throwable,? extends T&gt; fn)</span></span><br></pre></td></tr></table></figure><p>方法1和2的区别在于是否使用异步处理，2和3的区别在于是否使用自定义的线程池，前三个方法都会提供<strong>一个返回结果和可抛出异常</strong>，我们可以使用lambda表达式的来接收这两个参数，然后自己处理。 方法4，接收一个可抛出的异常，且必须return一个返回值，类型与钻石表达式种的类型一样，详见下文的<strong>exceptionally()</strong> </p><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CompletableFuture&lt;Integer&gt; future = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">10086</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">        future.whenComplete((result, error) -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;拨打&quot;</span>+result);</span><br><span class="line">            error.printStackTrace();</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><p>whenCompleteAsync  与  whenComplete 区别</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    CompletableFuture&lt;Integer&gt; f = <span class="keyword">new</span> <span class="title class_">CompletableFuture</span>&lt;Integer&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">        <span class="comment">// 子线程A启动</span></span><br><span class="line">        logger.info(<span class="string">&quot;子线程A启动&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            logger.info(<span class="string">&quot;子线程A沉睡5s&quot;</span>);</span><br><span class="line">            Thread.sleep(<span class="number">5000l</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        logger.info(<span class="string">&quot;子线程A令future完成&quot;</span>);</span><br><span class="line">        f.complete(<span class="number">100</span>);  <span class="comment">// 当子线程A执行到f.complete的时候，会去看是否有注册好的f的then或者when（非async的），如果有的话，会顺次去执行。</span></span><br><span class="line">        logger.info(<span class="string">&quot;子线程A结束&quot;</span>);</span><br><span class="line">    &#125;).start();;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当前线程（主线程）执行到这里的时候，如果子线程还没有执行到f.complete(100)，</span></span><br><span class="line">    <span class="comment">// 那么当前线程会把whenComplete事件注册起来，并且说好哪个线程执行了f.complete(100)，</span></span><br><span class="line">    <span class="comment">// 哪个线程就负责执行whenComplete的内容。</span></span><br><span class="line">    <span class="comment">// 如果当前线程（主线程）执行到这里的时候，f.complete(100)已经被其他线程执行完毕了。</span></span><br><span class="line">    <span class="comment">// 那么只有当前线程自己来执行whenComplete里面的内容了。</span></span><br><span class="line">    f.whenCompleteAsync((i, ex) -&gt; &#123;</span><br><span class="line">        <span class="comment">// 这个场景下，whenComplete的回调的执行线程会是子线程A</span></span><br><span class="line">        logger.info(<span class="string">&quot;do something after complete begin&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            logger.info(<span class="string">&quot;沉睡10s&quot;</span>);</span><br><span class="line">            Thread.sleep(<span class="number">10000l</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        logger.info(<span class="string">&quot;do something after complete end&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    logger.info(<span class="string">&quot;main over&quot;</span>);</span><br><span class="line">    System.in.read();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="计算完成后续操作2——handle"><a href="#计算完成后续操作2——handle" class="headerlink" title="计算完成后续操作2——handle"></a>计算完成后续操作2——handle</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;U&gt; CompletableFuture&lt;U&gt;     <span class="title function_">handle</span><span class="params">(BiFunction&lt;? <span class="built_in">super</span> T,Throwable,? extends U&gt; fn)</span></span><br><span class="line"><span class="keyword">public</span> &lt;U&gt; CompletableFuture&lt;U&gt;     <span class="title function_">handleAsync</span><span class="params">(BiFunction&lt;? <span class="built_in">super</span> T,Throwable,? extends U&gt; fn)</span></span><br><span class="line"><span class="keyword">public</span> &lt;U&gt; CompletableFuture&lt;U&gt;     <span class="title function_">handleAsync</span><span class="params">(BiFunction&lt;? <span class="built_in">super</span> T,Throwable,? extends U&gt; fn, Executor executor)</span></span><br></pre></td></tr></table></figure><p>方法返回类型可以自定义</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;CompletableFuture&quot;&gt;&lt;a href=&quot;#CompletableFuture&quot; class=&quot;headerlink&quot; title=&quot;CompletableFuture&quot;&gt;&lt;/a&gt;CompletableFuture&lt;/h1&gt;&lt;h3 id=&quot;实例化&quot;&gt;</summary>
      
    
    
    
    <category term="java" scheme="http://duanyushuai.github.io/categories/java/"/>
    
    
    <category term="java" scheme="http://duanyushuai.github.io/tags/java/"/>
    
    <category term="CompletableFuture" scheme="http://duanyushuai.github.io/tags/CompletableFuture/"/>
    
  </entry>
  
  <entry>
    <title>基于胶囊网络的肽段预测</title>
    <link href="http://duanyushuai.github.io/2020/09/10/%E5%9F%BA%E4%BA%8E%E8%83%B6%E5%9B%8A%E7%BD%91%E7%BB%9C%E7%9A%84%E8%82%BD%E6%AE%B5%E9%A2%84%E6%B5%8B/"/>
    <id>http://duanyushuai.github.io/2020/09/10/%E5%9F%BA%E4%BA%8E%E8%83%B6%E5%9B%8A%E7%BD%91%E7%BB%9C%E7%9A%84%E8%82%BD%E6%AE%B5%E9%A2%84%E6%B5%8B/</id>
    <published>2020-09-10T02:00:21.000Z</published>
    <updated>2022-06-13T15:28:01.541Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Prediction-of-Peptide-Detectability-Based-on-CapsNet-and-Convolutional-Block-Attention-Module"><a href="#Prediction-of-Peptide-Detectability-Based-on-CapsNet-and-Convolutional-Block-Attention-Module" class="headerlink" title="Prediction of Peptide Detectability Based on CapsNet and Convolutional Block Attention Module"></a>Prediction of Peptide Detectability Based on CapsNet and Convolutional Block Attention Module</h2><p><a href="https://www.mdpi.com/1422-0067/22/21/12080">https://www.mdpi.com/1422-0067/22/21/12080</a></p><p><img src="/../img/0001.jpg" alt="0001"><br><img src="/../img/0002.jpg" alt="0001"><br><img src="/../img/0003.jpg" alt="0001"><br><img src="/../img/0004.jpg" alt="0001"><br><img src="/../img/0005.jpg" alt="0001"><br><img src="/../img/0006.jpg" alt="0001"><br><img src="/../img/0007.jpg" alt="0001"><br><img src="/../img/0008.jpg" alt="0001"><br><img src="/../img/0009.jpg" alt="0001"><br><img src="/../img/0010.jpg" alt="0001"><br><img src="/../img/0011.jpg" alt="0001"><br><img src="/../img/0012.jpg" alt="0001"><br><img src="/../img/0013.jpg" alt="0001"><br><img src="/../img/0014.jpg" alt="0001"><br><img src="/../img/0015.jpg" alt="0001"><br><img src="/../img/0016.jpg" alt="0001"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Prediction-of-Peptide-Detectability-Based-on-CapsNet-and-Convolutional-Block-Attention-Module&quot;&gt;&lt;a href=&quot;#Prediction-of-Peptide-Detec</summary>
      
    
    
    
    <category term="深度学习" scheme="http://duanyushuai.github.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="算法" scheme="http://duanyushuai.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="python" scheme="http://duanyushuai.github.io/tags/python/"/>
    
    <category term="深度学习" scheme="http://duanyushuai.github.io/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
</feed>
