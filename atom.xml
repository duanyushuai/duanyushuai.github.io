<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Duan</title>
  
  <subtitle>有点小菜</subtitle>
  <link href="http://duanyushuai.github.io/atom.xml" rel="self"/>
  
  <link href="http://duanyushuai.github.io/"/>
  <updated>2022-10-18T14:07:28.242Z</updated>
  <id>http://duanyushuai.github.io/</id>
  
  <author>
    <name>小段</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>excel导入</title>
    <link href="http://duanyushuai.github.io/2022/11/18/excel%E5%AF%BC%E5%85%A5/"/>
    <id>http://duanyushuai.github.io/2022/11/18/excel%E5%AF%BC%E5%85%A5/</id>
    <published>2022-11-18T03:00:23.000Z</published>
    <updated>2022-10-18T14:07:28.242Z</updated>
    
    <content type="html"><![CDATA[<h1 id="excel导入"><a href="#excel导入" class="headerlink" title="excel导入"></a>excel导入</h1><h4 id="百万数据导入"><a href="#百万数据导入" class="headerlink" title="百万数据导入"></a>百万数据导入</h4><p>1、 我遇到的数据量超级大，使用传统的POI方式来完成导入导出很明显会内存溢出，并且效率会非常低；</p><p>2、 数据量大直接使用<code>select * from tableName</code>肯定不行，一下子查出来300w条数据肯定会很慢；</p><p>3、 300w 数据导出到Excel时肯定不能都写在一个Sheet中，这样效率会非常低；估计打开都得几分钟；</p><p>4、 300w数据导出到Excel中肯定不能一行一行的导出到Excel中。频繁IO操作绝对不行；</p><p>5、 导入时300万数据存储到DB如果循环一条条插入也肯定不行；</p><p>6、导入时300w数据如果使用Mybatis的批量插入肯定不行，因为Mybatis的批量插入其实就是SQL的循环；一样很慢。</p><h5 id="针对1："><a href="#针对1：" class="headerlink" title="针对1："></a>针对1：</h5><p>其实问题所在就是内存溢出，我们只要使用对上面介绍的POI方式即可，主要问题就是原生的POI解决起来相当麻烦。</p><p>经过查阅资料翻看到阿里的一款POI封装工具EasyExcel，上面问题等到解决；</p><h5 id="针对2："><a href="#针对2：" class="headerlink" title="针对2："></a>针对2：</h5><p>不能一次性查询出全部数据，我们可以分批进行查询，只不过时多查询几次的问题，况且市面上分页插件很多。此问题好解决。</p><h5 id="针对3："><a href="#针对3：" class="headerlink" title="针对3："></a>针对3：</h5><p>可以将300w条数据写到不同的Sheet中，每一个Sheet写一百万即可。</p><h5 id="针对4："><a href="#针对4：" class="headerlink" title="针对4："></a>针对4：</h5><p>不能一行一行的写入到Excel上，我们可以将分批查询的数据分批写入到Excel中。</p><h5 id="针对5："><a href="#针对5：" class="headerlink" title="针对5："></a>针对5：</h5><p>导入到DB时我们可以将Excel中读取的数据存储到集合中，到了一定数量，直接批量插入到DB中。</p><h5 id="针对6："><a href="#针对6：" class="headerlink" title="针对6："></a>针对6：</h5><p>不能使用Mybatis的批量插入，我们可以使用JDBC的批量插入，配合事务来完成批量插入到DB。即 Excel读取分批+JDBC分批插入+事务。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dataExport300w</span><span class="params">(HttpServletResponse response)</span> &#123;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">            System.out.println(<span class="string">&quot;导出开始时间:&quot;</span> + startTime);</span><br><span class="line"></span><br><span class="line">            outputStream = response.getOutputStream();</span><br><span class="line">            <span class="type">ExcelWriter</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ExcelWriter</span>(outputStream, ExcelTypeEnum.XLSX);</span><br><span class="line">            <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>((<span class="string">&quot;excel100w&quot;</span>).getBytes(), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//title</span></span><br><span class="line">            <span class="type">Table</span> <span class="variable">table</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Table</span>(<span class="number">1</span>);</span><br><span class="line">            List&lt;List&lt;String&gt;&gt; titles = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;List&lt;String&gt;&gt;();</span><br><span class="line">            titles.add(Arrays.asList(<span class="string">&quot;onlineseqid&quot;</span>));</span><br><span class="line">            titles.add(Arrays.asList(<span class="string">&quot;businessid&quot;</span>));</span><br><span class="line">            titles.add(Arrays.asList(<span class="string">&quot;becifno&quot;</span>));</span><br><span class="line">            titles.add(Arrays.asList(<span class="string">&quot;ivisresult&quot;</span>));</span><br><span class="line">            titles.add(Arrays.asList(<span class="string">&quot;createdby&quot;</span>));</span><br><span class="line">            titles.add(Arrays.asList(<span class="string">&quot;createddate&quot;</span>));</span><br><span class="line">            titles.add(Arrays.asList(<span class="string">&quot;updateby&quot;</span>));</span><br><span class="line">            titles.add(Arrays.asList(<span class="string">&quot;updateddate&quot;</span>));</span><br><span class="line">            titles.add(Arrays.asList(<span class="string">&quot;risklevel&quot;</span>));</span><br><span class="line">            table.setHead(titles);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//模拟统计查询的数据数量这里模拟100w</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">3000001</span>;</span><br><span class="line">            <span class="comment">//记录总数:实际中需要根据查询条件进行统计即可</span></span><br><span class="line">            <span class="type">Integer</span> <span class="variable">totalCount</span> <span class="operator">=</span> actResultLogMapper.findActResultLogByCondations(count);</span><br><span class="line">            <span class="comment">//每一个Sheet存放100w条数据</span></span><br><span class="line">            <span class="type">Integer</span> <span class="variable">sheetDataRows</span> <span class="operator">=</span> ExcelConstants.PER_SHEET_ROW_COUNT;</span><br><span class="line">            <span class="comment">//每次写入的数据量20w</span></span><br><span class="line">            <span class="type">Integer</span> <span class="variable">writeDataRows</span> <span class="operator">=</span> ExcelConstants.PER_WRITE_ROW_COUNT;</span><br><span class="line">            <span class="comment">//计算需要的Sheet数量</span></span><br><span class="line">            <span class="type">Integer</span> <span class="variable">sheetNum</span> <span class="operator">=</span> totalCount % sheetDataRows == <span class="number">0</span> ? (totalCount / sheetDataRows) : (totalCount / sheetDataRows + <span class="number">1</span>);</span><br><span class="line">            <span class="comment">//计算一般情况下每一个Sheet需要写入的次数(一般情况不包含最后一个sheet,因为最后一个sheet不确定会写入多少条数据)</span></span><br><span class="line">            <span class="type">Integer</span> <span class="variable">oneSheetWriteCount</span> <span class="operator">=</span> sheetDataRows / writeDataRows;</span><br><span class="line">            <span class="comment">//计算最后一个sheet需要写入的次数</span></span><br><span class="line">            <span class="type">Integer</span> <span class="variable">lastSheetWriteCount</span> <span class="operator">=</span> totalCount % sheetDataRows == <span class="number">0</span> ? oneSheetWriteCount : (totalCount % sheetDataRows % writeDataRows == <span class="number">0</span> ? (totalCount / sheetDataRows / writeDataRows) : (totalCount / sheetDataRows / writeDataRows + <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">            <span class="comment">//开始分批查询分次写入</span></span><br><span class="line">            <span class="comment">//注意这次的循环就需要进行嵌套循环了,外层循环是Sheet数目,内层循环是写入次数</span></span><br><span class="line">            List&lt;List&lt;String&gt;&gt; dataList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; sheetNum; i++) &#123;</span><br><span class="line">                <span class="comment">//创建Sheet</span></span><br><span class="line">                <span class="type">Sheet</span> <span class="variable">sheet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Sheet</span>(i, <span class="number">0</span>);</span><br><span class="line">                sheet.setSheetName(<span class="string">&quot;测试Sheet1&quot;</span> + i);</span><br><span class="line">                <span class="comment">//循环写入次数: j的自增条件是当不是最后一个Sheet的时候写入次数为正常的每个Sheet写入的次数,如果是最后一个就需要使用计算的次数lastSheetWriteCount</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; (i != sheetNum - <span class="number">1</span> ? oneSheetWriteCount : lastSheetWriteCount); j++) &#123;</span><br><span class="line">                    <span class="comment">//集合复用,便于GC清理</span></span><br><span class="line">                    dataList.clear();</span><br><span class="line">                    <span class="comment">//分页查询一次20w</span></span><br><span class="line">                    PageHelper.startPage(j + <span class="number">1</span> + oneSheetWriteCount * i, writeDataRows);</span><br><span class="line">                    List&lt;ActResultLog&gt; reslultList = actResultLogMapper.findByPage100w();</span><br><span class="line">                    <span class="keyword">if</span> (!CollectionUtils.isEmpty(reslultList)) &#123;</span><br><span class="line">                        reslultList.forEach(item -&gt; &#123;</span><br><span class="line">                            dataList.add(Arrays.asList(item.getOnlineseqid(), item.getBusinessid(), item.getBecifno(), item.getIvisresult(), item.getCreatedby(), Calendar.getInstance().getTime().toString(), item.getUpdateby(), Calendar.getInstance().getTime().toString(), item.getRisklevel()));</span><br><span class="line">                        &#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//写数据</span></span><br><span class="line">                    writer.write0(dataList, sheet, table);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 下载EXCEL</span></span><br><span class="line">            response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>((fileName).getBytes(<span class="string">&quot;gb2312&quot;</span>), <span class="string">&quot;ISO-8859-1&quot;</span>) + <span class="string">&quot;.xlsx&quot;</span>);</span><br><span class="line">            response.setContentType(<span class="string">&quot;multipart/form-data&quot;</span>);</span><br><span class="line">            response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">            writer.finish();</span><br><span class="line">            outputStream.flush();</span><br><span class="line">            <span class="comment">//导出时间结束</span></span><br><span class="line">            <span class="type">long</span> <span class="variable">endTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">            System.out.println(<span class="string">&quot;导出结束时间:&quot;</span> + endTime + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;导出所用时间:&quot;</span> + (endTime - startTime) / <span class="number">1000</span> + <span class="string">&quot;秒&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (outputStream != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    outputStream.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="300W数据的导入解决思路"><a href="#300W数据的导入解决思路" class="headerlink" title="300W数据的导入解决思路"></a><strong>300W数据的导入解决思路</strong></h4><p>1、首先是分批读取读取Excel中的300w数据，这一点EasyExcel有自己的解决方案，我们可以参考Demo即可，只需要把它分批的参数3000调大即可。我是用的20w；（一会儿代码一看就能明白）</p><p>2、其次就是往DB里插入，怎么去插入这20w条数据，当然不能一条一条的循环，应该批量插入这20w条数据，同样也不能使用Mybatis的批量插入语，因为效率也低。可以参考下面链接【Myabtis批量插入和JDBC批量插入性能对比】</p><p>3、使用JDBC+事务的批量操作将数据插入到数据库。（分批读取+JDBC分批插入+手动事务控制）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// EasyExcel的读取Excel数据的API</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">import2DBFromExcel10wTest</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> <span class="string">&quot;D:\\StudyWorkspace\\JavaWorkspace\\java_project_workspace\\idea_projects\\SpringBootProjects\\easyexcel\\exportFile\\excel300w.xlsx&quot;</span>;</span><br><span class="line">    <span class="comment">//记录开始读取Excel时间,也是导入程序开始时间</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">startReadTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    System.out.println(<span class="string">&quot;------开始读取Excel的Sheet时间(包括导入数据过程):&quot;</span> + startReadTime + <span class="string">&quot;ms------&quot;</span>);</span><br><span class="line">    <span class="comment">//读取所有Sheet的数据.每次读完一个Sheet就会调用这个方法</span></span><br><span class="line">    EasyExcel.read(fileName, <span class="keyword">new</span> <span class="title class_">EasyExceGeneralDatalListener</span>(actResultLogService2)).doReadAll();</span><br><span class="line">    <span class="type">long</span> <span class="variable">endReadTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    System.out.println(<span class="string">&quot;------结束读取Excel的Sheet时间(包括导入数据过程):&quot;</span> + endReadTime + <span class="string">&quot;ms------&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 事件监听</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EasyExceGeneralDatalListener</span> <span class="keyword">extends</span> <span class="title class_">AnalysisEventListener</span>&lt;Map&lt;Integer, String&gt;&gt; &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理业务逻辑的Service,也可以是Mapper</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> ActResultLogService2 actResultLogService2;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用于存储读取的数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Map&lt;Integer, String&gt;&gt; dataList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Map&lt;Integer, String&gt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">EasyExceGeneralDatalListener</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">EasyExceGeneralDatalListener</span><span class="params">(ActResultLogService2 actResultLogService2)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.actResultLogService2 = actResultLogService2;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">invoke</span><span class="params">(Map&lt;Integer, String&gt; data, AnalysisContext context)</span> &#123;</span><br><span class="line">        <span class="comment">//数据add进入集合</span></span><br><span class="line">        dataList.add(data);</span><br><span class="line">        <span class="comment">//size是否为100000条:这里其实就是分批.当数据等于10w的时候执行一次插入</span></span><br><span class="line">        <span class="keyword">if</span> (dataList.size() &gt;= ExcelConstants.GENERAL_ONCE_SAVE_TO_DB_ROWS) &#123;</span><br><span class="line">            <span class="comment">//存入数据库:数据小于1w条使用Mybatis的批量插入即可;</span></span><br><span class="line">            saveData();</span><br><span class="line">            <span class="comment">//清理集合便于GC回收</span></span><br><span class="line">            dataList.clear();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存数据到DB</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@MethodName</span>: saveData</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">saveData</span><span class="params">()</span> &#123;</span><br><span class="line">        actResultLogService2.import2DBFromExcel10w(dataList);</span><br><span class="line">        dataList.clear();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Excel中所有数据解析完毕会调用此方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>: context</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@MethodName</span>: doAfterAllAnalysed</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doAfterAllAnalysed</span><span class="params">(AnalysisContext context)</span> &#123;</span><br><span class="line">        saveData();</span><br><span class="line">        dataList.clear();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//JDBC工具类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCDruidUtils</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DataSource dataSource;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">   创建数据Properties集合对象加载加载配置文件</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">pro</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        <span class="comment">//加载数据库连接池对象</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//获取数据库连接池对象</span></span><br><span class="line">            pro.load(JDBCDruidUtils.class.getClassLoader().getResourceAsStream(<span class="string">&quot;druid.properties&quot;</span>));</span><br><span class="line">            dataSource = DruidDataSourceFactory.createDataSource(pro);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    获取连接</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="keyword">return</span> dataSource.getConnection();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关闭conn,和 statement独对象资源</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> connection</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> statement</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@MethodName</span>: close</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">(Connection connection, Statement statement)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (connection != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (statement != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                statement.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关闭 conn , statement 和resultset三个对象资源</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> connection</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> statement</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> resultSet</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@MethodName</span>: close</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">(Connection connection, Statement statement, ResultSet resultSet)</span> &#123;</span><br><span class="line">        close(connection, statement);</span><br><span class="line">        <span class="keyword">if</span> (resultSet != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                resultSet.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    获取连接池对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> DataSource <span class="title function_">getDataSource</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Service中具体业务逻辑</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试用Excel导入超过10w条数据,经过测试发现,使用Mybatis的批量插入速度非常慢,所以这里可以使用 数据分批+JDBC分批插入+事务来继续插入速度会非常快</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@MethodName</span>: import2DBFromExcel10w</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>: java.util.Map&lt;java.lang.String, java.lang.Object&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">import2DBFromExcel10w</span><span class="params">(List&lt;Map&lt;Integer, String&gt;&gt; dataList)</span> &#123;</span><br><span class="line">    HashMap&lt;String, Object&gt; result = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//结果集中数据为0时,结束方法.进行下一次调用</span></span><br><span class="line">    <span class="keyword">if</span> (dataList.size() == <span class="number">0</span>) &#123;</span><br><span class="line">        result.put(<span class="string">&quot;empty&quot;</span>, <span class="string">&quot;0000&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//JDBC分批插入+事务操作完成对10w数据的插入</span></span><br><span class="line">    <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(dataList.size() + <span class="string">&quot;条,开始导入到数据库时间:&quot;</span> + startTime + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line">        conn = JDBCDruidUtils.getConnection();</span><br><span class="line">        <span class="comment">//控制事务:默认不提交</span></span><br><span class="line">        conn.setAutoCommit(<span class="literal">false</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into ACT_RESULT_LOG (onlineseqid,businessid,becifno,ivisresult,createdby,createddate,updateby,updateddate,risklevel) values&quot;</span>;</span><br><span class="line">        sql += <span class="string">&quot;(?,?,?,?,?,?,?,?,?)&quot;</span>;</span><br><span class="line">        ps = conn.prepareStatement(sql);</span><br><span class="line">        <span class="comment">//循环结果集:这里循环不支持&quot;烂布袋&quot;表达式</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; dataList.size(); i++) &#123;</span><br><span class="line">            Map&lt;Integer, String&gt; item = dataList.get(i);</span><br><span class="line">            ps.setString(<span class="number">1</span>, item.get(<span class="number">0</span>));</span><br><span class="line">            ps.setString(<span class="number">2</span>, item.get(<span class="number">1</span>));</span><br><span class="line">            ps.setString(<span class="number">3</span>, item.get(<span class="number">2</span>));</span><br><span class="line">            ps.setString(<span class="number">4</span>, item.get(<span class="number">3</span>));</span><br><span class="line">            ps.setString(<span class="number">5</span>, item.get(<span class="number">4</span>));</span><br><span class="line">            ps.setTimestamp(<span class="number">6</span>, <span class="keyword">new</span> <span class="title class_">Timestamp</span>(System.currentTimeMillis()));</span><br><span class="line">            ps.setString(<span class="number">7</span>, item.get(<span class="number">6</span>));</span><br><span class="line">            ps.setTimestamp(<span class="number">8</span>, <span class="keyword">new</span> <span class="title class_">Timestamp</span>(System.currentTimeMillis()));</span><br><span class="line">            ps.setString(<span class="number">9</span>, item.get(<span class="number">8</span>));</span><br><span class="line">            <span class="comment">//将一组参数添加到此 PreparedStatement 对象的批处理命令中。</span></span><br><span class="line">            ps.addBatch();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//执行批处理</span></span><br><span class="line">        ps.executeBatch();</span><br><span class="line">        <span class="comment">//手动提交事务</span></span><br><span class="line">        conn.commit();</span><br><span class="line">        <span class="type">long</span> <span class="variable">endTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(dataList.size() + <span class="string">&quot;条,结束导入到数据库时间:&quot;</span> + endTime + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line">        System.out.println(dataList.size() + <span class="string">&quot;条,导入用时:&quot;</span> + (endTime - startTime) + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line">        result.put(<span class="string">&quot;success&quot;</span>, <span class="string">&quot;1111&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        result.put(<span class="string">&quot;exception&quot;</span>, <span class="string">&quot;0000&quot;</span>);</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">//关连接</span></span><br><span class="line">        JDBCDruidUtils.close(conn, ps);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;excel导入&quot;&gt;&lt;a href=&quot;#excel导入&quot; class=&quot;headerlink&quot; title=&quot;excel导入&quot;&gt;&lt;/a&gt;excel导入&lt;/h1&gt;&lt;h4 id=&quot;百万数据导入&quot;&gt;&lt;a href=&quot;#百万数据导入&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="springboot" scheme="http://duanyushuai.github.io/categories/springboot/"/>
    
    
    <category term="springboot" scheme="http://duanyushuai.github.io/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>设计模式</title>
    <link href="http://duanyushuai.github.io/2022/11/08/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://duanyushuai.github.io/2022/11/08/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-11-08T09:21:31.529Z</published>
    <updated>2022-11-11T12:14:52.138Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><h2 id="1-创建型模式"><a href="#1-创建型模式" class="headerlink" title="1.创建型模式"></a>1.创建型模式</h2><h4 id="1-单例模式"><a href="#1-单例模式" class="headerlink" title="1. 单例模式"></a>1. 单例模式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton singleton;  </span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span> <span class="params">()</span>&#123;&#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getSingleton</span><span class="params">()</span> &#123;  </span><br><span class="line">    <span class="keyword">if</span> (singleton == <span class="literal">null</span>) &#123;  </span><br><span class="line">        <span class="keyword">synchronized</span> (Singleton.class) &#123;  </span><br><span class="line">        <span class="keyword">if</span> (singleton == <span class="literal">null</span>) &#123;  </span><br><span class="line">            singleton = <span class="keyword">new</span> <span class="title class_">Singleton</span>();  </span><br><span class="line">        &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> singleton;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-原型"><a href="#2-原型" class="headerlink" title="2.原型"></a>2.原型</h4><p>创建重复对象 实现接口Cloneable</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### 3.工厂</span><br><span class="line"></span><br><span class="line">**简单工厂 **</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">/**</span><br><span class="line"> * 工厂的产品</span><br><span class="line"> */</span><br><span class="line">public abstract class AbstractCar &#123;</span><br><span class="line"></span><br><span class="line">    String engine;</span><br><span class="line">    public abstract void run();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MiniCar</span> <span class="keyword">extends</span> <span class="title class_">AbstractCar</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MiniCar</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.engine = <span class="string">&quot;四缸水平对置发动机&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(engine+<span class="string">&quot;--&gt; 嘟嘟嘟...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 具体产品</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VanCar</span> <span class="keyword">extends</span> <span class="title class_">AbstractCar</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">VanCar</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.engine = <span class="string">&quot;单杠柴油机&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(engine+<span class="string">&quot;--》嗒嗒嗒....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"> * 简单工厂</span><br><span class="line"> * <span class="number">1</span>、产品数量极少</span><br><span class="line"> */</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WuLinSimpleFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> type  Class: 好像具有扩展性，但是没有解决实际问题</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> AbstractCar <span class="title function_">newCar</span><span class="params">(String type)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//核心方法：一切从简</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;van&quot;</span>.equals(type))&#123;</span><br><span class="line">            <span class="comment">// 钣金、喷漆、放发动机、申请环保</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">VanCar</span>();</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;mini&quot;</span>.equals(type))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MiniCar</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//.....</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//更多的产品，违反开闭原则。应该直接扩展出一个类来造</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-建造者"><a href="#4-建造者" class="headerlink" title="4.建造者"></a>4.建造者</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//builder  lombok</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-结构模式"><a href="#2-结构模式" class="headerlink" title="2.结构模式"></a>2.结构模式</h2><h4 id="1-适配器模式"><a href="#1-适配器模式" class="headerlink" title="1.适配器模式"></a>1.适配器模式</h4><p>已有两个接口，在不改变两个接口的情况下，完成两个接口的合并</p><p><img src="/../img/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F1.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 继承的方式：类结构模型，适配转换到了翻译器的功能上</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JPMoviePlayerAdapter</span> <span class="keyword">extends</span> <span class="title class_">Zh_JPTranslator</span> <span class="keyword">implements</span> <span class="title class_">Player</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Player target;<span class="comment">//被适配对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JPMoviePlayerAdapter</span><span class="params">(Player target)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">play</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">play</span> <span class="operator">=</span> target.play();</span><br><span class="line">        <span class="comment">//转换字幕</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">translate</span> <span class="operator">=</span> translate(play);</span><br><span class="line">        System.out.println(<span class="string">&quot;日文：&quot;</span>+translate);</span><br><span class="line">        <span class="keyword">return</span> play;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.design.structural.adapter.obj;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.design.structural.adapter.Player;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.design.structural.adapter.Translator;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.design.structural.adapter.Zh_JPTranslator;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 组合的方式：对象结构模型，适配转换到了翻译器的功能上</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * （继承、组合）、封装、多态</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JPMoviePlayerAdapter</span> <span class="keyword">implements</span> <span class="title class_">Player</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//组合的方式</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Translator</span> <span class="variable">translator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Zh_JPTranslator</span>();</span><br><span class="line">    <span class="keyword">private</span> Player target;<span class="comment">//被适配对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JPMoviePlayerAdapter</span><span class="params">(Player target)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">play</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">play</span> <span class="operator">=</span> target.play();</span><br><span class="line">        <span class="comment">//转换字幕</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">translate</span> <span class="operator">=</span> translator.translate(play);</span><br><span class="line">        System.out.println(<span class="string">&quot;日文：&quot;</span>+translate);</span><br><span class="line">        <span class="keyword">return</span> play;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-桥接模式"><a href="#2-桥接模式" class="headerlink" title="2. 桥接模式"></a>2. 桥接模式</h4><p>真正引起一个类变换的维度直接抽取出来，通过组合的方式侨接起来</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1、抽象手机类</span></span><br><span class="line"><span class="comment"> *  手机有各种销售渠道价格都不一样</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractPhone</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//桥接在此.....设计期间就得想好</span></span><br><span class="line">    <span class="comment">//桥接+适配器 ...</span></span><br><span class="line">    AbstractSale sale; <span class="comment">//分离渠道【桥接的关注点】</span></span><br><span class="line"><span class="comment">//    abstract int getPrice();  如果这么写需要多少个实现。违反开闭原则</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前手机的描述</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">abstract</span> String <span class="title function_">getPhone</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSale</span><span class="params">(AbstractSale sale)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sale = sale;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 抽象销售渠道</span></span><br><span class="line"><span class="comment"> * PhoneOnSale  ==howToSale</span></span><br><span class="line"><span class="comment"> * PhoneOffSale == howToSale</span></span><br><span class="line"><span class="comment"> * PhoneStudentSale = howToSale</span></span><br><span class="line"><span class="comment"> * PhonePDD == howToSale</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractSale</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String type;</span><br><span class="line">    <span class="keyword">private</span> Integer price;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AbstractSale</span><span class="params">(String type,Integer price)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.type = type;</span><br><span class="line">        <span class="built_in">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">getSaleInfo</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;渠道：&quot;</span>+type+<span class="string">&quot;==&gt;&quot;</span>+<span class="string">&quot;价格：&quot;</span>+price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">howToSale</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//都不一样</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3-装饰器模式"><a href="#3-装饰器模式" class="headerlink" title="3. 装饰器模式"></a>3. 装饰器模式</h4><p>增强一个类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//wrapper Pattern</span></span><br><span class="line"><span class="comment">//已有的类功能不够用时，增强方法，当引用第三方就是适配器了</span></span><br></pre></td></tr></table></figure><h4 id="4-代理"><a href="#4-代理" class="headerlink" title="4.代理"></a>4.代理</h4><p><strong>动态代理</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdkTiktokProxy</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> T target;</span><br><span class="line">    <span class="comment">//接受被代理对象</span></span><br><span class="line">    JdkTiktokProxy(T target)&#123;</span><br><span class="line">        <span class="built_in">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取被代理对象的  代理对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> t</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>&lt;T&gt; T <span class="title function_">getProxy</span><span class="params">(T t)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * ClassLoader loader, 当前被代理对象的类加载器</span></span><br><span class="line"><span class="comment">         * Class&lt;?&gt;[] interfaces, 当前被代理对象所实现的所有接口</span></span><br><span class="line"><span class="comment">         * InvocationHandler h,</span></span><br><span class="line"><span class="comment">         *  当前被代理对象执行目标方法的时候我们使用h可以定义拦截增强方法</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> Proxy.newProxyInstance(</span><br><span class="line">                t.getClass().getClassLoader(),</span><br><span class="line">                t.getClass().getInterfaces(), <span class="comment">//必须接口</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">JdkTiktokProxy</span>(t));</span><br><span class="line">        <span class="keyword">return</span> (T)o;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义目标方法的拦截逻辑；每个方法都会进来的</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> proxy</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> method</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Throwable</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy,</span></span><br><span class="line"><span class="params">                         Method method,</span></span><br><span class="line"><span class="params">                         Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//反射执行</span></span><br><span class="line">        System.out.println(<span class="string">&quot;真正执行被代理对象的方法&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">invoke</span> <span class="operator">=</span> method.invoke(target, args);</span><br><span class="line">        System.out.println(<span class="string">&quot;返回值：一堆美女&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> invoke;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 动态代理模式：</span></span><br><span class="line"><span class="comment"> * JDK要求被代理对象必须有接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 代理对象和目标对象的相同点在于都是同一个接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ManTikTok</span> <span class="variable">leiTikTok</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LeiTikTok</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 动态代理机制。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">ManTikTok</span> <span class="variable">proxy</span> <span class="operator">=</span> JdkTiktokProxy.getProxy(leiTikTok);</span><br><span class="line">        proxy.tiktok();</span><br><span class="line"></span><br><span class="line">        ((SellTikTok)proxy).sell();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//能不能代理被代理对象本类自己的方法?proxy只能转成接口类</span></span><br><span class="line"><span class="comment">//        ((LeiTikTok)proxy).haha();</span></span><br><span class="line">        System.out.println(Arrays.asList(proxy.getClass().getInterfaces()));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>cglib</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1、使用cglib帮我们创建出代理对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CglibProxy</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//为任意对象创建代理</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>&lt;T&gt; T <span class="title function_">createProxy</span><span class="params">(T t)</span>&#123;</span><br><span class="line">        <span class="comment">//1、创建一个增强器</span></span><br><span class="line">        <span class="type">Enhancer</span> <span class="variable">enhancer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Enhancer</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2、设置要增强哪个个类的功能。增强器为这个类动态创建一个子类</span></span><br><span class="line">        enhancer.setSuperclass(t.getClass());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3、设置回调</span></span><br><span class="line">        enhancer.setCallback(<span class="keyword">new</span> <span class="title class_">MethodInterceptor</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Object <span class="title function_">intercept</span><span class="params">(Object obj,</span></span><br><span class="line"><span class="params">                                    Method method,  //为了能获取到原方法的一些元数据信息</span></span><br><span class="line"><span class="params">                                    Object[] args,</span></span><br><span class="line"><span class="params">                                    MethodProxy proxy)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                <span class="comment">//编写拦截的逻辑</span></span><br><span class="line">                System.out.println(<span class="string">&quot;cglib上场le .......xxx&quot;</span>);</span><br><span class="line">                <span class="comment">//当前方法的信息</span></span><br><span class="line"><span class="comment">//                method.get</span></span><br><span class="line"><span class="comment">//                method.getAnnotation()</span></span><br><span class="line">                <span class="comment">//目标方法进行执行</span></span><br><span class="line">                <span class="type">Object</span> <span class="variable">invoke</span> <span class="operator">=</span> proxy.invokeSuper(obj,args);</span><br><span class="line">                <span class="keyword">return</span> invoke;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> enhancer.create();</span><br><span class="line">        <span class="keyword">return</span> (T) o;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="5-外观模式"><a href="#5-外观模式" class="headerlink" title="5.外观模式"></a>5.外观模式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//去医院看病，可能要去挂号、门诊、划价、取药，让患者或患者家属觉得很复杂，如果有提供接待人员，只让接待人员来处理，就很方便。以此类比......</span></span><br><span class="line"><span class="comment">//JAVA 的三层开发模式。</span></span><br><span class="line"><span class="comment">//分布式系统的网关</span></span><br><span class="line"><span class="comment">//Tomcat源码中的RequestFacade干什么的？</span></span><br><span class="line"><span class="comment">//......</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="6-组合模式"><a href="#6-组合模式" class="headerlink" title="6.组合模式"></a>6.组合模式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//树形结构  层级结构</span></span><br></pre></td></tr></table></figure><h4 id="7-享元模式"><a href="#7-享元模式" class="headerlink" title="7.享元模式"></a>7.享元模式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//就是线程池</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 足道店：这相当于享元工厂</span></span><br><span class="line"><span class="comment"> *      店里面很多服务员。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 享元和原型</span></span><br><span class="line"><span class="comment"> * 1、享元返回的是这个本人。</span></span><br><span class="line"><span class="comment"> * 2、原型返回的是克隆人。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ZuDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String,AbstractWaitressFlyweight&gt; pool = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//享元，池子中有对象</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="type">BeautifulWaitress</span> <span class="variable">waitress</span> <span class="operator">=</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">BeautifulWaitress</span>(<span class="string">&quot;1111&quot;</span>,<span class="string">&quot;张三&quot;</span>,<span class="number">18</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">BeautifulWaitress</span> <span class="variable">waitress2</span> <span class="operator">=</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">BeautifulWaitress</span>(<span class="string">&quot;9527&quot;</span>,<span class="string">&quot;李四&quot;</span>,<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        pool.put(waitress.id,waitress);</span><br><span class="line">        pool.put(waitress2.id,waitress2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addWaitress</span><span class="params">(AbstractWaitressFlyweight waitressFlyweight)</span>&#123;</span><br><span class="line">        pool.put(UUID.randomUUID().toString(),waitressFlyweight);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> AbstractWaitressFlyweight <span class="title function_">getWaitress</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="type">AbstractWaitressFlyweight</span> <span class="variable">flyweight</span> <span class="operator">=</span> pool.get(name);</span><br><span class="line">        <span class="keyword">if</span>(flyweight == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span> (AbstractWaitressFlyweight value : pool.values()) &#123;</span><br><span class="line">                <span class="comment">//当前共享对象能否是否</span></span><br><span class="line">                <span class="keyword">if</span>(value.isCanService())&#123;</span><br><span class="line">                    <span class="keyword">return</span> value;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> flyweight;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 具体享元类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BeautifulWaitress</span> <span class="keyword">extends</span> <span class="title class_">AbstractWaitressFlyweight</span>&#123;</span><br><span class="line">    String id;<span class="comment">//工号</span></span><br><span class="line">    String name;<span class="comment">//名字</span></span><br><span class="line">    <span class="type">int</span> age;<span class="comment">//年龄</span></span><br><span class="line">    <span class="comment">//以上是不变的</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">service</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;工号：&quot;</span>+id+<span class="string">&quot;；&quot;</span>+name+<span class="string">&quot; &quot;</span>+age+<span class="string">&quot; 正在为您服务...&quot;</span>);</span><br><span class="line">        <span class="comment">//改变外部状态</span></span><br><span class="line">        <span class="built_in">this</span>.canService = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">end</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;工号：&quot;</span>+id+<span class="string">&quot;；&quot;</span>+name+<span class="string">&quot; &quot;</span>+age+<span class="string">&quot; 服务结束...请给五星好评&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.canService = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-行为模式"><a href="#3-行为模式" class="headerlink" title="3.行为模式"></a>3.行为模式</h2><h4 id="1-模版方法"><a href="#1-模版方法" class="headerlink" title="1.模版方法"></a>1.模版方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1、定义模板</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">CookTemplate</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义算法：  定义好了模板</span></span><br><span class="line"><span class="comment">     * 父类可以实现某些步骤</span></span><br><span class="line"><span class="comment">     * 留关键给子类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cook</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//定义算法步骤</span></span><br><span class="line">        heating();   <span class="comment">//v</span></span><br><span class="line">        addfood();</span><br><span class="line">        addsalt();</span><br><span class="line">        stirfry();   <span class="comment">//v</span></span><br><span class="line">        end();      <span class="comment">//v</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//加热方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">heating</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;开火...&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加食物</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">addfood</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//加盐</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">addsalt</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//翻炒</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">stirfry</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;翻炒中...&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//出锅</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">end</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;出锅....&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-策略模式"><a href="#2-策略模式" class="headerlink" title="2.策略模式"></a>2.策略模式</h4><p>定义整体方法，可以将一部分抽离出来，装配策略</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 环境类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TeamGNR</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//抽取游戏策略算法，并进行引用</span></span><br><span class="line">    <span class="keyword">private</span> GameStrategy gameStrategy;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setGameStrategy</span><span class="params">(GameStrategy gameStrategy)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.gameStrategy = gameStrategy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startGame</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;游戏开始.....&quot;</span>);</span><br><span class="line">        <span class="comment">//游戏策略</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        gameStrategy.warStrategy();</span><br><span class="line">        System.out.println(<span class="string">&quot;win......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-状态模式"><a href="#3-状态模式" class="headerlink" title="3.状态模式"></a>3.状态模式</h4><p>状态机</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 竞赛状态</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MatchState</span> <span class="keyword">implements</span> <span class="title class_">TeamState</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">playGame</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;全力以赴打比赛....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//状态模式的核心</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> TeamState <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">VocationState</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="4-中介者模式"><a href="#4-中介者模式" class="headerlink" title="4.中介者模式"></a>4.中介者模式</h4><p><img src="/../img/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F2.png"></p><p><img src="/../img/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F3.png"></p><h4 id="5-观察者模式"><a href="#5-观察者模式" class="headerlink" title="5.观察者模式"></a>5.观察者模式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">**</span><br><span class="line"> * 抽象观察者</span><br><span class="line"> */</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractFans</span> &#123;</span><br><span class="line"></span><br><span class="line">    List&lt;AbstractTikToker&gt; tikTokers;<span class="comment">//双向观察</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">acceptMsg</span><span class="params">(String msg)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">follow</span><span class="params">(AbstractTikToker tikToker)</span>&#123;</span><br><span class="line">        <span class="comment">//主播增粉了</span></span><br><span class="line">        tikToker.addFans(<span class="built_in">this</span>);</span><br><span class="line"><span class="comment">//        for (AbstractTikToker toker : tikTokers) &#123;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HumanFans</span> <span class="keyword">extends</span> <span class="title class_">AbstractFans</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">acceptMsg</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;主播说：&quot;</span>+msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 抖音主播</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 粉丝观察主播....</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractTikToker</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加粉丝</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">addFans</span><span class="params">(AbstractFans fans)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通知粉丝</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">notifyFans</span><span class="params">(String msg)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 主播</span></span><br><span class="line"><span class="comment"> * 双向观察</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MMTikToker</span>  <span class="keyword">extends</span> <span class="title class_">AbstractTikToker</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1、观察者的核心1</span></span><br><span class="line">    List&lt;AbstractFans&gt; fansList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">startSell</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;雷丰阳... 开始卖货...源码设计课&quot;</span>);</span><br><span class="line">        notifyFans(<span class="string">&quot;我开始卖东西了，是源码设计课，只要666&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">endSell</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;雷丰阳... 结束卖货...源码设计课&quot;</span>);</span><br><span class="line">        notifyFans(<span class="string">&quot;课已经卖完了，记得五星好评...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">addFans</span><span class="params">(AbstractFans fans)</span> &#123;</span><br><span class="line">        fansList.add(fans);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">notifyFans</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        <span class="comment">//1、所有粉丝拿来通知</span></span><br><span class="line">        <span class="keyword">for</span> (AbstractFans fans : fansList) &#123;</span><br><span class="line">            fans.acceptMsg(msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="6-备忘录模式"><a href="#6-备忘录模式" class="headerlink" title="6.备忘录模式"></a>6.备忘录模式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//什么场景用到？</span></span><br><span class="line"><span class="comment">//游戏存档</span></span><br><span class="line"><span class="comment">//数据库保存点事务（savepoint）</span></span><br><span class="line"><span class="comment">//session活化钝化</span></span><br></pre></td></tr></table></figure><p><img src="/../img/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F4.png"></p><h4 id="7-解释器模式"><a href="#7-解释器模式" class="headerlink" title="7.解释器模式"></a>7.解释器模式</h4><p><img src="/Users/duanyushuai/blog/source/img/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F5.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 终结符表达式</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 多少种解析规则就需要定义多少种规则类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TerminalExpression</span> <span class="keyword">extends</span> <span class="title class_">IDCardExpression</span> &#123;</span><br><span class="line">    String[] data;</span><br><span class="line">    String symbol; <span class="comment">//定义解析用的符号如  ： -</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TerminalExpression</span><span class="params">(String[] data,String symbol)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">        <span class="built_in">this</span>.symbol = symbol;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">interpret</span><span class="params">(String expression)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 非终结表达式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrExpression</span> <span class="keyword">extends</span> <span class="title class_">IDCardExpression</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//组合两个终结表达式。最终的判断结果是终结表达式判断出来的，这个表达式只是一个桥梁</span></span><br><span class="line">    <span class="keyword">private</span> IDCardExpression cityExp;</span><br><span class="line">    <span class="keyword">private</span> IDCardExpression typeExp;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">OrExpression</span><span class="params">(IDCardExpression cityExp, IDCardExpression typeExp)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.cityExp = cityExp;</span><br><span class="line">        <span class="built_in">this</span>.typeExp = typeExp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">interpret</span><span class="params">(String expression)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span>  cityExp.interpret(expression) || typeExp.interpret(expression);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="9-命令模式"><a href="#9-命令模式" class="headerlink" title="9.命令模式"></a>9.命令模式</h4><p>mvc就是命令模式</p><h4 id="10-迭代器模式"><a href="#10-迭代器模式" class="headerlink" title="10. 迭代器模式"></a>10. 迭代器模式</h4><h4 id="11-访问者模式"><a href="#11-访问者模式" class="headerlink" title="11.访问者模式"></a>11.访问者模式</h4><p> 将作用于某种数据结构中的各元素的操作分离出来封装成独立的类，使其在不改变数据结构的前提下可以添加作用于这些元素的新的操作，为数据结构中的每个元素提供多种访问方式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CPU</span>  <span class="keyword">extends</span> <span class="title class_">Hardware</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CPU</span><span class="params">(String command)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(command);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(Vistor vistor)</span> &#123;</span><br><span class="line">        <span class="comment">//软件包要能访问当前硬件</span></span><br><span class="line">        vistor.visitCPU(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Disk</span> <span class="keyword">extends</span> <span class="title class_">Hardware</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Disk</span><span class="params">(String command)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(command);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(Vistor vistor)</span> &#123;</span><br><span class="line">        vistor.visitDisk(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span>  <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Hardware</span> &#123;</span><br><span class="line">    String command;<span class="comment">//封装硬件的处理指令</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Hardware</span><span class="params">(String command)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.command = command;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">work</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(command);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义接受软件升级包的方法。这个方法应该具体硬件去实现</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(Vistor vistor)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 升级包可以更改指令</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UpdatePackage</span> <span class="keyword">implements</span> <span class="title class_">Vistor</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">visitCPU</span><span class="params">(CPU cpu)</span> &#123;</span><br><span class="line">        cpu.command+=<span class="string">&quot;；正在联网查询...&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">visitDisk</span><span class="params">(Disk disk)</span> &#123;</span><br><span class="line">        disk.command+=<span class="string">&quot;；正在保存记录&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Vistor</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">visitCPU</span><span class="params">(CPU cpu)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">visitDisk</span><span class="params">(Disk disk)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[toc]&lt;/p&gt;
&lt;h1 id=&quot;设计模式&quot;&gt;&lt;a href=&quot;#设计模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式&quot;&gt;&lt;/a&gt;设计模式&lt;/h1&gt;&lt;h2 id=&quot;1-创建型模式&quot;&gt;&lt;a href=&quot;#1-创建型模式&quot; class=&quot;headerlin</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>树形结构</title>
    <link href="http://duanyushuai.github.io/2022/11/04/%E6%A0%91%E5%BD%A2%E6%8E%A5%E5%8F%A3/"/>
    <id>http://duanyushuai.github.io/2022/11/04/%E6%A0%91%E5%BD%A2%E6%8E%A5%E5%8F%A3/</id>
    <published>2022-11-04T09:20:20.358Z</published>
    <updated>2022-11-06T02:45:36.918Z</updated>
    
    <content type="html"><![CDATA[<h1 id="树形结构怎么做"><a href="#树形结构怎么做" class="headerlink" title="树形结构怎么做"></a>树形结构怎么做</h1><p>**实体类 **</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>变成派大星</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer  Id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer pid;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Node&gt; treeNode = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(<span class="type">int</span> id, <span class="type">int</span> pid)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.Id = id;</span><br><span class="line">        <span class="built_in">this</span>.pid = pid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(<span class="type">int</span> id, <span class="type">int</span> pid, String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(id, pid);</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> List&lt;Node&gt; <span class="title function_">handleTreeVo</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">Node</span> <span class="variable">first</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="number">1</span>, <span class="number">0</span>, <span class="string">&quot;first&quot;</span>);</span><br><span class="line">  <span class="type">Node</span> <span class="variable">second</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="number">2</span>, <span class="number">1</span>, <span class="string">&quot;second&quot;</span>);</span><br><span class="line"> <span class="type">Node</span> <span class="variable">third</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="number">3</span>, <span class="number">2</span>, <span class="string">&quot;third&quot;</span>);</span><br><span class="line"> <span class="type">Node</span> <span class="variable">second001</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="number">4</span>, <span class="number">1</span>, <span class="string">&quot;second001&quot;</span>);</span><br><span class="line"> <span class="type">Node</span> <span class="variable">third001</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="number">5</span>, <span class="number">4</span>, <span class="string">&quot;third001&quot;</span>);</span><br><span class="line"> <span class="comment">// 组装树状数据</span></span><br><span class="line">List&lt;Node&gt; nodes = Arrays.asList(first,second,third,second001,third001);</span><br><span class="line"> <span class="keyword">return</span> buildTree(nodes);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> List&lt;Node&gt; <span class="title function_">buildTree</span><span class="params">(List&lt;Node&gt; nodes)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将这些非顶级节点的数据按pid进行分组   这个是根据pid为key 第一步过滤非Pid=0的节点  第二步进行分组</span></span><br><span class="line">     Map&lt;Integer, List&lt;Node&gt;&gt; nodeMap = nodes.stream().filter(node-&gt;node.getPid()!=<span class="number">0</span>)</span><br><span class="line">    .collect(Collectors.groupingBy(node -&gt; node.getPid()));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//循环设置对应的子节点（根据id = pid） 上一步以pid为Key 所以就直接循环获取</span></span><br><span class="line">    nodes.forEach(node -&gt; node.setTreeNode(nodeMap.get(node.getId())));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//过滤第一层不是Pid为零的数据 也就是没有根节点的数据</span></span><br><span class="line">    List&lt;Node&gt; treeNode = nodes.stream().filter(node -&gt; node.getPid() == <span class="number">0</span>).collect(Collectors.toList());</span><br><span class="line">    <span class="keyword">return</span> treeNode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cn.hutool.core.collection.CollUtil;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.toolkit.CollectionUtils;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.function.BiConsumer;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Function;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Predicate;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 变成派大星</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TreeUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> list             源数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> setChildListFn   设置递归的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> idFn             获取id的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pidFn            获取父id的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> getRootCondition 获取根节点的提哦啊见</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 将List 转换成 Tree</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;M, T&gt; List&lt;M&gt; <span class="title function_">listToTree</span><span class="params">(List&lt;M&gt; list,</span></span><br><span class="line"><span class="params">                                            Function&lt;M, T&gt; idFn,</span></span><br><span class="line"><span class="params">                                            Function&lt;M, T&gt; pidFn,</span></span><br><span class="line"><span class="params">                                            BiConsumer&lt;M, List&lt;M&gt;&gt; setChildListFn,</span></span><br><span class="line"><span class="params">                                            Predicate&lt;M&gt; getRootCondition)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (CollUtil.isEmpty(list)) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        Map&lt;T, List&lt;M&gt;&gt; listMap = list.stream().collect(Collectors.groupingBy(pidFn));</span><br><span class="line">        list.forEach(model -&gt; setChildListFn.accept(model, listMap.get(idFn.apply(model))));</span><br><span class="line">        <span class="keyword">return</span> list.stream().filter(getRootCondition).collect(Collectors.toList());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;M&gt; List&lt;M&gt; <span class="title function_">treeToList</span><span class="params">(List&lt;M&gt; source,</span></span><br><span class="line"><span class="params">                                         Function&lt;M, List&lt;M&gt;&gt; getChildListFn,</span></span><br><span class="line"><span class="params">                                         BiConsumer&lt;M, List&lt;M&gt;&gt; setChildListFn,</span></span><br><span class="line"><span class="params">                                         Predicate&lt;M&gt; getRootCondition)</span> &#123;</span><br><span class="line">        List&lt;M&gt; target = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isNotEmpty(source)) &#123;</span><br><span class="line">            treeToList(source, target, getChildListFn);</span><br><span class="line">            target.forEach(model -&gt; setChildListFn.accept(model, <span class="literal">null</span>));</span><br><span class="line">            target.addAll(target.stream().filter(getRootCondition).collect(Collectors.toList()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> &lt;F&gt; <span class="keyword">void</span> <span class="title function_">treeToList</span><span class="params">(List&lt;F&gt; source,</span></span><br><span class="line"><span class="params">                                       List&lt;F&gt; target,</span></span><br><span class="line"><span class="params">                                       Function&lt;F, List&lt;F&gt;&gt; getChildListFn)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isNotEmpty(source)) &#123;</span><br><span class="line">            target.addAll(source);</span><br><span class="line">            source.forEach(model -&gt; &#123;</span><br><span class="line">                List&lt;F&gt; childList = getChildListFn.apply(model);</span><br><span class="line">                <span class="keyword">if</span> (CollectionUtils.isNotEmpty(childList)) &#123;</span><br><span class="line">                    treeToList(childList, target, getChildListFn);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Node&gt; <span class="title function_">handleTree</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">Node</span> <span class="variable">first</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="number">1</span>, <span class="number">0</span>, <span class="string">&quot;first&quot;</span>);</span><br><span class="line">    <span class="type">Node</span> <span class="variable">second</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="number">2</span>, <span class="number">1</span>, <span class="string">&quot;second&quot;</span>);</span><br><span class="line">    <span class="type">Node</span> <span class="variable">third</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="number">3</span>, <span class="number">2</span>, <span class="string">&quot;third&quot;</span>);</span><br><span class="line">    <span class="type">Node</span> <span class="variable">second001</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="number">4</span>, <span class="number">1</span>, <span class="string">&quot;second001&quot;</span>);</span><br><span class="line">    <span class="type">Node</span> <span class="variable">third001</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="number">5</span>, <span class="number">4</span>, <span class="string">&quot;third001&quot;</span>);</span><br><span class="line">    List&lt;Node&gt; nodes = Arrays.asList(first,second,third,second001,third001);</span><br><span class="line">    List&lt;Node&gt; nodeList = TreeUtils.listToTree(nodes, Node::getId, Node::getPid, Node::setTreeNode, (l) -&gt; l.getPid() == <span class="number">0</span>);</span><br><span class="line">     </span><br><span class="line">    <span class="comment">// 树状结构转换成 List 也就是还原数据</span></span><br><span class="line">    <span class="keyword">return</span> TreeUtils.treeToList(nodeList, Node::getTreeNode, Node::setTreeNode, (l) -&gt; l.getPid() == <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;树形结构怎么做&quot;&gt;&lt;a href=&quot;#树形结构怎么做&quot; class=&quot;headerlink&quot; title=&quot;树形结构怎么做&quot;&gt;&lt;/a&gt;树形结构怎么做&lt;/h1&gt;&lt;p&gt;**实体类 **&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://duanyushuai.github.io/2022/11/04/Untitled/"/>
    <id>http://duanyushuai.github.io/2022/11/04/Untitled/</id>
    <published>2022-11-04T09:20:14.191Z</published>
    <updated>2022-11-04T09:20:14.191Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>链表</title>
    <link href="http://duanyushuai.github.io/2022/10/26/%E7%AE%97%E6%B3%95/"/>
    <id>http://duanyushuai.github.io/2022/10/26/%E7%AE%97%E6%B3%95/</id>
    <published>2022-10-26T12:26:17.945Z</published>
    <updated>2022-11-03T10:53:46.135Z</updated>
    
    <content type="html"><![CDATA[<h1 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h1><h4 id="1-反转列表"><a href="#1-反转列表" class="headerlink" title="1. 反转列表"></a>1. 反转列表</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">public class ListNode &#123;</span></span><br><span class="line"><span class="comment">    int val;</span></span><br><span class="line"><span class="comment">    ListNode next = null;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    ListNode(int val) &#123;</span></span><br><span class="line"><span class="comment">        this.val = val;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">ReverseList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">rHead</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(-<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">while</span>(head!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">p</span> <span class="operator">=</span> head;</span><br><span class="line">            head = head.next;</span><br><span class="line">            p.next = rHead.next;</span><br><span class="line">            rHead.next = p;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> rHead.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">ReverseList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">newHead</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">temp</span> <span class="operator">=</span><span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">while</span>(head!=<span class="literal">null</span>)&#123;</span><br><span class="line">             temp = head.next;</span><br><span class="line">            head.next = newHead;</span><br><span class="line">            newHead = head;</span><br><span class="line">            head = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> newHead;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-列表执行区间内反转"><a href="#2-列表执行区间内反转" class="headerlink" title="2. 列表执行区间内反转"></a>2. 列表执行区间内反转</h4><p>将一个节点数为 size 链表 m 位置到 n 位置之间的区间反转，要求时间复杂度 O(n)<em>O</em>(<em>n</em>)，空间复杂度 O(1)<em>O</em>(1)。<br>例如：<br>给出的链表为 1\to 2 \to 3 \to 4 \to 5 \to NULL1→2→3→4→5→<em>N<strong>U</strong>L**L</em>, m&#x3D;2,n&#x3D;4<em>m</em>&#x3D;2,<em>n</em>&#x3D;4,<br>返回 1\to 4\to 3\to 2\to 5\to NULL1→4→3→2→5→<em>N<strong>U</strong>L**L</em>.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *   int val;</span></span><br><span class="line"><span class="comment"> *   ListNode next = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> head ListNode类 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> m int整型 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> n int整型 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> ListNode类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">       <span class="comment">// 解法一：双指针(两次遍历)</span></span><br><span class="line">       <span class="comment">//说明：方便理解，以下注释中将用left，right分别代替m,n节点 </span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">reverseBetween</span> <span class="params">(ListNode head, <span class="type">int</span> m, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">             <span class="comment">//设置虚拟头节点</span></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">dummyNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(-<span class="number">1</span>);</span><br><span class="line">        dummyNode.next = head;</span><br><span class="line"></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">pre</span> <span class="operator">=</span> dummyNode;</span><br><span class="line">        <span class="comment">//1.走left-1步到left的前一个节点</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m-<span class="number">1</span>;i++)&#123;</span><br><span class="line">            pre = pre.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.走roght-left+1步到right节点</span></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">rigthNode</span> <span class="operator">=</span> pre;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n-m+<span class="number">1</span>;i++)&#123;</span><br><span class="line">            rigthNode = rigthNode.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.截取出一个子链表</span></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">leftNode</span> <span class="operator">=</span> pre.next;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> rigthNode.next;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.切断链接</span></span><br><span class="line">        pre.next=<span class="literal">null</span>;</span><br><span class="line">        rigthNode.next=<span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.反转局部链表</span></span><br><span class="line">        reverseLinkedList(leftNode);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6.接回原来的链表</span></span><br><span class="line">        pre.next = rigthNode;</span><br><span class="line">        leftNode.next = cur;</span><br><span class="line">        <span class="keyword">return</span> dummyNode.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//反转局部链表</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">reverseLinkedList</span><span class="params">(ListNode head)</span>&#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">pre</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span>(cur!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//Cur_next 指向cur节点的下一个节点</span></span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">Cur_next</span> <span class="operator">=</span> cur.next;</span><br><span class="line">            cur.next = pre;</span><br><span class="line">            pre = cur;</span><br><span class="line">            cur = Cur_next ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3-链表每k组反转"><a href="#3-链表每k组反转" class="headerlink" title="3. 链表每k组反转"></a>3. 链表每k组反转</h4><p>将给出的链表中的节点每 k 个一组翻转，返回翻转后的链表<br>如果链表中的节点数不是 k 的倍数，将最后剩下的节点保持原样<br>你不能更改节点中的值，只能更改节点本身。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">reverseKGroup</span> <span class="params">(ListNode head, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="comment">//找到每次翻转的尾部</span></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">tail</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="comment">//遍历k次到尾部 </span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; k; i++)&#123; </span><br><span class="line">            <span class="comment">//如果不足k到了链表尾，直接返回，不翻转</span></span><br><span class="line">            <span class="keyword">if</span>(tail == <span class="literal">null</span>) </span><br><span class="line">                <span class="keyword">return</span> head;</span><br><span class="line">            tail = tail.next; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//翻转时需要的前序和当前节点</span></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">pre</span> <span class="operator">=</span> <span class="literal">null</span>; </span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="comment">//在到达当前段尾节点前</span></span><br><span class="line">        <span class="keyword">while</span>(cur != tail)&#123; </span><br><span class="line">            <span class="comment">//翻转</span></span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">temp</span> <span class="operator">=</span> cur.next; </span><br><span class="line">            cur.next = pre;</span><br><span class="line">            pre = cur;</span><br><span class="line">            cur = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//当前尾指向下一段要翻转的链表</span></span><br><span class="line">        head.next = reverseKGroup(tail, k); </span><br><span class="line">        <span class="keyword">return</span> pre;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="4-合并两个排序的链表"><a href="#4-合并两个排序的链表" class="headerlink" title="4. 合并两个排序的链表"></a>4. 合并两个排序的链表</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">public class ListNode &#123;</span></span><br><span class="line"><span class="comment">    int val;</span></span><br><span class="line"><span class="comment">    ListNode next = null;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    ListNode(int val) &#123;</span></span><br><span class="line"><span class="comment">        this.val = val;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">Merge</span><span class="params">(ListNode list1, ListNode list2)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(-<span class="number">1</span>);</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">head</span> <span class="operator">=</span> temp;</span><br><span class="line">        <span class="keyword">while</span> (list1 != <span class="literal">null</span> &amp;&amp; list2 != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (list1.val &lt;= list2.val) &#123;</span><br><span class="line">                temp.next = list1;</span><br><span class="line">                temp = temp.next;</span><br><span class="line">                list1 = list1.next;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                temp.next = list2;</span><br><span class="line">                temp = temp.next;</span><br><span class="line">                list2 = list2.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (list1 == <span class="literal">null</span>) &#123;</span><br><span class="line">            temp.next = list2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (list2 == <span class="literal">null</span>) &#123;</span><br><span class="line">            temp.next = list1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//递归</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">Merge</span><span class="params">(ListNode list1,ListNode list2)</span> &#123;</span><br><span class="line">        <span class="comment">// list1 list2为空的情况</span></span><br><span class="line">        <span class="keyword">if</span>(list1 == <span class="literal">null</span> || list2 == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> list1 != <span class="literal">null</span> ? list1 : list2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 两个链表元素依次对比</span></span><br><span class="line">        <span class="keyword">if</span>(list1.val &lt;= list2.val)&#123;</span><br><span class="line">            <span class="comment">// 递归计算 list1.next, list2</span></span><br><span class="line">            list1.next = Merge(list1.next, list2);</span><br><span class="line">            <span class="keyword">return</span> list1;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">// 递归计算 list1, list2.next</span></span><br><span class="line">            list2.next = Merge(list1, list2.next);</span><br><span class="line">            <span class="keyword">return</span> list2;</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-合并k个已排序的列表"><a href="#5-合并k个已排序的列表" class="headerlink" title="5. 合并k个已排序的列表"></a>5. 合并k个已排序的列表</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">mergeKLists</span><span class="params">(ArrayList&lt;ListNode&gt; lists)</span> &#123;</span><br><span class="line">        <span class="comment">//小顶堆</span></span><br><span class="line">        Queue&lt;ListNode&gt; pq = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;((v1, v2) -&gt; v1.val - v2.val);</span><br><span class="line">        <span class="comment">//遍历所有链表第一个元素</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; lists.size(); i++) &#123;</span><br><span class="line">            <span class="comment">//不为空则加入小顶堆</span></span><br><span class="line">            <span class="keyword">if</span> (lists.get(i) != <span class="literal">null</span>)</span><br><span class="line">                pq.offer(lists.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//加一个表头</span></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">res</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(-<span class="number">1</span>);</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">head</span> <span class="operator">=</span> res;</span><br><span class="line">        <span class="comment">//直到小顶堆为空</span></span><br><span class="line">        <span class="keyword">while</span> (!pq.isEmpty()) &#123;</span><br><span class="line">            <span class="comment">//取出最小的元素</span></span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">temp</span> <span class="operator">=</span> pq.poll();</span><br><span class="line">            <span class="comment">//连接</span></span><br><span class="line">            head.next = temp;</span><br><span class="line">            head = head.next;</span><br><span class="line">            <span class="comment">//每次取出链表的后一个元素加入小顶堆</span></span><br><span class="line">            <span class="keyword">if</span> (temp.next != <span class="literal">null</span>)</span><br><span class="line">                pq.add(temp.next);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//去掉表头</span></span><br><span class="line">        <span class="keyword">return</span> res.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="6-链表中的环的入口节点"><a href="#6-链表中的环的入口节点" class="headerlink" title="6. 链表中的环的入口节点"></a>6. 链表中的环的入口节点</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> public class ListNode &#123;</span></span><br><span class="line"><span class="comment">    int val;</span></span><br><span class="line"><span class="comment">    ListNode next = null;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    ListNode(int val) &#123;</span></span><br><span class="line"><span class="comment">        this.val = val;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">EntryNodeOfLoop</span><span class="params">(ListNode pHead)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (pHead == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">slow</span>  <span class="operator">=</span> pHead;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">fast</span> <span class="operator">=</span> pHead;</span><br><span class="line">        <span class="keyword">while</span> (fast != <span class="literal">null</span> &amp;&amp; fast.next != <span class="literal">null</span>) &#123;</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            <span class="keyword">if</span> (slow == fast)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (fast == <span class="literal">null</span> || fast.next == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        fast = pHead;</span><br><span class="line">        <span class="keyword">while</span> (fast != slow) &#123;</span><br><span class="line">            fast = fast.next;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> fast;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 哈希表 </span></span><br><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">EntryNodeOfLoop</span><span class="params">(ListNode pHead)</span> &#123;</span><br><span class="line">        <span class="comment">// 使用set来记录出现的结点</span></span><br><span class="line">        HashSet&lt;ListNode&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span>(pHead != <span class="literal">null</span>)&#123;</span><br><span class="line">           <span class="comment">// 当set中包含结点，说明第一次出现重复的结点，即环的入口结点</span></span><br><span class="line">            <span class="keyword">if</span>(set.contains(pHead))&#123;</span><br><span class="line">                <span class="keyword">return</span> pHead;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// set中加入未重复的结点</span></span><br><span class="line">            set.add(pHead);</span><br><span class="line">            pHead = pHead.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="7-删除链表最后K的节点"><a href="#7-删除链表最后K的节点" class="headerlink" title="7. 删除链表最后K的节点"></a>7. 删除链表最后K的节点</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *   int val;</span></span><br><span class="line"><span class="comment"> *   ListNode next = null;</span></span><br><span class="line"><span class="comment"> *   public ListNode(int val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *   &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pHead ListNode类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> k int整型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> ListNode类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">FindKthToTail</span> <span class="params">(ListNode pHead, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="comment">// write code here</span></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">temp</span> <span class="operator">=</span> pHead;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (temp == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> temp;</span><br><span class="line">            &#125;</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (temp != <span class="literal">null</span>) &#123;</span><br><span class="line">            pHead = pHead.next;</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pHead;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8-删除链表倒数第n的节点"><a href="#8-删除链表倒数第n的节点" class="headerlink" title="8.删除链表倒数第n的节点"></a>8.删除链表倒数第n的节点</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *   int val;</span></span><br><span class="line"><span class="comment"> *   ListNode next = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> head ListNode类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> n int整型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> ListNode类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">removeNthFromEnd</span> <span class="params">(ListNode head, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="comment">// write code here</span></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">temp</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n + <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (temp == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> head.next;</span><br><span class="line">            &#125;</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">pre</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span> (temp != <span class="literal">null</span>) &#123;</span><br><span class="line">            pre = pre.next;</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        pre.next = pre.next.next;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9-寻找两个链表公共节点"><a href="#9-寻找两个链表公共节点" class="headerlink" title="9. 寻找两个链表公共节点"></a>9. 寻找两个链表公共节点</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">FindFirstCommonNode</span><span class="params">(ListNode pHead1, ListNode pHead2)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">l1</span> <span class="operator">=</span> pHead1;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">l2</span> <span class="operator">=</span> pHead2;</span><br><span class="line">        <span class="keyword">while</span> (l1 != l2) &#123;</span><br><span class="line">            l1 = (l1 == <span class="literal">null</span>) ? pHead2 : l1.next;</span><br><span class="line">            l2 = (l2 == <span class="literal">null</span>) ? pHead1 : l2.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> l1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="10-链表相加"><a href="#10-链表相加" class="headerlink" title="10. 链表相加"></a>10. 链表相加</h4><p>例如：链表 1 为 9-&gt;3-&gt;7，链表 2 为 6-&gt;3，最后生成新的结果链表为 1-&gt;0-&gt;0-&gt;0。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.*;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *   int val;</span></span><br><span class="line"><span class="comment"> *   ListNode next = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> head1 ListNode类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> head2 ListNode类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> ListNode类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">addInList</span> <span class="params">(ListNode head1, ListNode head2)</span> &#123;</span><br><span class="line">        <span class="comment">// write code here</span></span><br><span class="line">        <span class="keyword">if</span> (head1 == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> head2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (head2 == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> head1;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        head1 = reverse(head1);</span><br><span class="line">        head2 = reverse(head2);</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">head</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(-<span class="number">1</span>);</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">newHead</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (head1 != <span class="literal">null</span> || head2 != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">val</span> <span class="operator">=</span> temp;</span><br><span class="line">            <span class="keyword">if</span> (head1 != <span class="literal">null</span>) &#123;</span><br><span class="line">                val += head1.val;</span><br><span class="line">                head1 = head1.next;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (head2 != <span class="literal">null</span>) &#123;</span><br><span class="line">                val += head2.val;</span><br><span class="line">                head2 = head2.next;</span><br><span class="line">            &#125;</span><br><span class="line">            temp = val / <span class="number">10</span>;</span><br><span class="line">            newHead.next = <span class="keyword">new</span> <span class="title class_">ListNode</span>(val % <span class="number">10</span>);</span><br><span class="line">            newHead = newHead.next;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (temp &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            newHead.next = <span class="keyword">new</span> <span class="title class_">ListNode</span>(temp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> reverse(head.next);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">reverse</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">rHead</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(-<span class="number">1</span>);</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">temp</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span> (temp != <span class="literal">null</span>) &#123;</span><br><span class="line">            temp = temp.next;</span><br><span class="line">            head.next = rHead.next;</span><br><span class="line">            rHead.next = head;</span><br><span class="line">            head = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> rHead.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;链表&quot;&gt;&lt;a href=&quot;#链表&quot; class=&quot;headerlink&quot; title=&quot;链表&quot;&gt;&lt;/a&gt;链表&lt;/h1&gt;&lt;h4 id=&quot;1-反转列表&quot;&gt;&lt;a href=&quot;#1-反转列表&quot; class=&quot;headerlink&quot; title=&quot;1. 反转列表&quot;&gt;&lt;/a&gt;</summary>
      
    
    
    
    
    <category term="链表" scheme="http://duanyushuai.github.io/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>spring Validation 学习</title>
    <link href="http://duanyushuai.github.io/2022/10/14/spring%20validation/"/>
    <id>http://duanyushuai.github.io/2022/10/14/spring%20validation/</id>
    <published>2022-10-14T12:00:00.000Z</published>
    <updated>2022-10-18T13:42:45.571Z</updated>
    
    <content type="html"><![CDATA[<h2 id="spring-Validation-学习"><a href="#spring-Validation-学习" class="headerlink" title="spring Validation 学习"></a>spring Validation 学习</h2><h4 id="统一异常处理"><a href="#统一异常处理" class="headerlink" title="统一异常处理"></a>统一异常处理</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonExceptionHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(&#123;MethodArgumentNotValidException.class&#125;)</span></span><br><span class="line">    <span class="meta">@ResponseStatus(HttpStatus.OK)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">handleMethodArgumentNotValidException</span><span class="params">(MethodArgumentNotValidException ex)</span> &#123;</span><br><span class="line">        <span class="type">BindingResult</span> <span class="variable">bindingResult</span> <span class="operator">=</span> ex.getBindingResult();</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot;校验失败:&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (FieldError fieldError : bindingResult.getFieldErrors()) &#123;</span><br><span class="line">            sb.append(fieldError.getField()).append(<span class="string">&quot;：&quot;</span>).append(fieldError.getDefaultMessage()).append(<span class="string">&quot;, &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> sb.toString();</span><br><span class="line">       <span class="keyword">return</span> Result.fail(BusinessCode.参数校验失败, msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(&#123;ConstraintViolationException.class&#125;)</span></span><br><span class="line">    <span class="meta">@ResponseStatus(HttpStatus.OK)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">handleConstraintViolationException</span><span class="params">(ConstraintViolationException ex)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(BusinessCode.参数校验失败, ex.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="嵌套校验"><a href="#嵌套校验" class="headerlink" title="嵌套校验"></a>嵌套校验</h4><p>某个字段也是一个对象，加Valid注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDTO</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Min(value = 10000000000000000L, groups = Update.class)</span></span><br><span class="line">    <span class="keyword">private</span> Long userId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull(groups = &#123;Save.class, Update.class&#125;)</span></span><br><span class="line">    <span class="meta">@Length(min = 2, max = 10, groups = &#123;Save.class, Update.class&#125;)</span></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull(groups = &#123;Save.class, Update.class&#125;)</span></span><br><span class="line">    <span class="meta">@Length(min = 6, max = 20, groups = &#123;Save.class, Update.class&#125;)</span></span><br><span class="line">    <span class="keyword">private</span> String account;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull(groups = &#123;Save.class, Update.class&#125;)</span></span><br><span class="line">    <span class="meta">@Length(min = 6, max = 20, groups = &#123;Save.class, Update.class&#125;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull(groups = &#123;Save.class, Update.class&#125;)</span></span><br><span class="line">    <span class="meta">@Valid</span></span><br><span class="line">    <span class="keyword">private</span> Job job;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Data</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Job</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Min(value = 1, groups = Update.class)</span></span><br><span class="line">        <span class="keyword">private</span> Long jobId;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@NotNull(groups = &#123;Save.class, Update.class&#125;)</span></span><br><span class="line">        <span class="meta">@Length(min = 2, max = 10, groups = &#123;Save.class, Update.class&#125;)</span></span><br><span class="line">        <span class="keyword">private</span> String jobName;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@NotNull(groups = &#123;Save.class, Update.class&#125;)</span></span><br><span class="line">        <span class="meta">@Length(min = 2, max = 10, groups = &#123;Save.class, Update.class&#125;)</span></span><br><span class="line">        <span class="keyword">private</span> String position;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存的时候校验分组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Save</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新的时候校验分组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Update</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="集合校验"><a href="#集合校验" class="headerlink" title="集合校验"></a>集合校验</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ValidationList</span>&lt;E&gt; <span class="keyword">implements</span> <span class="title class_">List</span>&lt;E&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Delegate</span> <span class="comment">// @Delegate是lombok注解</span></span><br><span class="line">    <span class="meta">@Valid</span> <span class="comment">// 一定要加@Valid注解</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;E&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 一定要记得重写toString方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> list.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/saveList&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">saveList</span><span class="params">(<span class="meta">@RequestBody</span> <span class="meta">@Validated(UserDTO.Save.class)</span> ValidationList&lt;UserDTO&gt; userList)</span> &#123;</span><br><span class="line">    <span class="comment">// 校验通过，才会执行业务逻辑处理</span></span><br><span class="line">    <span class="keyword">return</span> Result.ok();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="自定义约束注解"><a href="#自定义约束注解" class="headerlink" title="自定义约束注解"></a>自定义约束注解</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Constraint(validatedBy = &#123;EncryptIdValidator.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EncryptId &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 默认错误消息</span></span><br><span class="line">    String <span class="title function_">message</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;加密id格式错误&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 分组</span></span><br><span class="line">    Class&lt;?&gt;[] groups() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 负载</span></span><br><span class="line">    Class&lt;? <span class="keyword">extends</span> <span class="title class_">Payload</span>&gt;[] payload() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>实现ConstraintValidator接口编写约束校验器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EncryptIdValidator</span> <span class="keyword">implements</span> <span class="title class_">ConstraintValidator</span>&lt;EncryptId, String&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Pattern</span> <span class="variable">PATTERN</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;^[a-f\d]&#123;32,256&#125;$&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(String value, ConstraintValidatorContext context)</span> &#123;</span><br><span class="line">        <span class="comment">// 不为null才进行校验</span></span><br><span class="line">        <span class="keyword">if</span> (value != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> PATTERN.matcher(value);</span><br><span class="line">            <span class="keyword">return</span> matcher.find();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="编程式校验"><a href="#编程式校验" class="headerlink" title="编程式校验"></a>编程式校验</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set&lt;ConstraintViolation&lt;UserDTO&gt;&gt; validate = globalValidator.validate(userDTO, UserDTO.Save.class);</span><br></pre></td></tr></table></figure><h3 id="Validator实现原理"><a href="#Validator实现原理" class="headerlink" title="Validator实现原理"></a>Validator实现原理</h3><h3 id="requestBody参数校验实现原理"><a href="#requestBody参数校验实现原理" class="headerlink" title="requestBody参数校验实现原理"></a>requestBody参数校验实现原理</h3><p>在<code>spring-mvc</code>中，<code>RequestResponseBodyMethodProcessor</code>是用于解析<code>@RequestBody</code>标注的参数以及处理<code>@ResponseBody</code>标注方法的返回值的。显然，执行参数校验的逻辑肯定就在解析参数的方法<code>resolveArgument()</code>中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestResponseBodyMethodProcessor</span> <span class="keyword">extends</span> <span class="title class_">AbstractMessageConverterMethodProcessor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">resolveArgument</span><span class="params">(MethodParameter parameter, <span class="meta">@Nullable</span> ModelAndViewContainer mavContainer,</span></span><br><span class="line"><span class="params">                                  NativeWebRequest webRequest, <span class="meta">@Nullable</span> WebDataBinderFactory binderFactory)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        parameter = parameter.nestedIfOptional();</span><br><span class="line">        <span class="comment">//将请求数据封装到DTO对象中</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">arg</span> <span class="operator">=</span> readWithMessageConverters(webRequest, parameter, parameter.getNestedGenericParameterType());</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> Conventions.getVariableNameForParameter(parameter);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (binderFactory != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">WebDataBinder</span> <span class="variable">binder</span> <span class="operator">=</span> binderFactory.createBinder(webRequest, arg, name);</span><br><span class="line">            <span class="keyword">if</span> (arg != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 执行数据校验</span></span><br><span class="line">                validateIfApplicable(binder, parameter);</span><br><span class="line">                <span class="keyword">if</span> (binder.getBindingResult().hasErrors() &amp;&amp; isBindExceptionRequired(binder, parameter)) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MethodArgumentNotValidException</span>(parameter, binder.getBindingResult());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (mavContainer != <span class="literal">null</span>) &#123;</span><br><span class="line">                mavContainer.addAttribute(BindingResult.MODEL_KEY_PREFIX + name, binder.getBindingResult());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> adaptArgumentIfNecessary(arg, parameter);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，<code>resolveArgument()</code>调用了<code>validateIfApplicable()</code>进行参数校验。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">validateIfApplicable</span><span class="params">(WebDataBinder binder, MethodParameter parameter)</span> &#123;</span><br><span class="line">    <span class="comment">// 获取参数注解，比如@RequestBody、@Valid、@Validated</span></span><br><span class="line">    Annotation[] annotations = parameter.getParameterAnnotations();</span><br><span class="line">    <span class="keyword">for</span> (Annotation ann : annotations) &#123;</span><br><span class="line">        <span class="comment">// 先尝试获取@Validated注解</span></span><br><span class="line">        <span class="type">Validated</span> <span class="variable">validatedAnn</span> <span class="operator">=</span> AnnotationUtils.getAnnotation(ann, Validated.class);</span><br><span class="line">        <span class="comment">//如果直接标注了@Validated，那么直接开启校验。</span></span><br><span class="line">        <span class="comment">//如果没有，那么判断参数前是否有Valid起头的注解。</span></span><br><span class="line">        <span class="keyword">if</span> (validatedAnn != <span class="literal">null</span> || ann.annotationType().getSimpleName().startsWith(<span class="string">&quot;Valid&quot;</span>)) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">hints</span> <span class="operator">=</span> (validatedAnn != <span class="literal">null</span> ? validatedAnn.value() : AnnotationUtils.getValue(ann));</span><br><span class="line">            Object[] validationHints = (hints <span class="keyword">instanceof</span> Object[] ? (Object[]) hints : <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;hints&#125;);</span><br><span class="line">            <span class="comment">//执行校验</span></span><br><span class="line">            binder.validate(validationHints);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，<code>resolveArgument()</code>调用了<code>validateIfApplicable()</code>进行参数校验。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">validateIfApplicable</span><span class="params">(WebDataBinder binder, MethodParameter parameter)</span> &#123;</span><br><span class="line">    <span class="comment">// 获取参数注解，比如@RequestBody、@Valid、@Validated</span></span><br><span class="line">    Annotation[] annotations = parameter.getParameterAnnotations();</span><br><span class="line">    <span class="keyword">for</span> (Annotation ann : annotations) &#123;</span><br><span class="line">        <span class="comment">// 先尝试获取@Validated注解</span></span><br><span class="line">        <span class="type">Validated</span> <span class="variable">validatedAnn</span> <span class="operator">=</span> AnnotationUtils.getAnnotation(ann, Validated.class);</span><br><span class="line">        <span class="comment">//如果直接标注了@Validated，那么直接开启校验。</span></span><br><span class="line">        <span class="comment">//如果没有，那么判断参数前是否有Valid起头的注解。</span></span><br><span class="line">        <span class="keyword">if</span> (validatedAnn != <span class="literal">null</span> || ann.annotationType().getSimpleName().startsWith(<span class="string">&quot;Valid&quot;</span>)) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">hints</span> <span class="operator">=</span> (validatedAnn != <span class="literal">null</span> ? validatedAnn.value() : AnnotationUtils.getValue(ann));</span><br><span class="line">            Object[] validationHints = (hints <span class="keyword">instanceof</span> Object[] ? (Object[]) hints : <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;hints&#125;);</span><br><span class="line">            <span class="comment">//执行校验</span></span><br><span class="line">            binder.validate(validationHints);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到这里，大家应该能明白为什么这种场景下<code>@Validated</code>、<code>@Valid</code>两个注解可以混用。我们接下来继续看<code>WebDataBinder.validate()</code>实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">validate</span><span class="params">(Object target, Errors errors, Object... validationHints)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.targetValidator != <span class="literal">null</span>) &#123;</span><br><span class="line">        processConstraintViolations(</span><br><span class="line">            <span class="comment">//此处调用Hibernate Validator执行真正的校验</span></span><br><span class="line">            <span class="built_in">this</span>.targetValidator.validate(target, asValidationGroups(validationHints)), errors);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终发现底层最终还是调用了Hibernate Validator进行真正的校验处理。</p><h3 id="方法级别的参数校验实现原理"><a href="#方法级别的参数校验实现原理" class="headerlink" title="方法级别的参数校验实现原理"></a>方法级别的参数校验实现原理</h3><p>上面提到的将参数一个个平铺到方法参数中，然后在每个参数前面声明约束注解的校验方式，就是方法级别的参数校验。</p><p>实际上，这种方式可用于任何<code>Spring Bean</code>的方法上，比如<code>Controller/Service</code>等。其底层实现原理就是AOP，具体来说是通过<code>MethodValidationPostProcessor</code>动态注册<code>AOP</code>切面，然后使用<code>MethodValidationInterceptor</code>对切点方法织入增强。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MethodValidationPostProcessor</span> <span class="keyword">extends</span> <span class="title class_">AbstractBeanFactoryAwareAdvisingPostProcessorimplements</span> InitializingBean &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterPropertiesSet</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//为所有`@Validated`标注的Bean创建切面</span></span><br><span class="line">        <span class="type">Pointcut</span> <span class="variable">pointcut</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationMatchingPointcut</span>(<span class="built_in">this</span>.validatedAnnotationType, <span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//创建Advisor进行增强</span></span><br><span class="line">        <span class="built_in">this</span>.advisor = <span class="keyword">new</span> <span class="title class_">DefaultPointcutAdvisor</span>(pointcut, createMethodValidationAdvice(<span class="built_in">this</span>.validator));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建Advice，本质就是一个方法拦截器</span></span><br><span class="line">    <span class="keyword">protected</span> Advice <span class="title function_">createMethodValidationAdvice</span><span class="params">(<span class="meta">@Nullable</span> Validator validator)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (validator != <span class="literal">null</span> ? <span class="keyword">new</span> <span class="title class_">MethodValidationInterceptor</span>(validator) : <span class="keyword">new</span> <span class="title class_">MethodValidationInterceptor</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着看一下MethodValidationInterceptor：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MethodValidationInterceptor</span> <span class="keyword">implements</span> <span class="title class_">MethodInterceptor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(MethodInvocation invocation)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="comment">//无需增强的方法，直接跳过</span></span><br><span class="line">        <span class="keyword">if</span> (isFactoryBeanMetadataMethod(invocation.getMethod())) &#123;</span><br><span class="line">            <span class="keyword">return</span> invocation.proceed();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获取分组信息</span></span><br><span class="line">        Class&lt;?&gt;[] groups = determineValidationGroups(invocation);</span><br><span class="line">        <span class="type">ExecutableValidator</span> <span class="variable">execVal</span> <span class="operator">=</span> <span class="built_in">this</span>.validator.forExecutables();</span><br><span class="line">        <span class="type">Method</span> <span class="variable">methodToValidate</span> <span class="operator">=</span> invocation.getMethod();</span><br><span class="line">        Set&lt;ConstraintViolation&lt;Object&gt;&gt; result;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//方法入参校验，最终还是委托给Hibernate Validator来校验</span></span><br><span class="line">            result = execVal.validateParameters(</span><br><span class="line">                invocation.getThis(), methodToValidate, invocation.getArguments(), groups);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (IllegalArgumentException ex) &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//有异常直接抛出</span></span><br><span class="line">        <span class="keyword">if</span> (!result.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConstraintViolationException</span>(result);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//真正的方法调用</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">returnValue</span> <span class="operator">=</span> invocation.proceed();</span><br><span class="line">        <span class="comment">//对返回值做校验，最终还是委托给Hibernate Validator来校验</span></span><br><span class="line">        result = execVal.validateReturnValue(invocation.getThis(), methodToValidate, returnValue, groups);</span><br><span class="line">        <span class="comment">//有异常直接抛出</span></span><br><span class="line">        <span class="keyword">if</span> (!result.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConstraintViolationException</span>(result);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> returnValue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际上，不管是<code>requestBody</code>参数校验还是方法级别的校验，最终都是调用<code>Hibernate Validator</code>执行校验，<code>Spring Validation</code>只是做了一层封装。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;spring-Validation-学习&quot;&gt;&lt;a href=&quot;#spring-Validation-学习&quot; class=&quot;headerlink&quot; title=&quot;spring Validation 学习&quot;&gt;&lt;/a&gt;spring Validation 学习&lt;/h2&gt;&lt;</summary>
      
    
    
    
    <category term="springboot" scheme="http://duanyushuai.github.io/categories/springboot/"/>
    
    
    <category term="springboot" scheme="http://duanyushuai.github.io/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>springboot动态定时任务</title>
    <link href="http://duanyushuai.github.io/2022/10/10/springboot%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
    <id>http://duanyushuai.github.io/2022/10/10/springboot%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/</id>
    <published>2022-10-10T12:00:00.000Z</published>
    <updated>2022-10-18T13:42:48.636Z</updated>
    
    <content type="html"><![CDATA[<h1 id="springboot动态定时任务"><a href="#springboot动态定时任务" class="headerlink" title="springboot动态定时任务"></a>springboot动态定时任务</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:/task-config.ini&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ScheduleTask</span> <span class="keyword">implements</span> <span class="title class_">SchedulingConfigurer</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;printTime.cron&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String cron;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="type">Long</span> <span class="variable">timer</span> <span class="operator">=</span> <span class="number">10000L</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configureTasks</span><span class="params">(ScheduledTaskRegistrar taskRegistrar)</span> &#123;</span><br><span class="line">        <span class="comment">// 动态使用cron表达式设置循环间隔</span></span><br><span class="line">        taskRegistrar.addTriggerTask(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                log.info(<span class="string">&quot;Current time： &#123;&#125;&quot;</span>, LocalDateTime.now());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="keyword">new</span> <span class="title class_">Trigger</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Date <span class="title function_">nextExecutionTime</span><span class="params">(TriggerContext triggerContext)</span> &#123;</span><br><span class="line">                <span class="comment">// 使用CronTrigger触发器，可动态修改cron表达式来操作循环规则</span></span><br><span class="line"><span class="comment">//                CronTrigger cronTrigger = new CronTrigger(cron);</span></span><br><span class="line"><span class="comment">//                Date nextExecutionTime = cronTrigger.nextExecutionTime(triggerContext);</span></span><br><span class="line"> </span><br><span class="line">                <span class="comment">// 使用不同的触发器，为设置循环时间的关键，区别于CronTrigger触发器，该触发器可随意设置循环间隔时间，单位为毫秒</span></span><br><span class="line">                <span class="type">PeriodicTrigger</span> <span class="variable">periodicTrigger</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PeriodicTrigger</span>(timer);</span><br><span class="line">                <span class="type">Date</span> <span class="variable">nextExecutionTime</span> <span class="operator">=</span> periodicTrigger.nextExecutionTime(triggerContext);</span><br><span class="line">                <span class="keyword">return</span> nextExecutionTime;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除了上面的借助cron表达式的方法，还有另一种触发器，区别于CronTrigger触发器，该触发器可随意设置循环间隔时间，不像cron表达式只能定义小于等于间隔59秒</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;springboot动态定时任务&quot;&gt;&lt;a href=&quot;#springboot动态定时任务&quot; class=&quot;headerlink&quot; title=&quot;springboot动态定时任务&quot;&gt;&lt;/a&gt;springboot动态定时任务&lt;/h1&gt;&lt;figure class=&quot;hi</summary>
      
    
    
    
    <category term="springboot" scheme="http://duanyushuai.github.io/categories/springboot/"/>
    
    
    <category term="springboot" scheme="http://duanyushuai.github.io/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>SpringSecurity</title>
    <link href="http://duanyushuai.github.io/2022/08/27/SpringSecuity/"/>
    <id>http://duanyushuai.github.io/2022/08/27/SpringSecuity/</id>
    <published>2022-08-27T07:58:07.374Z</published>
    <updated>2022-08-28T06:31:55.451Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringSecuity"><a href="#SpringSecuity" class="headerlink" title="SpringSecuity"></a>SpringSecuity</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>SpringSecurity是一个过滤器链</p><p>UsernamePasswordAuthenticationFilter: 负责填写用户名密码后的登陆请求</p><p>ExceptionTranslationFilter: 处理过滤器链中跑出的任何AccessDeniedException和AuthenticationException</p><p>FilterSecurityInterceptor: 负责权限校验的过滤器</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;SpringSecuity&quot;&gt;&lt;a href=&quot;#SpringSecuity&quot; class=&quot;headerlink&quot; title=&quot;SpringSecuity&quot;&gt;&lt;/a&gt;SpringSecuity&lt;/h1&gt;&lt;figure class=&quot;highlight xml&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>JWT理解</title>
    <link href="http://duanyushuai.github.io/2022/08/18/Jwt%E7%90%86%E8%A7%A3/"/>
    <id>http://duanyushuai.github.io/2022/08/18/Jwt%E7%90%86%E8%A7%A3/</id>
    <published>2022-08-18T02:00:00.000Z</published>
    <updated>2022-08-28T06:35:00.527Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JWT理解"><a href="#JWT理解" class="headerlink" title="JWT理解"></a>JWT理解</h1><h4 id="jwt组成"><a href="#jwt组成" class="headerlink" title="jwt组成"></a>jwt组成</h4><ol><li>标头（Header）</li><li>有效载荷（Payload）</li><li>签名（ Signature）</li></ol><p>格式 xxx.yyy.zzz</p><h5 id="标头"><a href="#标头" class="headerlink" title="标头"></a>标头</h5><p>令牌类型和所属签名 base64 编码</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;alg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;HS256&quot;</span></span><br><span class="line">    <span class="attr">&quot;typ&quot;</span><span class="punctuation">:</span> <span class="string">&quot;jwt&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h5 id="有效载荷"><a href="#有效载荷" class="headerlink" title="有效载荷"></a>有效载荷</h5><p>声明的实体。base64编码</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">   <span class="attr">&quot;sub&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2123&quot;</span></span><br><span class="line">   <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dd&quot;</span></span><br><span class="line">   <span class="attr">&quot;admin&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h5 id="签名"><a href="#签名" class="headerlink" title="签名"></a>签名</h5><p>使用密钥对header和payload进行签名，防止被容被篡改</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HMACSHA256(BASE64UrlEncode(header)+.+BASE64UrlEncode(payload),secret);</span><br></pre></td></tr></table></figure><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">      HashMap&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">     <span class="type">Calendar</span> <span class="variable">instance</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">     instance.add(Calendar.SECOND,<span class="number">20</span> );</span><br><span class="line">     <span class="keyword">final</span> <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> JWT.create().withHeader(map)</span><br><span class="line">             .withClaim(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;123&quot;</span>)</span><br><span class="line">             .withExpiresAt(instance.getTime())</span><br><span class="line">             .sign(Algorithm.HMAC256(<span class="string">&quot;123&quot;</span>));</span><br><span class="line"></span><br><span class="line">     System.out.println(username );</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Test</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Test2</span><span class="params">()</span>&#123;</span><br><span class="line">     <span class="keyword">final</span> <span class="type">JWTVerifier</span> <span class="variable">jwtVerifier</span> <span class="operator">=</span> JWT.require(Algorithm.HMAC256(<span class="string">&quot;123&quot;</span>)).build();</span><br><span class="line">     <span class="type">DecodedJWT</span> <span class="variable">verify</span> <span class="operator">=</span> jwtVerifier.verify(<span class="string">&quot;eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE2NjE1ODI2NDcsInVzZXJuYW1lIjoiMTIzIn0.b45eaJCa5uzUdGIfXfrjhw73AdzH-MXgkAI8hOY6wYU&quot;</span>);</span><br><span class="line">     System.out.println(verify);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;JWT理解&quot;&gt;&lt;a href=&quot;#JWT理解&quot; class=&quot;headerlink&quot; title=&quot;JWT理解&quot;&gt;&lt;/a&gt;JWT理解&lt;/h1&gt;&lt;h4 id=&quot;jwt组成&quot;&gt;&lt;a href=&quot;#jwt组成&quot; class=&quot;headerlink&quot; title=&quot;jwt</summary>
      
    
    
    
    <category term="java web" scheme="http://duanyushuai.github.io/categories/java-web/"/>
    
    
    <category term="java web" scheme="http://duanyushuai.github.io/tags/java-web/"/>
    
  </entry>
  
  <entry>
    <title>分布式事务</title>
    <link href="http://duanyushuai.github.io/2022/08/14/%E4%BA%8B%E5%8A%A1/"/>
    <id>http://duanyushuai.github.io/2022/08/14/%E4%BA%8B%E5%8A%A1/</id>
    <published>2022-08-14T09:48:41.791Z</published>
    <updated>2022-10-09T11:15:33.189Z</updated>
    
    <content type="html"><![CDATA[<h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><h3 id="数据库事务"><a href="#数据库事务" class="headerlink" title="数据库事务"></a>数据库事务</h3><h4 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h4><p>原子性 一致性 隔离性 持久性</p><h4 id="事务的隔离级别"><a href="#事务的隔离级别" class="headerlink" title="事务的隔离级别"></a>事务的隔离级别</h4><ol><li><strong>Read uncommitted</strong></li></ol><p>读未提交读 ，读到其他事务未提交的数据，脏读</p><ol start="2"><li><strong>Read committed</strong></li></ol><p>读提交读，读到另一个事务的提交数据，在一个事务中，读取的数据不一样，形成不可重复读</p><ol start="3"><li><p><strong>Repeatable read</strong></p><p>mysql 默认的隔离级别，在同一个事务里，select 的结果是事务开始时时间点的状态，因此，同样的 select 操作读到的结果会是一致的，但是，会有幻读现象。MySQL 的 InnoDB 引擎可以通过 next-key locks 机制来避免幻读。</p></li><li><p><strong>Serializable</strong></p></li></ol><p>序列化</p><h4 id="事务的传播行为"><a href="#事务的传播行为" class="headerlink" title="事务的传播行为"></a>事务的传播行为</h4><p><strong>1</strong>、<strong>PROPAGATION_REQUIRED</strong>：如果当前没有事务，就创建一个新事务，如果当前存在事务， </p><p>就加入该事务，该设置是最常用的设置。 </p><p><strong>2</strong>、<strong>PROPAGATION_SUPPORTS</strong>：支持当前事务，如果当前存在事务，就加入该事务，如果当 </p><p>前不存在事务，就以非事务执行。 </p><p><strong>3</strong>、<strong>PROPAGATION_MANDATORY</strong>：支持当前事务，如果当前存在事务，就加入该事务，如果 </p><p>当前不存在事务，就抛出异常。 </p><p><strong>4</strong>、<strong>PROPAGATION_REQUIRES_NEW</strong>：创建新事务，无论当前存不存在事务，都创建新事务。 </p><p><strong>5</strong>、<strong>PROPAGATION_NOT_SUPPORTED</strong>：以非事务方式执行操作，如果当前存在事务，就把当 </p><p>前事务挂起。 </p><p><strong>6</strong>、<strong>PROPAGATION_NEVER</strong>：以非事务方式执行，如果当前存在事务，则抛出异常。 </p><p><strong>7</strong>、<strong>PROPAGATION_NESTED</strong>：如果当前存在事务，则在嵌套事务内执行。如果当前没有事务， </p><p>则执行与 PROPAGATION_REQUIRED 类似的操作。</p><p><strong>同一个对象内事务方法互相调失效，原因绕过了代理对象</strong></p><p>解决：使用代理对象来调用事务方法</p><p> 1）、引入aop-starter;spring-boot-starter-aop; 引入aspectj</p><p> 2）、@EnableAspectJAutoProxy; 开启 aspectj 动态代理功能，以后的代理对象都是aspectj </p><p>0）、导入 spring-boot-starter-aop </p><p>1）、@EnableTransactionManagement(proxyTargetClass &#x3D; true) </p><p>2）、@EnableAspectJAutoProxy(exposeProxy&#x3D;true) </p><p>3）、AopContext.currentProxy() 调用方法 </p><h3 id="分布式事务"><a href="#分布式事务" class="headerlink" title="分布式事务"></a>分布式事务</h3><h4 id="CAP-原理"><a href="#CAP-原理" class="headerlink" title="CAP 原理"></a>CAP 原理</h4><p>CAP 原则又称 CAP 定理，指的是在一个分布式系统中 </p><p>一致性（Consistency）： </p><p>在分布式系统中的所有数据备份，在同一时刻是否同样的值。（等同于所有节点访问同一份最新的数据副本） </p><p>可用性（Availability） </p><p>在集群中一部分节点故障后，集群整体是否还能响应客户端的读写请求。（对数据 更新具备高可用性） </p><p>分区容错性（Partition tolerance） </p><p>大多数分布式系统都分布在多个子网络。每个子网络就叫做一个区（</p><p>partition）。 分区容错的意思是，区间通信可能失败。比如，一台服务器放在中国，另一台服务器放在美国，这就是两个区，它们之间可能无法通信。 </p><p>CAP 原则指的是，这三个要素最多只能同时实现两点，<strong>不可能三者兼顾</strong>。</p><p>一般来说，分区容错无法避免，因此可以认为 CAP 的 P 总是成立。CAP 定理告诉我们， </p><p>剩下的 C 和 A 无法同时做到。</p><p>分布式系统中实现一致性的 raft 算法、paxos </p><p><a href="http://thesecretlivesofdata.com/raft/">http://thesecretlivesofdata.com/raft/</a></p><h3 id="分布式事务解决方案"><a href="#分布式事务解决方案" class="headerlink" title="分布式事务解决方案"></a>分布式事务解决方案</h3><h5 id="2PC模式"><a href="#2PC模式" class="headerlink" title="2PC模式"></a>2PC模式</h5><p>数据库支持的 2PC【2 phase commit 二阶提交】，又叫做 XA Transactions。 </p><p>MySQL 从 5.5 版本开始支持，SQL Server 2005 开始支持，Oracle 7 开始支持。 </p><p>其中，XA 是一个两阶段提交协议，该协议分为以下两个阶段： </p><p>第一阶段：事务协调器要求每个涉及到事务的数据库预提交(precommit)此操作，并反映是 </p><p>否可以提交. </p><p>第二阶段：事务协调器要求每个数据库提交数据。 </p><p>其中，如果有任何一个数据库否决此次提交，那么所有数据库都会被要求回滚它们在此事务 </p><p>中的那部分信息。</p><ul><li>XA 协议比较简单，而且一旦商业数据库实现了 XA 协议，使用分布式事务的成本也比较</li></ul><p>低。 </p><ul><li><strong>XA</strong> <strong>性能不理想</strong>，特别是在交易下单链路，往往并发量很高，XA 无法满足高并发场景 </li><li>XA 目前在商业数据库支持的比较理想，<strong>在</strong> <strong>mysql</strong> <strong>数据库中支持的不太理想</strong>，mysql 的 XA 实现，没有记录 prepare 阶段日志，主备切换回导致主库与备库数据不一致。 许多 nosql 也没有支持 XA，这让 XA 的应用场景变得非常狭隘。 </li><li>也有 3PC，引入了超时机制（无论协调者还是参与者，在向对方发送请求后，若长时间 未收到回应则做出相应处理）</li></ul><h5 id="柔性事务-TCC-事务补偿型方案"><a href="#柔性事务-TCC-事务补偿型方案" class="headerlink" title="柔性事务 TCC 事务补偿型方案"></a>柔性事务 TCC <strong>事务补偿型方案</strong></h5><p>刚性事务：遵循 ACID 原则，强一致性。 </p><p>柔性事务：遵循 BASE 理论，最终一致性； </p><p>与刚性事务不同，柔性事务允许一定时间内，不同节点的数据不一致，但要求最终一致。</p><h5 id="柔性事务-最大努力通知方案"><a href="#柔性事务-最大努力通知方案" class="headerlink" title="柔性事务 最大努力通知方案"></a>柔性事务 最大努力通知方案</h5><p>按规律进行通知，<strong>不保证数据一定能通知成功，但会提供可查询操作接口进行核对</strong>。这种 </p><p>方案主要用在与第三方系统通讯时，比如：调用微信或支付宝支付后的支付结果通知。这种 </p><p>方案也是结合 MQ 进行实现，例如：通过 MQ 发送 http 请求，设置最大通知次数。达到通 </p><p>知次数后即不再通知。 </p><p>案例：银行通知、商户通知等（各大交易业务平台间的商户通知：多次通知、查询校对、对 </p><p>账文件），支付宝的支付成功异步回调</p><h5 id="柔性事务-可靠消息-最终一致性"><a href="#柔性事务-可靠消息-最终一致性" class="headerlink" title="柔性事务 + 可靠消息 + 最终一致性"></a>柔性事务 + 可靠消息 + 最终一致性</h5><p>实现：业务处理服务在业务事务提交之前，向实时消息服务请求发送消息，实时消息服务只 </p><p>记录消息数据，而不是真正的发送。业务处理服务在业务事务提交之后，向实时消息服务确 </p><p>认发送。只有在得到确认发送指令后，实时消息服务才会真正发送。</p><h3 id="seata"><a href="#seata" class="headerlink" title="seata"></a>seata</h3><hr><ol><li><p>每一个服务创建数据表 undo_log</p></li><li><p>安装事务协调器：seata-server : <a href="http://github.com/seata/seata/releases">http://github.com/seata/seata/releases</a></p></li><li><p>整合</p><p>1）导入依赖 spring-cloud-starter-alibaba-seata </p><p>2）解压并启动seata-server：</p><p>​      Registry.conf: 注册中心配置 </p><p> 3）配置代理数据源</p><p> 4）每个微服务导入</p><p> registry.conf</p><p>  file.conf</p></li></ol><p>  vgroup_mapping.{application.name}-fescar-service-group &#x3D; “default”</p><p>​      5)  加globaTransactional</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;事务&quot;&gt;&lt;a href=&quot;#事务&quot; class=&quot;headerlink&quot; title=&quot;事务&quot;&gt;&lt;/a&gt;事务&lt;/h1&gt;&lt;h3 id=&quot;数据库事务&quot;&gt;&lt;a href=&quot;#数据库事务&quot; class=&quot;headerlink&quot; title=&quot;数据库事务&quot;&gt;&lt;/a&gt;数据库事</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>接口幂等性</title>
    <link href="http://duanyushuai.github.io/2022/08/10/%E6%8E%A5%E5%8F%A3%E5%B9%82%E7%AD%89%E6%80%A7/"/>
    <id>http://duanyushuai.github.io/2022/08/10/%E6%8E%A5%E5%8F%A3%E5%B9%82%E7%AD%89%E6%80%A7/</id>
    <published>2022-08-10T02:00:00.000Z</published>
    <updated>2022-08-11T14:06:32.123Z</updated>
    
    <content type="html"><![CDATA[<h1 id="接口幂等性"><a href="#接口幂等性" class="headerlink" title="接口幂等性"></a>接口幂等性</h1><p>问题出现</p><ol><li>用户多次点击</li><li>用户回退在提交</li><li>feign触发重试</li></ol><h3 id="1-token"><a href="#1-token" class="headerlink" title="1.token"></a>1.token</h3><p> token 的获取、比较和删除必须是原子性的</p><p>使用redis和lua脚本</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> redis.call(<span class="string">&#x27;get&#x27;</span>,KEYS[<span class="number">1</span>]==ARGV[<span class="number">1</span>] <span class="keyword">then</span> <span class="keyword">return</span> is.call(<span class="string">&#x27;del&#x27;</span>,KEYS[<span class="number">1</span>])) <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span> <span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="2-各种锁机制"><a href="#2-各种锁机制" class="headerlink" title="2. 各种锁机制"></a>2. 各种锁机制</h3><h4 id="1-数据库悲观锁"><a href="#1-数据库悲观锁" class="headerlink" title="1. 数据库悲观锁"></a>1. 数据库悲观锁</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from xxxx where id=1 for update</span><br></pre></td></tr></table></figure><p>id一定是主键和唯一索引，不然可能造成锁表</p><h4 id="2-数据库乐观锁"><a href="#2-数据库乐观锁" class="headerlink" title="2. 数据库乐观锁"></a>2. 数据库乐观锁</h4><p>首先获取这条数据的版本号version，然后操作的时候带上版本号</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update goods <span class="type">set</span> <span class="variable">count</span> <span class="operator">=</span> count -<span class="number">1</span> ,version = version + <span class="number">1</span> <span class="type">where</span> <span class="variable">id</span> <span class="operator">=</span> <span class="number">2</span> <span class="type">and</span> <span class="variable">version</span> <span class="operator">=</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p>乐观锁处理读多写少问题</p><h3 id="3-业务分布式锁"><a href="#3-业务分布式锁" class="headerlink" title="3. 业务分布式锁"></a>3. 业务分布式锁</h3><h3 id="4-各种唯一索引"><a href="#4-各种唯一索引" class="headerlink" title="4. 各种唯一索引"></a>4. 各种唯一索引</h3><h4 id="数据库的唯一约束"><a href="#数据库的唯一约束" class="headerlink" title="数据库的唯一约束"></a>数据库的唯一约束</h4><p>插入数据按照唯一索引，比如订单号，相同的订单号就不能重复插入。需要不是自增主键，代码生成全局唯一id。</p><p>在分库分表下，根据路由规则，要路由到同一张表，才能是唯一索引有意义。</p><h4 id="redis防重"><a href="#redis防重" class="headerlink" title="redis防重"></a>redis防重</h4><p>我们可以计算上传数据的MD5值，存到redis set，每次处理数据，去和redis进行匹配</p><h4 id="防重表"><a href="#防重表" class="headerlink" title="防重表"></a>防重表</h4><p>把orderNo作为去重表的唯一索引插入mysql，去重表和业务表处在同一数据库，处于同一事务，方便回滚</p><h3 id="5-全局请求唯一id"><a href="#5-全局请求唯一id" class="headerlink" title="5.全局请求唯一id"></a>5.全局请求唯一id</h3><p>调用接口生成唯一id，保存在redis的集合中。</p><p>可以使用nginx设置请求的唯一id</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxy_set_header  X-Request-Id $request_id;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;接口幂等性&quot;&gt;&lt;a href=&quot;#接口幂等性&quot; class=&quot;headerlink&quot; title=&quot;接口幂等性&quot;&gt;&lt;/a&gt;接口幂等性&lt;/h1&gt;&lt;p&gt;问题出现&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用户多次点击&lt;/li&gt;
&lt;li&gt;用户回退在提交&lt;/li&gt;
&lt;li&gt;feign触发</summary>
      
    
    
    
    <category term="java web" scheme="http://duanyushuai.github.io/categories/java-web/"/>
    
    
    <category term="java web" scheme="http://duanyushuai.github.io/tags/java-web/"/>
    
  </entry>
  
  <entry>
    <title>redis 缓存</title>
    <link href="http://duanyushuai.github.io/2022/07/11/redis%20%E7%BC%93%E5%AD%98/"/>
    <id>http://duanyushuai.github.io/2022/07/11/redis%20%E7%BC%93%E5%AD%98/</id>
    <published>2022-07-11T13:46:55.260Z</published>
    <updated>2022-07-12T13:52:10.751Z</updated>
    
    <content type="html"><![CDATA[<h1 id="redis-缓存"><a href="#redis-缓存" class="headerlink" title="redis 缓存"></a>redis 缓存</h1><h4 id="那些数据适合缓存"><a href="#那些数据适合缓存" class="headerlink" title="那些数据适合缓存"></a>那些数据适合缓存</h4><ol><li><p>即时性和数据一致性要求不高的</p></li><li><p>读多写少</p></li></ol><p>使用redis</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line"> &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line"> &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>简单的分布式锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Map&lt;String, List&lt;Catelog2Vo&gt;&gt; <span class="title function_">getCatalogJsonFromDbWithRedislock</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1 占分布式锁，去redis占坑</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">uuid</span> <span class="operator">=</span> UUID.randomUUID().toString();</span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">lock</span> <span class="operator">=</span> redisTemplate.opsForValue().setIfAbsent(<span class="string">&quot;lock&quot;</span>, uuid, <span class="number">300</span>, TimeUnit.SECONDS);</span><br><span class="line">        <span class="keyword">if</span> (lock) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;获取分布式锁成功&quot;</span>);</span><br><span class="line">            <span class="comment">// 加锁成功...执行业务</span></span><br><span class="line">            <span class="comment">// 2 设置过期时间</span></span><br><span class="line"><span class="comment">//            redisTemplate.expire(&quot;lock&quot;, 30, TimeUnit.SECONDS);</span></span><br><span class="line">            Map&lt;String, List&lt;Catelog2Vo&gt;&gt; dataFromDB;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                dataFromDB = getDataFromDB();</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">script</span> <span class="operator">=</span> <span class="string">&quot;if redis.call(&#x27;get&#x27;, KEYS[1]) == ARGV[1] then return redis.call(&#x27;del&#x27;, KEYS[1]) else return 0 end&quot;</span>;</span><br><span class="line">                <span class="comment">// 删除锁</span></span><br><span class="line">                <span class="type">Long</span> <span class="variable">lock1</span> <span class="operator">=</span> redisTemplate.execute(<span class="keyword">new</span> <span class="title class_">DefaultRedisScript</span>&lt;Long&gt;(script, Long.class), Arrays.asList(<span class="string">&quot;lock&quot;</span>), uuid);</span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">//            redisTemplate.delete(&quot;lock&quot;);</span></span><br><span class="line">            <span class="comment">// 获取值对比 + 对比成功删除 = 原子操作  lua脚本解锁</span></span><br><span class="line"><span class="comment">//            String lockValue = redisTemplate.opsForValue().get(&quot;lock&quot;);</span></span><br><span class="line"><span class="comment">//            if (uuid.equals(lockValue)) &#123;</span></span><br><span class="line"><span class="comment">//                // 删除我自己的锁</span></span><br><span class="line"><span class="comment">//                redisTemplate.delete(&quot;lock&quot;);</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> dataFromDB;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 加锁失败</span></span><br><span class="line">            <span class="comment">// 休眠100ms重试</span></span><br><span class="line">            System.out.println(<span class="string">&quot;获取分布式锁失败...等待重试&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">200</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> getCatalogJsonFromDbWithRedislock(); <span class="comment">// 自旋的方式</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;redis-缓存&quot;&gt;&lt;a href=&quot;#redis-缓存&quot; class=&quot;headerlink&quot; title=&quot;redis 缓存&quot;&gt;&lt;/a&gt;redis 缓存&lt;/h1&gt;&lt;h4 id=&quot;那些数据适合缓存&quot;&gt;&lt;a href=&quot;#那些数据适合缓存&quot; class=&quot;head</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>nginx使用</title>
    <link href="http://duanyushuai.github.io/2022/07/02/nginx%E4%BD%BF%E7%94%A8/"/>
    <id>http://duanyushuai.github.io/2022/07/02/nginx%E4%BD%BF%E7%94%A8/</id>
    <published>2022-07-02T10:30:26.308Z</published>
    <updated>2022-07-02T10:34:50.961Z</updated>
    
    <content type="html"><![CDATA[<h1 id="nginx使用"><a href="#nginx使用" class="headerlink" title="nginx使用"></a>nginx使用</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;nginx使用&quot;&gt;&lt;a href=&quot;#nginx使用&quot; class=&quot;headerlink&quot; title=&quot;nginx使用&quot;&gt;&lt;/a&gt;nginx使用&lt;/h1&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>sku和spu数据库设计</title>
    <link href="http://duanyushuai.github.io/2022/06/26/sku%E5%92%8Cspu%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1/"/>
    <id>http://duanyushuai.github.io/2022/06/26/sku%E5%92%8Cspu%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1/</id>
    <published>2022-06-26T10:50:48.206Z</published>
    <updated>2022-07-03T02:56:31.206Z</updated>
    
    <content type="html"><![CDATA[<h2 id="sku和spu数据库设计"><a href="#sku和spu数据库设计" class="headerlink" title="sku和spu数据库设计"></a>sku和spu数据库设计</h2><p><img src="/../img/skuspu1.png"></p><p><img src="/../img/skuspu2.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;sku和spu数据库设计&quot;&gt;&lt;a href=&quot;#sku和spu数据库设计&quot; class=&quot;headerlink&quot; title=&quot;sku和spu数据库设计&quot;&gt;&lt;/a&gt;sku和spu数据库设计&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/../img/skuspu1.png&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>自定义注解</title>
    <link href="http://duanyushuai.github.io/2022/06/26/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E8%A7%A3%EF%BC%88%E6%A0%A1%E9%AA%8C%E5%92%8C%E6%97%A5%E5%BF%97%EF%BC%89/"/>
    <id>http://duanyushuai.github.io/2022/06/26/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E8%A7%A3%EF%BC%88%E6%A0%A1%E9%AA%8C%E5%92%8C%E6%97%A5%E5%BF%97%EF%BC%89/</id>
    <published>2022-06-26T03:34:51.020Z</published>
    <updated>2022-07-02T07:51:02.580Z</updated>
    
    <content type="html"><![CDATA[<h2 id="自定义注解（校验和日志）"><a href="#自定义注解（校验和日志）" class="headerlink" title="自定义注解（校验和日志）"></a>自定义注解（校验和日志）</h2><h2 id="JSR303-自定义校验"><a href="#JSR303-自定义校验" class="headerlink" title="JSR303 自定义校验"></a>JSR303 自定义校验</h2><h4 id="创建ListValue校验注解"><a href="#创建ListValue校验注解" class="headerlink" title="创建ListValue校验注解"></a>创建ListValue校验注解</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yxj.gulimall.common.valid;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.validation.Constraint;</span><br><span class="line"><span class="keyword">import</span> javax.validation.Payload;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 自定义校验注解</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Constraint(</span></span><br><span class="line"><span class="meta">        validatedBy = &#123;ListValueConstraintValidator.class&#125;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.METHOD, ElementType.FIELD, ElementType.ANNOTATION_TYPE, ElementType.CONSTRUCTOR, ElementType.PARAMETER, ElementType.TYPE_USE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ListValue &#123;</span><br><span class="line">    String <span class="title function_">message</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&#123;com.chenxin.gulimail.common.valid.ListValue.message&#125;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt;[] groups() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    Class&lt;? <span class="keyword">extends</span> <span class="title class_">Payload</span>&gt;[] payload() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span>[] vals() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="ListValueConstraintValidator校验器"><a href="#ListValueConstraintValidator校验器" class="headerlink" title="ListValueConstraintValidator校验器"></a>ListValueConstraintValidator校验器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    Set&lt;Integer&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;Integer&gt;();</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> constraintAnnotation</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initialize</span><span class="params">(ListValue constraintAnnotation)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] vals = constraintAnnotation.vals();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> val : vals) &#123;</span><br><span class="line">            set.add(val);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 真正的校验规则</span></span><br><span class="line"><span class="comment">     * 判断是否校验成功</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> integer</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> constraintValidatorContext</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(Integer integer, ConstraintValidatorContext constraintValidatorContext)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> set.contains(integer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;自定义注解（校验和日志）&quot;&gt;&lt;a href=&quot;#自定义注解（校验和日志）&quot; class=&quot;headerlink&quot; title=&quot;自定义注解（校验和日志）&quot;&gt;&lt;/a&gt;自定义注解（校验和日志）&lt;/h2&gt;&lt;h2 id=&quot;JSR303-自定义校验&quot;&gt;&lt;a href=&quot;#J</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>redis Guava 缓存</title>
    <link href="http://duanyushuai.github.io/2022/06/26/redis-Guava-%E7%BC%93%E5%AD%98/"/>
    <id>http://duanyushuai.github.io/2022/06/26/redis-Guava-%E7%BC%93%E5%AD%98/</id>
    <published>2022-06-26T02:00:00.000Z</published>
    <updated>2022-07-24T13:18:01.257Z</updated>
    
    <content type="html"><![CDATA[<h2 id="redis-Guava-缓存"><a href="#redis-Guava-缓存" class="headerlink" title="redis Guava 缓存"></a>redis Guava 缓存</h2><h3 id="redis-懒加载"><a href="#redis-懒加载" class="headerlink" title="redis 懒加载"></a>redis 懒加载</h3><p>数据在新增到 MySQL 不进行缓存，在精确查找进行缓存，做到查询即缓存，不查询不缓存。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 伪代码示例 Xx代表你的的业务对象 如User Goods等等</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XxLazyCache</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, Xx&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> XxService xxService;<span class="comment">// 你的业务service</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询 通过查询缓存是否存在驱动缓存加载 建议在前置业务保证id对应数据是绝对存在于数据库中的</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Xx <span class="title function_">getXx</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="comment">// 1.查询缓存里面有没有数据</span></span><br><span class="line">        <span class="type">Xx</span> <span class="variable">xxCache</span> <span class="operator">=</span> getXxFromCache(id);</span><br><span class="line">        <span class="keyword">if</span>(xxCache != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> xxCache;<span class="comment">// 卫语句使代码更有利于阅读</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 2.查询数据库获取数据 我们假定到业务这一步，传过来的id都在数据库中有对应数据</span></span><br><span class="line">        <span class="type">Xx</span> <span class="variable">xx</span> <span class="operator">=</span> xxService.getXxById(id);</span><br><span class="line">        <span class="comment">// 3.设置缓存、这一步相当于Redis缓存懒加载，下次再查询此id，则会走缓存</span></span><br><span class="line">        setXxFromCache(xx);</span><br><span class="line">        <span class="keyword">return</span> xx;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对xx数据进行修改或者删除操作 操作数据库成功后 删除缓存</span></span><br><span class="line"><span class="comment">     * 删除请求 - 删除数据库数据 删除缓存</span></span><br><span class="line"><span class="comment">     * 修改请求 - 更新数据库数据 删除缓存 下次在查询时候就会从数据库拉取新的数据到缓存中</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteXxFromCache</span><span class="params">(<span class="type">long</span> id)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;Xx:&quot;</span> + xx.getId();</span><br><span class="line">        redisTemplate.delete(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">setXxFromCache</span><span class="params">(Xx xx)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;Xx:&quot;</span> + xx.getId();</span><br><span class="line">        redisTemplate.opsForValue().set(key, xx);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Xx <span class="title function_">getXxFromCache</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="comment">// 通过缓存前缀拼装唯一主键作为缓存Key 如Xxx信息 就是Xxx:id</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;Xx:&quot;</span> + id;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 业务类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XxServie</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> XxLazyCache xxLazyCache;</span><br><span class="line">    <span class="comment">// 查询数据库</span></span><br><span class="line">    <span class="keyword">public</span> Xx <span class="title function_">getXxById</span><span class="params">(<span class="type">long</span> id)</span> &#123;</span><br><span class="line">        <span class="comment">// 省略实现</span></span><br><span class="line">        <span class="keyword">return</span> xx;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateXx</span><span class="params">(Xx xx)</span> &#123;</span><br><span class="line">        <span class="comment">// 更新MySQL数据 省略</span></span><br><span class="line">        <span class="comment">// 删除缓存</span></span><br><span class="line">        xxLazyCache.deleteXxFromCache(xx.getId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteXx</span><span class="params">(<span class="type">long</span> id)</span> &#123;</span><br><span class="line">        <span class="comment">// 删除MySQL数据 省略</span></span><br><span class="line">        <span class="comment">// 删除缓存</span></span><br><span class="line">        xxLazyCache.deleteXxFromCache(xx.getId());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 实体类</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Xx</span> &#123;</span><br><span class="line">    <span class="comment">// 业务主键</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="comment">// ...省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;redis-Guava-缓存&quot;&gt;&lt;a href=&quot;#redis-Guava-缓存&quot; class=&quot;headerlink&quot; title=&quot;redis Guava 缓存&quot;&gt;&lt;/a&gt;redis Guava 缓存&lt;/h2&gt;&lt;h3 id=&quot;redis-懒加载&quot;&gt;&lt;a hre</summary>
      
    
    
    
    <category term="Guava" scheme="http://duanyushuai.github.io/categories/Guava/"/>
    
    <category term="redis" scheme="http://duanyushuai.github.io/categories/Guava/redis/"/>
    
    
    <category term="Guava" scheme="http://duanyushuai.github.io/tags/Guava/"/>
    
    <category term="redis" scheme="http://duanyushuai.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>解决跨域</title>
    <link href="http://duanyushuai.github.io/2022/06/25/%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F/"/>
    <id>http://duanyushuai.github.io/2022/06/25/%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F/</id>
    <published>2022-06-25T09:57:38.465Z</published>
    <updated>2022-08-14T04:28:49.153Z</updated>
    
    <content type="html"><![CDATA[<h2 id="解决跨域"><a href="#解决跨域" class="headerlink" title="解决跨域"></a>解决跨域</h2><ol><li>使用nginx部署为同一域</li></ol><p><img src="/../img/kuayu1.png" alt=" "></p><ol start="2"><li>请求返回可跨域</li></ol><p><img src="/../img/kuayu2.png">   </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;解决跨域&quot;&gt;&lt;a href=&quot;#解决跨域&quot; class=&quot;headerlink&quot; title=&quot;解决跨域&quot;&gt;&lt;/a&gt;解决跨域&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;使用nginx部署为同一域&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;/../img/kuayu1.png</summary>
      
    
    
    
    <category term="java web" scheme="http://duanyushuai.github.io/categories/java-web/"/>
    
    
    <category term="java web" scheme="http://duanyushuai.github.io/tags/java-web/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://duanyushuai.github.io/2022/06/12/Duan/"/>
    <id>http://duanyushuai.github.io/2022/06/12/Duan/</id>
    <published>2022-06-12T09:02:04.255Z</published>
    <updated>2022-06-13T00:32:33.427Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Duan"><a href="#Duan" class="headerlink" title="Duan"></a>Duan</h2><p>test</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Duan&quot;&gt;&lt;a href=&quot;#Duan&quot; class=&quot;headerlink&quot; title=&quot;Duan&quot;&gt;&lt;/a&gt;Duan&lt;/h2&gt;&lt;p&gt;test&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>api接口优化</title>
    <link href="http://duanyushuai.github.io/2022/06/07/api%E6%8E%A5%E5%8F%A3%E4%BC%98%E5%8C%96/"/>
    <id>http://duanyushuai.github.io/2022/06/07/api%E6%8E%A5%E5%8F%A3%E4%BC%98%E5%8C%96/</id>
    <published>2022-06-07T02:00:00.000Z</published>
    <updated>2022-08-14T04:29:34.848Z</updated>
    
    <content type="html"><![CDATA[<h1 id="api-接口调优"><a href="#api-接口调优" class="headerlink" title="api 接口调优"></a>api 接口调优</h1><h3 id="慢查询"><a href="#慢查询" class="headerlink" title="慢查询"></a>慢查询</h3><h4 id="1-深度分页"><a href="#1-深度分页" class="headerlink" title="1.深度分页"></a>1.深度分页</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select name,code from student limit 1000,20</span><br></pre></td></tr></table></figure><p>会查出来前1000条数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select name,code from student where id &gt; 1000 limit 20</span><br></pre></td></tr></table></figure><p>走索引，但需要上次查询出来的最大id</p><h4 id="2-未加索引"><a href="#2-未加索引" class="headerlink" title="2.未加索引"></a>2.未加索引</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show create table xxxx (表名)</span><br></pre></td></tr></table></figure><p>查看表索引</p><p>加索引表可能引起锁表，要在mysql使用低峰期</p><h4 id="3-索引失效"><a href="#3-索引失效" class="headerlink" title="3.索引失效"></a>3.索引失效</h4><p><strong>索引失效的几个原因</strong></p><ol><li>索引字段的区分度不大</li><li>索引语句在or中</li><li>模糊匹配 %xxx</li><li>索引发生隐式变换</li><li>不满足最左前缀规则</li><li>where条件里，索引有计算</li></ol><h4 id="4-join-过多or子查询过多"><a href="#4-join-过多or子查询过多" class="headerlink" title="4.join 过多or子查询过多"></a>4.join 过多or子查询过多</h4><p>一般不建议用子查询，可以把子查询改成join，join的表也不宜过多，具体问题具体分析，看数据量</p><h4 id="5-in的元素过多"><a href="#5-in的元素过多" class="headerlink" title="5.in的元素过多"></a>5.in的元素过多</h4><p>如果一个查询有in ，in条件加了合适的索引，还是慢，就高度怀疑是in的元素过多。可以分组查询，再快可以引用多线程</p><p>in元素过多可以在代码层做限制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(ids.size() &gt; <span class="number">200</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&quot;单次查询数据量太多&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-单纯数据量过大"><a href="#6-单纯数据量过大" class="headerlink" title="6.单纯数据量过大"></a>6.单纯数据量过大</h4><p>分库分表</p><h3 id="业务复杂"><a href="#业务复杂" class="headerlink" title="业务复杂"></a>业务复杂</h3><h4 id="1-循环调用"><a href="#1-循环调用" class="headerlink" title="1.循环调用"></a>1.循环调用</h4><p>循环调用同一段代码，每次的循环逻辑一致，前后不关联。比如我们要初始化一个列表。</p><p>可采用多线程的方式去获取数据</p><h4 id="2-顺序调用"><a href="#2-顺序调用" class="headerlink" title="2. 顺序调用"></a>2. 顺序调用</h4><p><img src="/../img/api%E8%B0%83%E4%BC%981.png"></p><p>使用CompletableFuture解决</p><h4 id="3-线程池设置不合理"><a href="#3-线程池设置不合理" class="headerlink" title="3. 线程池设置不合理"></a>3. 线程池设置不合理</h4><p>调整线程池参数，查看时候是io任务还是cpu任务，根据业务来拆分线程池。</p><h4 id="4-锁设置并不合理"><a href="#4-锁设置并不合理" class="headerlink" title="4. 锁设置并不合理"></a>4. 锁设置并不合理</h4><p>锁类型使用不合理，就是读写锁。锁粒度太大</p><h4 id="5-机器问题（fullGC，机器重启，线程打满）"><a href="#5-机器问题（fullGC，机器重启，线程打满）" class="headerlink" title="5.机器问题（fullGC，机器重启，线程打满）"></a>5.机器问题（fullGC，机器重启，线程打满）</h4><p>造成这个问题的原因非常多，笔者就遇到了定时任务过大引起fullGC，代码存在线程泄露引起RSS内存占用过高进而引起机器重启等待诸多原因。需要结合各种监控和具体场景具体分析，进而进行大事务拆分、重新规划线程池等等工作</p><h4 id="6-万金油解决方式"><a href="#6-万金油解决方式" class="headerlink" title="6. 万金油解决方式"></a>6. 万金油解决方式</h4><p> <strong>缓存</strong></p><ul><li>简单的map</li><li>guava等本地缓存工具包</li><li>缓存中间件：redis、tair或memcached</li></ul><p><strong>回调和反查</strong></p><p>​       这种方式往往是业务上的解决方式，在订单或者付款系统中应用的比较多。举个例子：当我们付款的时候，需要调用一个专门的付款系统接口，该系统经过一系列验证、存储工作后还要调用银行接口以执行付款。由于付款这个动作要求十分严谨，银行侧接口执行可能比较缓慢，进而拖累整个付款接口性能。</p><p>​       这个时候我们就可以采用fast success的方式：当必要的校验和存储完成后，立即返回success，同时告诉调用方一个中间态“付款中”。而后调用银行接口，当获得支付结果后再调用上游系统的回调接口返回付款的最终结果“成果”or“失败”。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;api-接口调优&quot;&gt;&lt;a href=&quot;#api-接口调优&quot; class=&quot;headerlink&quot; title=&quot;api 接口调优&quot;&gt;&lt;/a&gt;api 接口调优&lt;/h1&gt;&lt;h3 id=&quot;慢查询&quot;&gt;&lt;a href=&quot;#慢查询&quot; class=&quot;headerlink&quot; ti</summary>
      
    
    
    
    <category term="java web" scheme="http://duanyushuai.github.io/categories/java-web/"/>
    
    
    <category term="java web" scheme="http://duanyushuai.github.io/tags/java-web/"/>
    
  </entry>
  
  <entry>
    <title>二分查找</title>
    <link href="http://duanyushuai.github.io/2022/04/22/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
    <id>http://duanyushuai.github.io/2022/04/22/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</id>
    <published>2022-04-22T02:00:00.000Z</published>
    <updated>2022-11-03T09:31:31.148Z</updated>
    
    <content type="html"><![CDATA[<h1 id="二分查找-x2F-排序"><a href="#二分查找-x2F-排序" class="headerlink" title="二分查找&#x2F;排序"></a>二分查找&#x2F;排序</h1><h4 id="1-二分查找"><a href="#1-二分查找" class="headerlink" title="1. 二分查找"></a>1. 二分查找</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nums int整型一维数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> target int整型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int整型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">search</span> <span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (l &lt;= r) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> (l + r) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[m] == target) &#123;</span><br><span class="line">                <span class="keyword">return</span> m;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (nums[m] &gt; target)</span><br><span class="line">                r = m - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                l = m + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-归并排序"><a href="#2-归并排序" class="headerlink" title="2. 归并排序"></a>2. 归并排序</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Sort</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">MergeSort</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> low, <span class="type">int</span> high)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//使用递归的方式进行归并排序，所需要的空间复杂度是O（N+logN）</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (low + high)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(low &lt; high)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//递归地对左右两边进行排序</span></span><br><span class="line">            MergeSort(arr, low, mid);</span><br><span class="line">            MergeSort(arr, mid+<span class="number">1</span>, high);</span><br><span class="line">            <span class="comment">//合并</span></span><br><span class="line">            merge(arr, low, mid, high);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//merge函数实际上是将两个有序数组合并成一个有序数组</span></span><br><span class="line">    <span class="comment">//因为数组有序，合并很简单，只要维护几个指针就可以了</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">merge</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> low, <span class="type">int</span> mid, <span class="type">int</span> high)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//temp数组用于暂存合并的结果</span></span><br><span class="line">        <span class="type">int</span>[] temp = <span class="keyword">new</span> <span class="title class_">int</span>[high - low + <span class="number">1</span>];</span><br><span class="line">        <span class="comment">//左半边的指针</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> low;</span><br><span class="line">        <span class="comment">//右半边的指针</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> mid+<span class="number">1</span>;</span><br><span class="line">        <span class="comment">//合并后数组的指针</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//将记录由小到大地放进temp数组</span></span><br><span class="line">        <span class="keyword">for</span>(; i &lt;= mid &amp;&amp; j &lt;= high; k++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i] &lt; arr[j])</span><br><span class="line">                temp[k] = arr[i++];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                temp[k] = arr[j++];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//接下来两个while循环是为了将剩余的（比另一边多出来的个数）放到temp数组中</span></span><br><span class="line">        <span class="keyword">while</span>(i &lt;= mid)</span><br><span class="line">            temp[k++] = arr[i++];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(j &lt;= high)</span><br><span class="line">            temp[k++] = arr[j++];</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//将temp数组中的元素写入到待排数组中</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">0</span>; l &lt; temp.length; l++)</span><br><span class="line">            arr[low + l] = temp[l];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-快速排序"><a href="#3-快速排序" class="headerlink" title="3.快速排序"></a>3.快速排序</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QuickSort</span> <span class="keyword">implements</span> <span class="title class_">IArraySort</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] sort(<span class="type">int</span>[] sourceArray) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 对 arr 进行拷贝，不改变参数内容</span></span><br><span class="line">        <span class="type">int</span>[] arr = Arrays.copyOf(sourceArray, sourceArray.length);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> quickSort(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] quickSort(<span class="type">int</span>[] arr, <span class="type">int</span> left, <span class="type">int</span> right) &#123;</span><br><span class="line">        <span class="keyword">if</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">partitionIndex</span> <span class="operator">=</span> partition(arr, left, right);</span><br><span class="line">            quickSort(arr, left, partitionIndex - <span class="number">1</span>);</span><br><span class="line">            quickSort(arr, partitionIndex + <span class="number">1</span>, right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">partition</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">        <span class="comment">// 设定基准值（pivot）</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">pivot</span> <span class="operator">=</span> left;</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> pivot + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> index; i &lt;= right; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[i] &lt; arr[pivot]) &#123;</span><br><span class="line">                swap(arr, i, index);</span><br><span class="line">                index++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        swap(arr, pivot, index - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> index - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[i];</span><br><span class="line">        arr[i] = arr[j];</span><br><span class="line">        arr[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;二分查找-x2F-排序&quot;&gt;&lt;a href=&quot;#二分查找-x2F-排序&quot; class=&quot;headerlink&quot; title=&quot;二分查找&amp;#x2F;排序&quot;&gt;&lt;/a&gt;二分查找&amp;#x2F;排序&lt;/h1&gt;&lt;h4 id=&quot;1-二分查找&quot;&gt;&lt;a href=&quot;#1-二分查找&quot; c</summary>
      
    
    
    
    <category term="算法" scheme="http://duanyushuai.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="http://duanyushuai.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>
